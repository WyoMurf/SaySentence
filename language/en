;; this file is intended to allow multi-lingual specifications
;; of how to algorithmically "say" numbers and strings in different languages,
;; even if the methodologies are quite different
;;
;;
;;
;; specification syntax
;;
;; [identlist]  ;; a header telling which utterance is being described. 
;;             <identlist> is a single identifier, or a comma separated list of identifiers.
;;             If more than one ident is provided, then they are treated as aliases.
;;             An ident can have one of the following values:
;;               silence   ;; a special section-- silence files to use for what notation; no SayScript here.
;;               number
;;               digit_str
;;               alphanum_str
;;               char_str
;;               money
;;               phonetic_str
;;               enumeration
;;               date
;;               time
;;               date_time
;;               date_format_[AaBbhYdeIlhkmMNPpQqRST]  (and combinations of these as appropriate for your vocabulary)
;;               rel_date_time
;;     -- other ident names can be declared, and referenced via << >> notation, but
;;        the above are required for a working system.
;;
;;     -- When a SayScript is invoked for a particular header, it can be passed:
;;          1. An option string. These options can be accessed via the expressions outlined below (see {opt:x}),
;;               or, tested by Ops (see OPT and NOTOPT below).
;;          2. A value, consisting of one of the following:
;;              a. a NUMBER, in the form of a string, and for the [money] section, a floating point number.
;;                 Since the number is stored both as a string and as an integer value, the RANGE and PATTERN ops apply.
;;              b. a STRING, for the [char_str] and [alphanum_str], etc. sections. PATTERN ops apply.
;;              c. a timeval, for all the date/time related sections. All the DATE and time related ops apply.
;;          3. If an OP is inappropriate for the data passed, it may just evaluate FALSE, but then again, it may not.
;;             the parser can notify the user of inappropriate OP usage for the 12 fixed ident values above.
;; 
;;  Every line within the body of a language has these five columns:
;;
;; 1.  OP   -- a comma separated list of operations to perform:
;;               RANGE
;;               PATTERN
;;               GREATER
;;               LESS
;;               VAR
;;               NOTVAR
;;               NUMLEN
;;               ATBEGIN
;;               ATEXIT
;;               DATEPAST_RANGE
;;               DATEPAST_GREATER
;;               DATEFUT_RANGE
;;               DATEFUT_GREATER
;;               ANYDATE
;;               MINUTE_RANGE
;;               HOUR_RANGE
;;               YEAR_RANGE
;;               OPT
;;               NOTOPT
;;
;;        If there is more than one OP specified, then the Ops are evaluated
;;        in order, and the first OP that evaluates to FALSE terminates the evaluation,
;;        and execution procedes to the next statement. This equates to the ANDing of 
;;        the multiple OPs.
;;               
;;     a. RANGE. The ARG column should contain two numbers sep by a comma. If we notate
;;        the range as  "a,b", then the current line is processed if a <= the input number <= b.
;;        If the input number is not within this range, the line is skipped, and processing
;;        proceeds to the next line.
;;     b. PATTERN. If the input number matches the regex (enclosed in quotes) in the ARG column, then process the line,
;;           otherwise, skip this line and continue with the next line in the script.
;;     c. GREATER. If the input number is numerically greater than the ARG, then process this line. Skip otherwise.
;;     d. LESS. If the input number is numerically smaller than the ARG, then process this line. Skip otherwise.
;;     e. VAR. If the variable name exists and is set to a non-zero value, then process this line, or skip this line.
;;     f. ATEXIT. Before the script terminates, all statements with ATEXIT will be executed in order. These statements
;;           are ignored until that time. They are only evaluated
;;        if DONE or RANGE_ERROR is encountered. At that time, the script will be scanned and
;;        all ATEXIT lines will be evaluated in sequence. If more than one OP is present, ATEXIT should be FIRST!
;;     g. DATEPAST_GREATER. Expects one arg, a value in days, If the given date is in the past, greater than
;;          the number of days in arg, then process the line.
;;     h. DATEFUT_GREATER. The analog to DATEPAST_GREATER, but applies to the future.
;;     i. ANYDATE. Arg is null. Always process this statement.
;;     j. MINUTE_RANGE. Arg is in range format, x <= minutes <= y must be true for statement to be processed.
;;     k. HOUR_RANGE. Like MINUTE_RANGE, only compares the 24 hour time.
;;     l. YEAR_RANGE.  Also like MINUTE_RANGE, only for the year.
;;     m. DATEPAST_RANGE. Expects a comma-sep pair of args in days describing x <= timeval <= y; If the day is in the
;;        past and within the indicated range, then process the statement.
;;     n. DATEFUT_RANGE. Same as DATEPAST_RANGE, but is true only if the supplied date is in the future, 
;;        within the number of days specified.
;;     o. NOTVAR. If the variable name has never been set, or is 0, then process this line.
;;     p. OPT.  The arg must consist of a single character. If it exists in the options passed to the script,
;;         then the OP is true.
;;     q. NOTOPT. The arg must consist of a single character. If it does NOT exist in the options passed to the script,
;;         then the OP is true.
;;     r. ATBEGIN. Before the script is started, all statements with the ATBEGIN op are evaluated in sequence, if any exist.
;;         If more than one OP is specified, then the ATBEGIN should be FIRST!
;;     s. SECOND_RANGE. Like MINUTE_RANGE, or HOUR_RANGE, compares the seconds after the minute.
;;
;; 			  -- each of these operations will be explained below.
;; 
;; 2. ARG  -- the data for the OP(s) to operate on/with:
;;               for RANGE, it will be two numbers, separated by a comma
;;               for PATTERN, it will be a single REGEX expression to match. Must be enclosed in double quotes. use ' \" ' to 
;;                            include a double quote in the regex.
;;               for GREATER, and LESS,  it will a single number
;;               for VAR, it will be the name of a user-defined VAR
;;               for ATEXIT, there are no args.
;;               for ATBEGIN, there are no args.
;;               for NUMLEN, a number that will match the length of the input number, or the rule will be skipped.
;;                     or, ODD, which will be true if the length of num is an odd number,
;;                     or, EVEN, which will be true if the length of num is an even number.
;;               for DATEFORM, the script is run for each format specified in the format. The arg should
;;                     contain exactly one letter that must match the current format for the statement to be 
;;                     processed. The DATEFORM should only be used in the [date_format] section.
;;               for DATEPAST, if the arg is less than or equal to the difference in the day numbers between the given time, 
;;                     and -Y´now¡, then the statement will be processed. You can also say 
;;                     2W, for 2 weeks, or 2M for 2 months, or 2Y for 2 years, as an abbreviation.
;;               for DATEFUT, the same as DATEPAST, except the input time value will be in the future
;;               for ANYDATE, a ´-´ is acceptable. This is for single rules that cover all dates.
;;               for SECOND_RANGE, a comma separated pair of lower,upper bounds to test for the {time.sec} field.
;;               for MINUTE_RANGE, a comma separated pair of lower,upper bounds to test for the {time.min} field.
;;               for HOUR_RANGE, a comma separated pair of lower,upper bounds to test for the {time.24hour} field.
;;               for YEAR_RANGE, a comma separated pair of lower,upper bounds to test against the {date.year} field.
;;               for DATEPAST_RANGE, a comma-sep pair (x,y) of args in days in the past describing x <= timeval <= y;
;;                     all DATEPAST and DATEFUT will calculate this by calculating the tiem of 00:00:00 on the 24 clock
;;                     of the current day, and using 86,400 seconds per day from there. 0 days is true if the time passed
;;                     is between ´now¡, and the beginning of the day.
;;               for DATEFUT_RANGE, the args are the same, and the same heuristics apply, except the date passed to the script
;;                     must be greater than the current time. 0 days in the future, is a time that is between the beginning of
;;                     ´today', and before the end of ´today'.
;;               for NOTVAR, a single variable name is the argument, and if it has never been set, or is 0, then this OP is
;;                     "TRUE"
;;               for OPT, the arg is a char string. If any of these chars exist in the option string passed to the script, then
;;                     This OP is "TRUE"
;;               for NOTOPT, to evaluate as "TRUE", none of the chars in the arg string must be in the option string passed to script.
;;
;;          If multiple Ops were specified, then the number of comma separated elements in the ARG list
;;          should be the total of the number of args required for each OP. The args for each OP are in the same order
;;          as the Ops. The first FALSE OP terminates the evaluation, and the flow of control goes to the next statement.
;;          Thus in this statement:
;;             OPT,RANGE  f,0,100 ... 
;;          first, the OPT operation will be tested, to see f is among the options passed, and if it is, then
;;          the input number will checked to see if it is between 0 and 100 inclusive. If it is, the statement
;;          will be processed, and any sound files will be played.
;; 
;; 3. Files to Play  'notation' separated list of files to play, including expressions. If there are no
;;                     files to play, a single '-' indicates a null entry.
;;                     The 'notation' separating files represents amounts of silence to insert between
;;                     them. The notation can consist of one or more of these characters:
;;                     comma (,); semicolon (;); plus (+); colon (:); period (.), and questionmark (?)
;;                     Each separating character represents a single file or set of files containing silence
;;                     that should be played in that spot. It was intended that the plus (+) should be null silence,
;;                     so that utterances could be directly joined, and it resemble the concat operator in some languages.
;;     File names may contain the following expressions:
;;        {num[x]} -- num[0:0] is the leftmost (first) number in the string. num[1:1] is the next, and so on.
;;        {num[x:y]] -- x and y form a range; x <= y; x and y are inclusive, so num[0:2] contains the 
;;                      first 3 characters of the number/string.
;;        {opt:f} -- will evaluate to 'f' if the option contains the char 'f'. Null otherwise.
;;        {time.sec}  -- 0 to 59; use this in the various date and time sections to be replaced with the 
;;                       appropriate field from the time structure.
;;        {time.min}   -- 0 to 59
;;        {time.12hour}   -- 0 to 12
;;        {time.24hour}   -- 0 to 23
;;        {time.12hour2d}   -- 00 to 12
;;        {time.24hour2d}   -- 00 to 23
;;        {time.ampm}     -- "a-m" or "p-m", depending on the 12-hour time.
;;        {time.xm}       --  "am" or "pm" depending on the 12-hour time.
;;        {time.cm}       --  ´A' or ´P' depending on the 12-hour time.
;;        {time.tz}       -- the timezone
;;        {date.dom}      -- 1 to 31
;;        {date.dow}      -- 0 to 6, where 0 is sunday
;;        {date.month}    -- 0 to 11, where 0 is January
;;        {date.dowstr}      -- ´sun', ´mon', ´tues', ´wed', ´thurs', ´fri', ´sat'
;;        {date.monthstr}    -- ´jan', ´feb', ´mar', ´apr', ´may', ´june', ´july', ´aug', ´sep', ´oct', ´nov', ´dec'
;;        {date.year}     -- Full year, at least from 1960 to 2035.
;;       ALSO, any time: or date: spec can contain range specifiers: {date.year[3]}, {date.year[0:1]}, and etc.
;;        {date.century}  -- result of truncated division of year by 100. Example, for year 1998, century is 19.
;;        {date.decade}   -- the last two digits of the year.
;;        {timeval}       -- the unix timeval passed into the date related funcs. Can be used to call a different section
;;                            (see next item)
;;        <<section:arg>>  -- calls the section (like ´number¡, ´money¡, etc), and sets the num/date to the arg.
;;                    arg can contain any of the above applicable expressions. Acts like a subroutine call.
;; 
;; 4. VARSET -- when necessary, a single <varnam> = VALUE expression (with no spaces). A single '-' indicates a null entry.
;; 
;; 5. NEXT -- A Single Operation to describe how to move to the next state:
;;             CUT(n)  where n == the number of characters to remove from the beginning of the number. 
;;                     RESTART is then performed.
;;             RANGE_ERROR  says to terminate the script with a range error -- the number input is too large.
;;             RESTART  start executing the script again at the beginning
;;             DONE    end the script
;;             NEGATE   change the sign of the input number, and RESTART
;; 
;; Here's the general rules of this simple language: 
;; 
;;  1. Execution proceeds in order, from the first line to the last. 
;;  2. RESTART operations will force the execution to start at the beginning.
;;  3. DONE  terminates the script. The number should have been fully voiced.
;;  4. RANGE_ERROR terminates the script, and the say app should output some error message.
;; 
;;
;;   SILENCE INSERTION
;;  The [silence] section must be defined in every SayScript file, to determine the 
;;  exact length of pause to insert between words or phrases. In this section, each character 
;;   is assigned a silence file (or set of silence files) to be concatenated in the sound buffer
;;   to provide the necessary pause.
;;  These declarations must be defined:
;;   
;; SENT_SPACE = <silence file> (any number of silence files, actually; no spaces or other notation between them, please!)
;; SENT_COMMA = <silence file> (make sure to include the <> notation to surround each file name)
;; SCRIPT_COMMA = <silence file>
;; BOTH_COLON = <silence file>
;; BOTH_SEMICOLON = <silence file>
;; BOTH_PERIOD = <silence file>
;; BOTH_QUESTION = <silence file)
;; BOTH_PLUS = <silence file>       (for null silence, just use a - instead of <> notation)
;;  
;;
;;  5. Columns are separated by any number of spaces or tabs.
;; 
;; Here are some example entries:
;; 

;;  The following would be found in /var/lib/asterisk/language/en:

;;; ===================================================================================================================
;;; ===================================================================================================================
;;; ===================================================================================================================
;;; ===================================================================================================================
;;;
;;;;  CURRENT ASTERISK say_number:
;;;
;;;
;;; one of the complications that the current Asterisk English script introduces is 
;;; the "delayed thousand/million announcing".
;;; This is common where languages use the "thousand (or any 10^(3x)) to clearly divide the groups of 3 digits.
;;; Thus, 102 "million" 3, is 102,000,003. 102 "million" 3 "thousand" is 102,003,000 & etc.  But since the million
;;; is determined before it is pronounced, we need a method to store and use it later... using the VAR mechanism...
;;;

[silence]    ;; by default, Asterisk with the default sound set, inserts no silence between phrases and words.
SENT_SPACE = -   ;; the silence is expected to be contained in the sound files themselves
SENT_COMMA = -
SCRIPT_COMMA = -
BOTH_COLON = -    
BOTH_SEMICOLON = -
BOTH_PERIOD =  -
BOTH_QUESTION =  -
BOTH_PLUS = -  


[digit_str]
PATTERN "^[0-9]"  digits/{num[0:0]}                    -  CUT(1)
PATTERN "^."      -                                    -  CUT(1)


[number]

ATBEGIN,GREATER  999999999999        -                             -         RANGE_ERROR
ATBEGIN,LESS     0         digits/minus                            -          NEGATE  ;; turn the num positive and say "minus"

PATTERN  "^0[0-9]"                 -                               -          CUT(1)  ;; get rid of leading zeroes!

;; For numbers like 102,000, after the "one" "hundred" "two", we'll get 'num' set to zero, 
;; and RESTART (always how CUT() ends) will end the script. 
;; So, we have to make sure that the "million" or "thousand" gets said before we exit....
;; But we have to do this before we see 0 and say 'zero'.

VAR,PATTERN  SAYTHOW,"^0+$"            digits/thousand                  SAYTHOW=0   DONE ;; only one of these could be set...
VAR,PATTERN  SAYMIL,"^0+$"             digits/million                   SAYMIL=0    DONE
VAR,PATTERN  SAYBIL,"^0+$"             digits/billion                   SAYBIL=0    DONE

;; handle BILLIONS   hundreds/tens/ones, followed by "billion"
RANGE 100000000000,999999999999  digits/{num[0:0]},digits/hundred   SAYBIL=1   CUT(1)
RANGE 20000000000,99999999999    digits/{num[0:0]}0                 SAYBIL=1   CUT(1)
RANGE 10000000000,19999999999    digits/{num[0:1]}                SAYBIL=1   CUT(2)
RANGE 1000000000,9999999999      digits/{num[0:0]}                  SAYBIL=1   CUT(1)
VAR,PATTERN   SAYBIL,"[1-9]"     digits/billion			    SAYBIL=0   RESTART   ;; pronounce the "billion" -- but only if there is more to say afterwards

;; handle MILLIONS   hundreds/tens/ones, followed by "million"
RANGE 100000000,999999999  digits/{num[0:0]},digits/hundred   SAYMIL=1   CUT(1)
RANGE 20000000,99999999    digits/{num[0:0]}0                 SAYMIL=1   CUT(1)
RANGE 10000000,19999999    digits/{num[0:1]}                  SAYMIL=1   CUT(2)
RANGE 1000000,9999999      digits/{num[0:0]}                  SAYMIL=1   CUT(1)
VAR,PATTERN   SAYMIL,"[1-9]"   digits/million		      SAYMIL=0   RESTART


;; handle THOUSANDS  hundreds/tens/ones, followed by "thousand"
RANGE 100000,999999        digits/{num[0:0]},digits/hundred   SAYTHOW=1   CUT(1)  ;; x "hundred"
RANGE 20000,99999          digits/{num[0:0]}0                 SAYTHOW=1   CUT(1)  ;; twenty/thirty/forty/etc
RANGE 10000,19999          digits/{num[0:1]}                  SAYTHOW=1   CUT(2)  ;; ten thru nineteen
RANGE 1000,9999            digits/{num[0:0]}                  SAYTHOW=1   CUT(1)  ;; one thru 9
VAR,PATTERN   SAYTHOW,"[1-9]"   digits/thousand		      SAYTHOW=0   RESTART

RANGE    0,9               digits/{num[0:0]}                - DONE
RANGE    10,19		   digits/{num[0:1]}                - DONE
PATTERN  "^[1-9]0$"	   digits/{num[0:1]}		    - DONE
RANGE    20,99             digits/{num[0:0]}0                 - CUT(1)
RANGE    100,999           digits/{num[0:0]},digits/hundred   - CUT(1)



[alphanum_str] ;; just a copy of the char_str;; it will say all the alphas and nums, and so much more!
PATTERN  "^[*]"       digits/star                            - CUT(1)
PATTERN  "^[#]"     digits/pound                             - CUT(1)
PATTERN  "^[!]"     letters/exclamation-point                - CUT(1)
PATTERN  "^[@]"     letters/at                               - CUT(1)
PATTERN  "^[$]"     letters/dollar                           - CUT(1)
PATTERN  "^[-]"     letters/dash                             - CUT(1)
PATTERN  "^[.]"     letters/dot                              - CUT(1)
PATTERN  "^[=]"     letters/equals                           - CUT(1)
PATTERN  "^[+]"     letters/plus                             - CUT(1)
PATTERN  "^[/]"     letters/slash                            - CUT(1)
PATTERN  "^[ ]"     letters/space                            - CUT(1)
PATTERN  "^[0-9]"   digits/{num[0:0]}                         - CUT(1)
PATTERN  "^[a-z]"   letters/{num[0:0]}                        - CUT(1)  ;; the code for char_str will downcase all alphabetic
PATTERN  "^."       letters/{num[0:0]}                        - CUT(1)  ;; catchall for anything else


[char_str]
PATTERN  "^[*]"     digits/star                              - CUT(1)
PATTERN  "^[#]"     digits/pound                             - CUT(1)
PATTERN  "^[!]"     letters/exclamation-point                - CUT(1)
PATTERN  "^[@]"     letters/at                               - CUT(1)
PATTERN  "^[$]"     letters/dollar                           - CUT(1)
PATTERN  "^[-]"     letters/dash                             - CUT(1)
PATTERN  "^[.]"     letters/dot                              - CUT(1)
PATTERN  "^[=]"     letters/equals                           - CUT(1)
PATTERN  "^[+]"     letters/plus                             - CUT(1)
PATTERN  "^[/]"     letters/slash                            - CUT(1)
PATTERN  "^[ ]"     letters/space                            - CUT(1)
PATTERN  "^[0-9]"    digits/{num[0:0]}                         - CUT(1)
PATTERN  "^[a-z]"    letters/{num[0:0]}                        - CUT(1)  ;; the code for char_str will downcase all alphabetic
PATTERN  "^."        letters/{num[0:0]}                        - CUT(1)  ;; catchall for anything else



[phonetic_str]
PATTERN  "^[*]"     digits/star                              - CUT(1)
PATTERN  "^[#]"     digits/pound                             - CUT(1)
PATTERN  "^[!]"     letters/exclamation-point                - CUT(1)
PATTERN  "^[@]"     letters/at                               - CUT(1)
PATTERN  "^[$]"     letters/dollar                           - CUT(1)
PATTERN  "^[-]"     letters/dash                             - CUT(1)
PATTERN  "^[.]"     letters/dot                              - CUT(1)
PATTERN  "^[=]"     letters/equals                           - CUT(1)
PATTERN  "^[+]"     letters/plus                             - CUT(1)
PATTERN  "^[/]"     letters/slash                            - CUT(1)
PATTERN  "^[ ]"     letters/space                            - CUT(1)
PATTERN  "^[0-8]"    digits/{num[0:0]}                         - CUT(1)
PATTERN  "^[a-z9]"   phonetic/{num[0:0]}_p                    - CUT(1)  ;; the code for char_str will downcase all alphabetic
PATTERN  "^."        letters/{num[0:0]}                        - CUT(1)  ;; catchall for anything else



[enumeration]
;; PROBLEM: no h-hundred (hundredth), h-thousand (thousandth), h-million (millionth), h-billion (billionth), or h-trillion (trillionth).
;; (which implies, btw, that say_enumeration isn't totally correct in what it generates)
;; [enumeration]  ;; the last number has to finish with 'th', ´st', ´rd', etc, as in ´first', ´second', ´third', ´fourth', etc.
;; to say the ´minus first¡ is pretty senseless... but so it is.
ATBEGIN,LESS     0                 digits/minus      - NEGATE  ;; turn the num positive and say "minus"
ATBEGIN,GREATER     999999999999                 -                     - RANGE_ERROR

PATTERN  "^0[0-9]"  -                 -          CUT(1)  ;; get rid of leading zeroes!

;; BTW, the current Asterisk implementation of enumeration is incorrect...
;; it doesn't use h-hundred, h-thousand, h-million, or h-billion...  you need
;; to use these to say stuff like ´that was the 161-thousandth cat...´
;; NOT ´that was the 161st thousand cat' or like nonsense.

VAR,PATTERN  SAYTHOW,"^0+$"            digits/h-thousand              SAYTHOW=0   DONE ;; only one of these could be set... 'thousandth'
VAR,PATTERN  SAYMIL,"^0+$"             digits/h-million               SAYMIL=0    DONE  ;; 'millionth'
VAR,PATTERN  SAYBIL,"^0+$"             digits/h-billion               SAYBIL=0    DONE  ;; 'billionth'

;; handle BILLIONS   hundreds/tens/ones, followed by "billion"
RANGE 100000000000,999999999999  digits/{num[0:0]},digits/hundred  SAYBIL=1   CUT(1)
RANGE 20000000000,99999999999    digits/{num[0:0]}0                      SAYBIL=1   CUT(1)
RANGE 10000000000,19999999999    digits/{num[0:1]}                       SAYBIL=1   CUT(2)
RANGE 1000000000,9999999999      digits/{num[0:0]}                       SAYBIL=1   CUT(1)
VAR,PATTERN   SAYBIL,"[1-9]"   digits/billion			   SAYBIL=0   RESTART

;; handle MILLIONS   hundreds/tens/ones, followed by "million"
RANGE 100000000,999999999  digits/{num[0:0]},digits/hundred   SAYMIL=1   CUT(1)
RANGE 20000000,99999999    digits/{num[0:0]}0                 SAYMIL=1   CUT(1)
RANGE 10000000,19999999    digits/{num[0:1]}                  SAYMIL=1   CUT(2)
RANGE 1000000,9999999      digits/{num[0:0]}                  SAYMIL=1   CUT(1)
VAR,PATTERN   SAYMIL,"[1-9]"  digits/million		      SAYMIL=0   RESTART


;; handle THOUSANDS  hundreds/tens/ones, followed by "thousand"
RANGE 100000,999999            digits/{num[0:0]},digits/hundred   SAYTHOW=1   CUT(1)  ;; x "hundred"
RANGE 20000,99999              digits/{num[0:0]}0                 SAYTHOW=1   CUT(1)  ;; twenty/thirty/forty/etc
RANGE 10000,19999              digits/{num[0:1]}                  SAYTHOW=1   CUT(2)  ;; ten thru nineteen
RANGE 1000,9999                digits/{num[0:0]}                  SAYTHOW=1   CUT(1)  ;; one thru 9
VAR,PATTERN   SAYTHOW,"[1-9]"  digits/thousand		          SAYTHOW=0   RESTART


RANGE    10,19                digits/h-{num[0:1]}        - DONE
RANGE    0,9                  digits/h-{num[0:0]}        - DONE
PATTERN   "^[2-9]0$"           digits/h-{num[0:1]}        - DONE  ;; tenth, twentieth, thirtieth, fourtieth, etc.
RANGE    20,99                digits/{num[0:0]}0         - CUT(1)  ;; twenty, thirty, etc, followed by ´first, ´second', etc,

;;                                                                       via the previous rule after the restart
PATTERN   "^[1-9]00$"       digits/{num[0:0]},digits/h-hundred - DONE  ;; three hundredth car... Get the even hundredths with this one.
RANGE    100,999           digits/{num[0:0]},digits/hundred   - CUT(1)

;; For numbers like 102,000, after the "one" "hundred" "two", we'll get 'num' set to zero, 
;; and RESTART (always how CUT() ends) will end the script. 
;; So, we have to make sure that the "million" or "thousand" or whatever gets said before we exit....





[date]
;; by the way, the current Asterisk of say_date is a little broken,
;; it uses say_number for the day-of-month number, so it will say
;; something like 'Friday, June twenty-three, 2009', when it would
;; probably be better to say ´Friday, June twenty-third, 2009'
;; Hopefully its fixed by now.
YEAR_RANGE  1901,1999  digits/day-{date.dow},digits/mon-{date.month},<<enumeration:{date.dom}>>,<<number:{date.century}>>,<<number:{date.decade}>>  - DONE
YEAR_RANGE  1900,1900  digits/day-{date.dow},digits/mon-{date.month},<<enumeration:{date.dom}>>,<<number:{date.century}>>,digits/hundred  - DONE
YEAR_RANGE  2000,2009  digits/day-{date.dow},digits/mon-{date.month},<<enumeration:{date.dom}>>,<<number:{date.year}>>  - DONE
YEAR_RANGE  2010,2099  digits/day-{date.dow},digits/mon-{date.month},<<enumeration:{date.dom}>>,<<number:{date.century}>>,<<number:{date.decade}>>  - DONE
ANYDATE         -      digits/day-{date.dow},digits/mon-{date.month},<<enumeration:{date.dom}>>,<<number:{date.century}>>,<<number:{date.decade}>> - DONE


[time]
;; this should say something like ´10 oh four pm' or ´12 twenty two am' or '11 oclock am'
MINUTE_RANGE 0,0   <<number:{time.12hour}>>,digits/oclock,digits/{time.ampm}                 -  DONE
MINUTE_RANGE 1,9   <<number:{time.12hour}>>,digits/oh,digits/{time.min},digits/{time.ampm}   -  DONE
MINUTE_RANGE 10,59 <<number:{time.12hour}>>,<<number:{time.min}>>,digits/{time.ampm}           -  DONE

[date_time]
ANYDATE  -  <<date:{timeval}>><<time:{timeval}>>            - DONE               ;; XXX for both */


;; this is a little different, in that the formatted date pronouncer has a rather rich set of 
;; operators, that pronounce different items in the order specified. So, the say_date_format 
;; routine will call the date_format_<char> for each item in the format list; if a file is in the mix,
;; the file is played in sequence a level above the the sayscript. The sayscript is only concerned
;; with the format specs, and pronouncing the expected item correctly.

[date_format_A,date_format_a]
;; ´Sunday¡, 'Monday', etc
ANYDATE - digits/day-{date.dow}        - DONE


;; ´January', 'February', etc
[date_format_B,date_format_b,date_format_h]
ANYDATE - digits/mon-{date.month}        - DONE

;; ´first', ´second', ... ´thirty first'  day of month
[date_format_d,date_format_e]
ANYDATE - <<enumeration:{date.dom}>>  - DONE


;; Year 'two thousand 10', etc
[date_format_Y]
YEAR_PATTERN "^1[0-9]0[1-9]"    <<number:{date.century}>>,digits/oh,digits/{date.year[3]}     - DONE
YEAR_PATTERN "^1[0-9]00"    <<number:{date.century}>>,digits/hundred                          - DONE
YEAR_RANGE  0,1999  <<number:{date.century}>>,<<number:{date.decade}>>                      - DONE
YEAR_RANGE  2000,2009  <<number:{date.year}>>						     - DONE
YEAR_PATTERN "^2[1-9]00"    <<number:{date.century}>>,digits/hundred                          - DONE
YEAR_PATTERN "^[2-9][0-9]0[1-9]"   <<number:{date.century}>>,digits/oh,digits/{date.year[3]}  - DONE
YEAR_RANGE  2010,9999  <<number:{date.century}>>,<<number:{date.decade}>>                   - DONE

;; hour in 12-hour format ´oh' to 12
[date_format_I,date_format_l]
HOUR_RANGE 0,0  digits/oh                       - DONE
HOUR_RANGE 1,23 <<number:{time.12hour}>>        - DONE


;; hour in 24-hour format H as oh-8, k just says 8; 
[date_format_H]
HOUR_RANGE 0,0  digits/oh                           - DONE
HOUR_RANGE 1,9  digits/oh,<<number:{time.24hour}>>  - DONE
HOUR_RANGE 10,23 <<number:{time.24hour}>>            - DONE


[date_format_k]
HOUR_RANGE 0,0  digits/oh                  - DONE
HOUR_RANGE 1,23  <<number:{time.24hour}>>  - DONE


;; month number, ´first', ´second', ..., ´twelfth'  ;; who on earth will use this... oh, well!
[date_format_m]
ANYDATE -  <<enumeration:{date.month}>>  - DONE


;; say the minutes, M says ´oclock¡ if 0; N says ´hundred¡ if zero. ´oh¡ before mins less than 10;
[date_format_M]
MINUTE_RANGE   0,0    digits/oclock                    - DONE
MINUTE_RANGE   1,9    digits/oh,<<number:{time.min}>>  - DONE
MINUTE_RANGE   10,59  <<number:{time.min}>>            - DONE

[date_format_N]
MINUTE_RANGE   0,0    digits/hundred                   - DONE
MINUTE_RANGE   1,9    digits/oh,<<number:{time.min}>>  - DONE
MINUTE_RANGE   10,59  <<number:{time.min}>>            - DONE


;; AM/PM
[date_format_p,date_format_P]
ANYDATE -   digits/{time.ampm}                         - DONE


;; Relative date; ´today¡(for Q), (nothing for today for q)

[date_format_q]
DATEPAST_RANGE  0,0   -                                                                     - DONE  ;; today
DATEPAST_RANGE  1,1   digits/yesterday                                                      - DONE  ;; yesterday
DATEPAST_RANGE  2,6   <<date_format_A:{timeval}>>                                           - DONE  ;; w/I 6 days
DATEPAST_RANGE  7,30  <<date_format_A:{timeval}>>,<<date_format_B:{timeval}>>,<<date_format_d:{timeval}>> - DONE
DATEPAST_RANGE  31,183 <<date_format_B:{timeval}>>,<<date_format_d:{timeval}>>              - DONE
DATEPAST_GREATER  183  <<date_format_B:{timeval}>>,<<date_format_d:{timeval}>>,<<date_format_Y:{timeval}>> - DONE
DATEFUT_RANGE   1,1    digits/tomorrow                                                      - DONE ;; an enhancement!
DATEFUT_GREATER  1     <<date_format_B:{timeval}>>,<<date_format_d:{timeval}>>,<<date_format_Y:{timeval}>> - DONE


[date_format_Q]
DATEPAST_RANGE  0,0   digits/today                                                          - DONE  ;; today
DATEPAST_RANGE  1,1   digits/yesterday                                                      - DONE  ;; yesterday
DATEPAST_RANGE  2,6   <<date_format_A:{timeval}>>                                           - DONE  ;; w/I 6 days
DATEPAST_RANGE  7,30  <<date_format_A:{timeval}>>,<<date_format_B:{timeval}>>,<<date_format_d:{timeval}>> - DONE
DATEPAST_RANGE  31,183 <<date_format_B:{timeval}>>,<<date_format_d:{timeval}>>              - DONE
DATEPAST_GREATER  183  <<date_format_B:{timeval}>>,<<date_format_d:{timeval}>>,<<date_format_Y:{timeval}>> - DONE
DATEFUT_RANGE   1,1    digits/tomorrow                                                      - DONE ;; an enhancement!
DATEFUT_GREATER  1     <<date_format_B:{timeval}>>,<<date_format_d:{timeval}>>,<<date_format_Y:{timeval}>> - DONE

;; Equiv of HM,  ´oh' ´eight' ´thirty' ´three'
[date_format_R]
ANYDATE - <<date_format_H:{timeval}>>,<<date_format_M:{timeval}>>  - DONE


;; Seconds ´zero', ´oh' five, and so on
[date_format_S]
SECOND_RANGE  0,0  digits/0                         - DONE
SECOND_RANGE  1,9  digits/oh,<<number:{time.sec}>>  - DONE
SECOND_RANGE  10,59  <<number:{time.sec}>>          - DONE

;; T is the equiv of HMS
[date_format_T]
ANYDATE - <<date_format_H:{timeval}>>,<<date_format_M:{timeval}>><<date_format_S:{timeval}>>  - DONE



[rel_date_time]  ;; say_datetime_from_now
;; We can easily extend this into the future with ´today¡ and a little wave of the wand!
DATEPAST_RANGE  0,0   <<time:{timeval}>>       - DONE  ;; today: just tell the time                      ;; XXX */
DATEPAST_GREATER  6   digits/mon-{date.month},<<enumeration:{date.dom}>>,<<time:{timeval}>>   - DONE     ;; XXX */
DATEPAST_RANGE  1,6   digits/day-{date.dow},<<time:{timeval}>>                              - DONE       ;; XXX */
DATEFUT_GREATER   0   digits/mon-{date.month},<<enumeration:{date.dom}>>,<<time:{timeval}>>   - DONE     ;; XXX */
DATEFUT_RANGE   0,0   <<time:{timeval}>>       - DONE  ;; today: just tell the time                      ;; XXX */





[money]
;; the string fed to say_money should be in the format xxxx.xx   -- always!
;; for the sake of RANGE, the .xx is removed before calculation.
;; using a say_money is smart for translation purposes. It might help
;; fix the gender and other variables that would affect reading off the numbers,
;; allows you to use the local currency name, etc.
ATBEGIN,GREATER   999999999            -       - RANGE_ERROR

PATTERN           "^0[0-9]"            -       -  CUT(1)   ;; leading zero removal

;; use the .xx to read off the cents
;; btw, ´cents' is in the extras, which is funny... Seems pretty basic to me
;; these cents patterns have to be first, so the . pattern gets recognized
;; before the ranges below 10... the . will be recognized by the range containing 0.
PATTERN "^[.]00"             digits/dollars,vm-and,digits/0,cents                         - DONE
PATTERN "^[.][0-9]0"         digits/dollars,vm-and,digits/{num[1:1]}0,cents                 - DONE
PATTERN "^[.]0[1-9]"         digits/dollars,vm-and,digits/{num[2:2]},cents                  - DONE
PATTERN "^[.]1[1-9]"         digits/dollars,vm-and,digits/{num[1:2]},cents                - DONE
PATTERN "^[.][2-9][1-9]"     digits/dollars,vm-and,digits/{num[1:1]}0,digits/{num[2:2]},cents - DONE


;; handle BILLIONS   hundreds/tens/ones, followed by "billion"
RANGE 100000000000,999999999999  digits/{num[0:0]},digits/hundred  SAYBIL=1   CUT(1)
RANGE 20000000000,99999999999    digits/{num[0:0]}0                      SAYBIL=1   CUT(1)
RANGE 10000000000,19999999999    digits/{num[0:1]}                       SAYBIL=1   CUT(2)
RANGE 1000000000,9999999999      digits/{num[0:0]}                       SAYBIL=1   CUT(1)
VAR,PATTERN   SAYBIL,"[1-9]"   digits/billion			   SAYBIL=0   RESTART


;; handle MILLIONS   hundreds/tens/ones, followed by "million"
RANGE 100000000,999999999  digits/{num[0:0]},digits/hundred   SAYMIL=1   CUT(1)
RANGE 20000000,99999999    digits/{num[0:0]}0                 SAYMIL=1   CUT(1)
RANGE 10000000,19999999    digits/{num[0:1]}                SAYMIL=1   CUT(2)
RANGE 1000000,9999999      digits/{num[0:0]}                  SAYMIL=1   CUT(1)
VAR,PATTERN   SAYMIL,"[1-9]"   digits/million			   SAYMIL=0   RESTART

;; handle THOUSANDS  hundreds/tens/ones, followed by "thousand"
RANGE 100000,999999        digits/{num[0:0]},digits/hundred  SAYTHOW=1   CUT(1)  ;; x "hundred"
RANGE 20000,99999          digits/{num[0:0]}0                SAYTHOW=1   CUT(1)  ;; twenty/thirty/forty/etc
RANGE 10000,19999    digits/{num[0:1]}               SAYTHOW=1   CUT(2)  ;; ten thru nineteen
RANGE 1000,9999      digits/{num[0:0]}                 SAYTHOW=1   CUT(1)  ;; one thru 9
VAR,PATTERN   SAYTHOW,"[1-9]"   digits/thousand			   SAYTHOW=0   RESTART

RANGE    10,19             digits/{num[0:1]}                            - CUT(2)
RANGE    0,9               digits/{num[0:0]}                            - CUT(1)
PATTERN   "^[2-9]0[.]"        digits/{num[0:1]}                            - CUT(2)  ;; ten, twenty, thirty, fourty, etc.
RANGE    20,99             digits/{num[0:0]}0                           - CUT(1)
RANGE    100,999           digits/{num[0:0]},digits/hundred             - CUT(1)

;; we won't need the ATEXIT stuff like say_number, because the .xx at the end will insure the
;; script doesn't exit early and not say what it needs to.

