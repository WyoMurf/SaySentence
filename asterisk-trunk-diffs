Index: main/app.c
===================================================================
--- main/app.c	(revision 403615)
+++ main/app.c	(working copy)
@@ -1078,22 +1078,27 @@
 	return control_streamfile(chan, file, fwd, rev, stop, suspend, restart, skipms, offsetms, lang, NULL);
 }
 
+/* We will not need this function, I think, if we use say_sentence! */
 int ast_play_and_wait(struct ast_channel *chan, const char *fn)
 {
 	int d = 0;
 
-	ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", fn, ast_channel_name(chan));
-	if ((d = ast_streamfile(chan, fn, ast_channel_language(chan)))) {
-		return d;
+	if (ast_using_saysentence()) {
+		char buf1[512];
+		snprintf(buf1, sizeof(buf1), "<%s>", fn);  /* BAD, REALLY BAD. We need to get rid of all ast_play_wait() calls! */
+		ast_say_sentence(chan, AST_DIGIT_ANY, buf1);
+	} else {
+		ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", fn, ast_channel_name(chan));
+		if ((d = ast_streamfile(chan, fn, ast_channel_language(chan)))) {
+			return d;
+		}
+	
+		d = ast_waitstream(chan, AST_DIGIT_ANY);
+	
+		ast_stopstream(chan);
 	}
-
-	d = ast_waitstream(chan, AST_DIGIT_ANY);
-
-	ast_stopstream(chan);
-
 	return d;
 }
-
 /*!
  * \brief Construct a silence frame of the same duration as \a orig.
  *
@@ -1244,7 +1249,7 @@
 
 	if (playfile || beep) {
 		if (!beep) {
-			d = ast_play_and_wait(chan, playfile);
+			d = ast_play_and_wait(chan, playfile);  /* this is OK to leave as play_and_wait, as the record&play is working on non-scripted files, created outside the realm of sound sets */
 		}
 		if (d > -1) {
 			d = ast_stream_and_wait(chan, "beep", "");
@@ -2156,11 +2161,19 @@
 		case '9':
 		case '*':
 		case '#':
-			cmd = ast_play_and_wait(chan, "vm-sorry");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-sorry");
+			}
 			break;
 		default:
 			if (message_exists) {
-				cmd = ast_play_and_wait(chan, "vm-review");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-review");
+				}
 			} else {
 				if (!(cmd = ast_play_and_wait(chan, "vm-torerecord"))) {
 					cmd = ast_waitfordigit(chan, 600);
Index: main/file.c
===================================================================
--- main/file.c	(revision 403615)
+++ main/file.c	(working copy)
@@ -35,6 +35,7 @@
 #include <sys/stat.h>
 #include <sys/wait.h>
 #include <math.h>
+#include <sys/socket.h>
 
 #include "asterisk/_private.h"	/* declare ast_file_init() */
 #include "asterisk/paths.h"	/* use ast_config_AST_DATA_DIR */
@@ -1063,6 +1064,190 @@
 	return filehelper(filename, filename2, fmt, ACTION_COPY);
 }
 
+static int count_percents(const char *str)
+{
+	const char *p = str;
+	int count=0;
+	while (*p)
+	{
+		if (*p == '%')
+			count++;
+		p++;
+	}
+	return count;
+}
+
+static char * encode_html(const char *instr, char *outstr)
+{
+	const char *in = instr;
+	char *out = outstr;
+
+	while (*in) {
+		if (*in == '>') {
+			*out++ = '&';
+			*out++ = 'g';
+			*out++ = 't';
+			*out++ = ';';
+			in++;
+		} else if (*in == '<') {
+			*out++ = '&';
+			*out++ = 'l';
+			*out++ = 't';
+			*out++ = ';';
+			in++;
+		} else {
+			*out++ = *in++;
+		}
+	}
+	*out++ = 0; /* cap it off */
+	return outstr;
+}
+
+int ast_say_sentence(struct ast_channel *chan, const char *ecodes, const char *format, ...)
+{ 
+	/* figure out the number of args that *SHOULD* be there,
+	   and verify they ARE there, and then pass them on */
+	va_list ap;
+	int percents = count_percents(format);
+	char request_buf[2048];
+	char format_buf[1048];
+	char ecodes_buf[1048];
+	char response_buf[8096];
+	int i;
+	struct sockaddr_in pin;
+	struct hostent *hp;
+	int sd;
+	int ret;
+	char *searchpt;
+	char *foundpt, *endfoundpt;
+	struct ast_hostent ahp;
+
+
+	/* Steps:
+	1. Gather args, generate an XML request in a text buffer 
+	2. Transmit the XML
+	3. Retrieve the response from the server
+	4. Parse the xml response, play the sounds in order, quit if a stream returns a response code.
+        5. Return the last response.
+
+	And, when I make the entire system local to Asterisk,
+	the process will be same, but no XML, just raw structures
+	to push/pull data.
+	*/
+
+	sprintf(request_buf, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
+<SaySentenceRequest>\n\
+	<Lang_Locale>%s</Lang_Locale>\n\
+	<InterruptKeys>%s</InterruptKeys>\n\
+	<Format>%s</Format>\n\
+	<Arguments>\n", ast_channel_language(chan), encode_html(ecodes,ecodes_buf), encode_html(format,format_buf));
+
+	va_start (ap, format);
+	for (i=0; i<percents; i++) {
+		char *x = va_arg(ap, char*);
+		if (x && *x ) {
+			strcat(request_buf,"		<arg>");
+			strcat(request_buf,x);
+			strcat(request_buf,"</arg>\n");
+		}
+	}
+	va_end(ap);
+
+	strcat(request_buf,"	</Arguments>\n</SaySentenceRequest>\n");
+
+	if ((hp=ast_gethostbyname("localhost", &ahp)) == 0) {
+		ast_log(LOG_ERROR, "Couldn't get localhost's IP!\n");
+		return -1;
+	}
+
+	memset(&pin, 0, sizeof(pin));
+	pin.sin_family = AF_INET;
+	pin.sin_addr.s_addr = ((struct in_addr *)(hp->h_addr))->s_addr;
+	pin.sin_port = htons(9746);
+	if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { ast_log(LOG_ERROR, "Couldn't get a socket!\n");
+		return -1;
+	}
+	errno = 0;
+	if (connect(sd, (struct sockaddr *)&pin, sizeof(pin)) == -1) {
+		ast_log(LOG_ERROR, "Couldn't connect to SayScript server; errno = %s(%d)\n", strerror(errno), errno);
+		ast_log(LOG_ERROR, "sin_port is %d; sin_addr.s_addr = %x(%s)  hostent name=%s; alias: %s; type: %x; length: %d; addr_list0: %s; list1=%s\n", pin.sin_port, pin.sin_addr.s_addr, ast_inet_ntoa((*(struct in_addr *)(hp->h_addr))), hp->h_name, hp->h_aliases[0], hp->h_addrtype, hp->h_length, ast_inet_ntoa(*(struct in_addr *)(hp->h_addr_list[0])), ast_inet_ntoa(*(struct in_addr *)(hp->h_addr_list[1])));
+		return -1;
+	}
+	if (send(sd, request_buf, strlen(request_buf), 0) == -1) {
+		ast_log(LOG_ERROR, "Couldn't send to SayScript server\n");
+		return -1;
+	}
+	/* ret = shutdown(sd, SHUT_WR); Nice try, works, but also shuts the reader! */ /* shutdown the output channel */
+	//ast_log(LOG_ERROR, "Sent the request: \n%s\nShutdown returns %d\n", request_buf, ret);
+	if ((ret = recv(sd,response_buf, sizeof(response_buf), 0)) == -1) {
+		ast_log(LOG_ERROR, "Couldn't receive from SayScript server!\n");
+		return -1;
+	}
+	response_buf[ret] = 0;
+	/* if it got this far, we have a response! */
+	if ( strstr(response_buf,"</SaySentenceResponse>") == 0 ) {
+		ast_log(LOG_ERROR, "SayScript response packet incomplete! Got %d bytes: %s\n", ret, response_buf);
+		return -1;
+	}
+	ast_log(LOG_ERROR, "Got Response: %s\n", response_buf);
+	/* If there are any log messages, issue those as NOTICE to the logfile */
+	searchpt = response_buf;
+	while( (foundpt = strstr(searchpt, "<Message>")) != NULL ) {
+		char mess[1200];
+		endfoundpt = strstr(foundpt, "</Message>");
+		if(!endfoundpt) {
+			ast_log(LOG_ERROR, "SaySentence server response malformed!\nGot: %s\n", response_buf);
+			searchpt = foundpt + 9;
+			continue;
+		}
+		/* do your math-- the file name is between the <File>xxx</File> */
+		strncpy(mess, foundpt+9, endfoundpt-foundpt-9);
+		mess[endfoundpt-foundpt-9] = 0;
+
+		ast_log(LOG_NOTICE, "SaySentence system reports: %s\n", mess);
+		
+		searchpt = endfoundpt + 9;
+		
+	}
+	
+	searchpt = response_buf;
+	while( (foundpt = strstr(searchpt, "<File>")) != NULL ) {
+		char filename[200];
+		endfoundpt = strstr(foundpt, "</File>");
+		if(!endfoundpt) {
+			ast_log(LOG_ERROR, "SaySentence server response malformed!\nGot: %s\n", response_buf);
+			searchpt = foundpt + 6;
+			continue;
+		}
+		/* do your math-- the file name is between the <File>xxx</File> */
+		strncpy(filename, foundpt+6, endfoundpt-foundpt-6);
+		filename[endfoundpt-foundpt-6] = 0;
+		ast_log(LOG_ERROR,"About to streamfile %s\n", filename);
+		ret = ast_streamfile(chan, filename, ast_channel_language(chan));
+		if (ret<0) {
+			ast_log(LOG_ERROR,"Trouble playing %s; ast_streamfile returns %d\n", filename, ret);
+			searchpt = endfoundpt+6;
+			continue;
+		}
+		ret = ast_waitstream(chan, ecodes);
+		if (ret < 0) {
+			ast_log(LOG_ERROR,"Trouble playing %s; ast_waitstream returns %d\n", filename, ret);
+			ret = ast_stopstream(chan);
+			searchpt = endfoundpt+6;
+			continue;
+		} else if (ret > 0) {
+			ast_stopstream(chan);
+			return ret;
+		}
+		
+		ret = ast_stopstream(chan);
+		
+		searchpt = endfoundpt + 7;
+		
+	}
+	return 0;
+}
+
 int ast_streamfile(struct ast_channel *chan, const char *filename, const char *preflang)
 {
 	struct ast_filestream *fs;
@@ -1602,6 +1787,7 @@
 	return sanitize_waitstream_return(res);
 }
 
+/* This func will not be needed if using say_sentence() */
 /*
  * if the file name is non-empty, try to play it.
  * Return 0 if success, -1 if error, digit if interrupted by a digit.
@@ -1610,11 +1796,17 @@
 int ast_stream_and_wait(struct ast_channel *chan, const char *file, const char *digits)
 {
 	int res = 0;
-	if (!ast_strlen_zero(file)) {
-		ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", file, ast_channel_name(chan));
-		res = ast_streamfile(chan, file, ast_channel_language(chan));
-		if (!res) {
-			res = ast_waitstream(chan, digits);
+	if (ast_using_saysentence()) {
+		char buf1[512];
+		snprintf(buf1, sizeof(buf1), "<%s>", file);
+		ast_say_sentence(chan, digits, buf1);
+	} else {
+		if (!ast_strlen_zero(file)) {
+			ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", file, ast_channel_name(chan));
+			res = ast_streamfile(chan, file, ast_channel_language(chan));
+			if (!res) {
+				res = ast_waitstream(chan, digits);
+			}
 		}
 	}
 	return res;
Index: main/asterisk.c
===================================================================
--- main/asterisk.c	(revision 403615)
+++ main/asterisk.c	(working copy)
@@ -3707,6 +3707,22 @@
 	ast_cli_unregister_multiple(cli_asterisk, ARRAY_LEN(cli_asterisk));
 }
 
+static int uses_saysentence = 0;
+
+int ast_using_saysentence(void)
+{
+	return uses_saysentence;
+}
+
+static void calc_using_saysentence(void)
+{
+	char path[1024];
+	uses_saysentence = 0;
+	snprintf(path, sizeof(path), "%s/translation", cfg_paths.var_dir);
+	if (access(path, R_OK|X_OK) == 0)
+		uses_saysentence = 1;
+}
+
 int main(int argc, char *argv[])
 {
 	int c;
@@ -3878,6 +3894,8 @@
 
 	ast_readconfig();
 	env_init();
+	calc_using_saysentence();
+	
 
 	if (ast_opt_remote && remotesock != NULL)
 		ast_copy_string((char *) cfg_paths.socket_path, remotesock, sizeof(cfg_paths.socket_path));
Index: channels/sig_analog.c
===================================================================
--- channels/sig_analog.c	(revision 403615)
+++ channels/sig_analog.c	(working copy)
@@ -2053,9 +2053,13 @@
 			} else {
 				sleep(1);
 			}
-			res = ast_streamfile(chan, "ss-noservice", ast_channel_language(chan));
-			if (res >= 0) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<ss-noservice>");
+			} else {
+				res = ast_streamfile(chan, "ss-noservice", ast_channel_language(chan));
+				if (res >= 0) {
+					ast_waitstream(chan, "");
+				}
 			}
 			res = analog_play_tone(p, idx, ANALOG_TONE_CONGESTION);
 			ast_hangup(chan);
Index: apps/app_voicemail.c
===================================================================
--- apps/app_voicemail.c	(revision 403615)
+++ apps/app_voicemail.c	(working copy)
@@ -79,6 +79,7 @@
 </category>
 ***/
 
+
 #include "asterisk.h"
 
 #ifdef IMAP_STORAGE
@@ -573,7 +574,7 @@
  * mailcmd= command in voicemail.conf */
 #define SENDMAIL "/usr/sbin/sendmail -t"
 
-#define INTRO "vm-intro"
+/* Introducing an INTRO macro for playing the vm-intro sound file would be very BAD form! */
 
 #define MAXMSG 100
 #define MAXMSGLIMIT 9999
@@ -2481,7 +2482,11 @@
 	if (vms->quota_limit && vms->quota_usage >= vms->quota_limit) {
 		ast_debug(1, "*** QUOTA EXCEEDED!! %u >= %u\n", vms->quota_usage, vms->quota_limit);
 		if (chan) {
-			ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 		}
 		return -1;
 	}
@@ -2491,7 +2496,11 @@
 	if (msgnum >= vmu->maxmsg - inprocess_count(vmu->mailbox, vmu->context, +1)) {
 		ast_log(LOG_WARNING, "Unable to leave message since we will exceed the maximum number of messages allowed (%u >= %u)\n", msgnum, vmu->maxmsg);
 		if (chan) {
-			ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "FAILED");
 		}
 		return -1;
@@ -5456,23 +5465,47 @@
 	}
 
 	RETRIEVE(fn, -1, ext, context);
-	if (ast_fileexists(fn, NULL, NULL) > 0) {
-		res = ast_stream_and_wait(chan, fn, ecodes);
-		if (res) {
+	if (ast_using_saysentence()) {
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+
+			if (busy)
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-isonphone>", fn); /* this is a totally righteous use of %z */
+			else 
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-isunavail>", fn);
+			if (res) {
+				DISPOSE(fn, -1);
+				return res;
+			}
+		} else {
+			/* Dispose just in case */
 			DISPOSE(fn, -1);
-			return res;
+	
+			if (busy)
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-theperson>%i<vm-isonphone>", ext);
+			else 
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-theperson>%i<vm-isunavail>", ext);
+			if (res)
+				return res;
 		}
 	} else {
-		/* Dispose just in case */
-		DISPOSE(fn, -1);
-		res = ast_stream_and_wait(chan, "vm-theperson", ecodes);
-		if (res)
-			return res;
-		res = ast_say_digit_str(chan, ext, ecodes, ast_channel_language(chan));
-		if (res)
-			return res;
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+			res = ast_stream_and_wait(chan, fn, ecodes);
+			if (res) {
+				DISPOSE(fn, -1);
+				return res;
+			}
+		} else {
+			/* Dispose just in case */
+			DISPOSE(fn, -1);
+			res = ast_stream_and_wait(chan, "vm-theperson", ecodes);
+			if (res)
+				return res;
+			res = ast_say_digit_str(chan, ext, ecodes, ast_channel_language(chan));
+			if (res)
+				return res;
+		}
+		res = ast_stream_and_wait(chan, busy ? "vm-isonphone" : "vm-isunavail", ecodes);
 	}
-	res = ast_stream_and_wait(chan, busy ? "vm-isonphone" : "vm-isunavail", ecodes);
 	return res;
 }
 
@@ -6494,14 +6527,18 @@
 		goto leave_vm_out;
 	}
 	if (!res && !ast_test_flag(options, OPT_SILENT)) {
-		res = ast_stream_and_wait(chan, INTRO, ecodes);
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, ecodes, "<vm-intro>");
+		} else {
+			res = ast_stream_and_wait(chan, "vm-intro", ecodes);
+		}
 		if (res == '#') {
 			ast_set_flag(options, OPT_SILENT);
 			res = 0;
 		}
 	}
 	if (res > 0)
-		ast_stopstream(chan);
+		ast_stopstream(chan); /* if using saysentence, do I need to NOT say this? */
 	/* Check for a '*' here in case the caller wants to escape from voicemail to something
 	 other than the operator -- an automated attendant or mailbox login for example */
 	if (res == '*') {
@@ -6528,7 +6565,11 @@
 			} else if (ousemacro && !ast_strlen_zero(ast_channel_macrocontext(chan))) {
 				ast_channel_context_set(chan, ast_channel_macrocontext(chan));
 			}
-			ast_play_and_wait(chan, "transfer");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<transfer>");
+			} else {
+				ast_play_and_wait(chan, "transfer");
+			}
 			ast_channel_priority_set(chan, 0);
 			free_user(vmu);
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "USEREXIT");
@@ -6594,9 +6635,13 @@
 		}
 #else
 		if (count_messages(vmu, dir) >= vmu->maxmsg - inprocess_count(vmu->mailbox, vmu->context, +1)) {
-			res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, "", "<vm-mailboxfull>");
+			} else {
+				res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, "");
+			}
 			ast_log(AST_LOG_WARNING, "No more messages possible\n");
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "FAILED");
 			inprocess_count(vmu->mailbox, vmu->context, -1);
@@ -6608,9 +6653,13 @@
 		txtdes = mkstemp(tmptxtfile);
 		chmod(tmptxtfile, VOICEMAIL_FILE_MODE & ~my_umask);
 		if (txtdes < 0) {
-			res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, "", "<vm-mailboxfull>");
+			} else {
+				res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, "");
+			}
 			ast_log(AST_LOG_ERROR, "Unable to create message file: %s\n", strerror(errno));
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "FAILED");
 			inprocess_count(vmu->mailbox, vmu->context, -1);
@@ -7488,41 +7537,74 @@
 {
 	int x;
 	int d;
-	char fn[PATH_MAX];
-	d = ast_play_and_wait(chan, "vm-press");	/* "Press" */
-	if (d)
-		return d;
-	for (x = start; x < 5; x++) {	/* For all folders */
-		if ((d = ast_say_number(chan, x, AST_DIGIT_ANY, ast_channel_language(chan), NULL)))
-			return d;
-		d = ast_play_and_wait(chan, "vm-for");	/* "for" */
+	if (ast_using_saysentence()) {
+
+		for (x = start; x < 5; x++) {	/* For all folders */
+			switch (x) {
+			case 0:
+#ifdef IMAP_STORAGE
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press>%n<vm-for>%z.", "0", imapfolder);
+#else
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/0><vm-for><vm-INBOX>.", 0);
+#endif
+				break;
+			case 1:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/1><vm-for><vm-Old>.", 1);
+				break;
+			case 2:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/2><vm-for><vm-Work>.", 2);
+				break;
+			case 3:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/3><vm-for><vm-Family>.", 3);
+				break;
+			case 4:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/4><vm-for><vm-Friends>.", 4);
+				break;
+			}
+			if (d)
+				return d;
+		}
+	} else {
+		char fn[PATH_MAX];
+		d = ast_play_and_wait(chan, "vm-press"); /* "Press" */
 		if (d)
 			return d;
-		snprintf(fn, sizeof(fn), "vm-%s", mbox(NULL, x));	/* Folder name */
-
-		/* The inbox folder can have its name changed under certain conditions
-		 * so this checks if the sound file exists for the inbox folder name and
-		 * if it doesn't, plays the default name instead. */
-		if (x == 0) {
-			if (ast_fileexists(fn, NULL, NULL)) {
+		for (x = start; x < 5; x++) {	/* For all folders */
+			if ((d = ast_say_number(chan, x, AST_DIGIT_ANY, ast_channel_language(chan), NULL)))
+				return d;
+			d = ast_play_and_wait(chan, "vm-for"); /* "for" */
+			if (d)
+				return d;
+			snprintf(fn, sizeof(fn), "vm-%s", mbox(NULL, x));	/* Folder name */
+	
+			/* The inbox folder can have its name changed under certain conditions
+			 * so this checks if the sound file exists for the inbox folder name and
+			 * if it doesn't, plays the default name instead. */
+			if (x == 0) {
+				if (ast_fileexists(fn, NULL, NULL)) {
+					d = vm_play_folder_name(chan, fn);
+				} else {
+					ast_verb(1, "failed to find %s\n", fn);
+					d = vm_play_folder_name(chan, "vm-INBOX");
+				}
+			} else {
+				ast_test_suite_event_notify("PLAYBACK", "Message: folder name %s", fn);
 				d = vm_play_folder_name(chan, fn);
-			} else {
-				ast_verb(1, "failed to find %s\n", fn);
-				d = vm_play_folder_name(chan, "vm-INBOX");
 			}
-		} else {
-			ast_test_suite_event_notify("PLAYBACK", "Message: folder name %s", fn);
-			d = vm_play_folder_name(chan, fn);
+
+			if (d)
+				return d;
 		}
-
-		if (d)
-			return d;
-		d = ast_waitfordigit(chan, 500);
-		if (d)
-			return d;
 	}
+	d = ast_waitfordigit(chan, 500);
+	if (d)
+		return d;
 
-	d = ast_play_and_wait(chan, "vm-tocancel"); /* "or pound to cancel" */
+	if (ast_using_saysentence()) {
+		d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocancel>");
+	} else {
+		d = ast_play_and_wait(chan, "vm-tocancel");
+	} /* "or pound to cancel" */
 	if (d)
 		return d;
 	d = ast_waitfordigit(chan, 4000);
@@ -7547,6 +7629,7 @@
 	int loops = 0;
 
 	res = ast_play_and_wait(chan, fn);	/* Folder name */
+	
 	while (((res < '0') || (res > '9')) &&
 			(res != '#') && (res >= 0) &&
 			loops < 4) {
@@ -7623,8 +7706,12 @@
 			}
 			make_file(vms->introfn, sizeof(vms->introfn), curdir, curmsg);
 			strncat(vms->introfn, "intro", sizeof(vms->introfn));
-			ast_play_and_wait(chan, INTRO);
-			ast_play_and_wait(chan, "beep");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-intro><beep>");
+			} else {
+				ast_play_and_wait(chan, "vm-intro");
+				ast_play_and_wait(chan, "beep");
+			}
 			cmd = play_record_review(chan, NULL, vms->introfn, vmu->maxsecs, vm_fmts, 1, vmu, (int *) duration, NULL, NULL, record_gain, vms, flag, msg_id);
 			if (cmd == -1) {
 				break;
@@ -7705,10 +7792,18 @@
 			/* If time_out and return to menu, reset already_recorded */
 			already_recorded = 0;
 
-			cmd = ast_play_and_wait(chan, "vm-forwardoptions");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-forwardoptions>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-forwardoptions");
+			}
 				/* "Press 1 to prepend a message or 2 to forward the message without prepending" */
 			if (!cmd) {
-				cmd = ast_play_and_wait(chan, "vm-starmain");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-starmain>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-starmain");
+				}
 				/* "press star to return to the main menu" */
 			}
 			if (!cmd) {
@@ -7938,7 +8033,11 @@
 					break;
 				default: 
 					/* Press 1 to enter an extension press 2 to use the directory */
-					cmd = ast_play_and_wait(chan, "vm-forward");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-forward>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-forward");
+					}
 					if (!cmd) {
 						cmd = ast_waitfordigit(chan, 3000);
 					}
@@ -8012,14 +8111,22 @@
 				if (inboxcount(s, &newmsgs, &oldmsgs)) {
 					ast_log(LOG_ERROR, "Problem in calculating number of voicemail messages available for extension %s\n", s);
 					/* Shouldn't happen, but allow trying another extension if it does */
-					res = ast_play_and_wait(chan, "pbx-invalid");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<pbx-invalid>");
+					} else {
+						res = ast_play_and_wait(chan, "pbx-invalid");
+					}
 					valid_extensions = 0;
 					break;
 				}
 				capacity = receiver->maxmsg - inprocess_count(receiver->mailbox, receiver->context, +1);
 				if ((newmsgs + oldmsgs) >= capacity) {
 					ast_log(LOG_NOTICE, "Mailbox '%s' is full with capacity of %d, prompting for another extension.\n", s, capacity);
-					res = ast_play_and_wait(chan, "vm-mailboxfull");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-mailboxfull");
+					}
 					valid_extensions = 0;
 					while ((vmtmp = AST_LIST_REMOVE_HEAD(&extensions, list))) {
 						inprocess_count(vmtmp->mailbox, vmtmp->context, -1);
@@ -8040,7 +8147,11 @@
 				}
 				ast_log(LOG_NOTICE, "'%s' is not a valid mailbox\n", s);
 				/* "I am sorry, that's not a valid extension.  Please try again." */
-				res = ast_play_and_wait(chan, "pbx-invalid");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<pbx-invalid>");
+				} else {
+					res = ast_play_and_wait(chan, "pbx-invalid");
+				}
 				valid_extensions = 0;
 				break;
 			}
@@ -8049,13 +8160,21 @@
 			snprintf(fn, sizeof(fn), "%s%s/%s/greet", VM_SPOOL_DIR, receiver->context, s);
 			RETRIEVE(fn, -1, s, receiver->context);
 			if (ast_fileexists(fn, NULL, NULL) > 0) {
-				res = ast_stream_and_wait(chan, fn, ecodes);
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, ecodes, "%z", fn); /* a righteous usage, but pretty useless for translation */
+				} else {
+					res = ast_stream_and_wait(chan, fn, ecodes);
+				}
 				if (res) {
 					DISPOSE(fn, -1);
 					return res;
 				}
 			} else {
-				res = ast_say_digit_str(chan, s, ecodes, ast_channel_language(chan));
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, ecodes, "%i", s); /* not a very intelligible sentence, to be sure.*/
+				} else {
+					res = ast_say_digit_str(chan, s, ecodes, ast_channel_language(chan));
+				}
 			}
 			DISPOSE(fn, -1);
 
@@ -8149,21 +8268,41 @@
 				/* give confirmation that the message was saved */
 				/* commented out since we can't forward batches yet
 				if (saved_messages == 1)
-					res = ast_play_and_wait(chan, "vm-message");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-message>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-message");
+					}
 				else
-					res = ast_play_and_wait(chan, "vm-messages");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-messages>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-messages");
+					}
 				if (!res)
-					res = ast_play_and_wait(chan, "vm-saved"); */
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-saved>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-saved");
+					} */
 #ifdef IMAP_STORAGE
 				/* If forwarded with intro, DON'T PLAY THIS MESSAGE AGAIN! */
 				if (ast_strlen_zero(vmstmp.introfn))
 #endif
-				res = ast_play_and_wait(chan, "vm-msgforwarded");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgforwarded>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-msgforwarded");
+				}
 			}
 #ifndef IMAP_STORAGE
 			else {
 				/* with IMAP, mailbox full warning played by imap_check_limits */
-				res = ast_play_and_wait(chan, "vm-mailboxfull");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-mailboxfull");
+				}
 			}
 			/* Restore original message without prepended message if backup exists */
 			make_file(msgfile, sizeof(msgfile), dir, curmsg);
@@ -8200,6 +8339,7 @@
 	return res ? res : cmd;
 }
 
+
 static int wait_file2(struct ast_channel *chan, struct vm_state *vms, char *file)
 {
 	int res;
@@ -8212,15 +8352,19 @@
 {
 	ast_test_suite_event_notify("PLAYVOICE", "Message: Playing %s", file);
 	return ast_control_streamfile(chan, file, listen_control_forward_key, listen_control_reverse_key, listen_control_stop_key, listen_control_pause_key, listen_control_restart_key, skipms, NULL);
+	/*  my impression is that this will be used to play recorded files, and thus isn't in the realm of the asterisk sound files and their translation */
 }
 
 static int play_message_category(struct ast_channel *chan, const char *category)
 {
 	int res = 0;
+	if (ast_using_saysentence()) {
+		res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z", category);
+	} else {
+		if (!ast_strlen_zero(category))
+			res = ast_play_and_wait(chan, category);
+	}
 
-	if (!ast_strlen_zero(category))
-		res = ast_play_and_wait(chan, category);
-
 	if (res) {
 		ast_log(AST_LOG_WARNING, "No sound file for category '%s' was found.\n", category);
 		res = 0;
@@ -8270,30 +8414,43 @@
 
 	/* Can't think of how other diffs might be helpful, but I'm sure somebody will think of something. */
 #endif
-	if (the_zone) {
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), the_zone->msg_format, the_zone->timezone);
-	} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {     /* GERMAN syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {     /* GREEK syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q  H 'digits/kai' M ", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {     /* ITALIAN syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' 'digits/hours' k 'digits/e' M 'digits/minutes'", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {     /* DUTCH syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/nl-om' HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {     /* NORWEGIAN syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {     /* POLISH syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* Brazillian PORTUGUESE syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Ad 'digits/pt-de' B 'digits/pt-de' Y 'digits/pt-as' HM ", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {     /* SWEDISH syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' dB 'digits/at' k 'and' M", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {     /* CHINESE (Taiwan) syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "qR 'vm-received'", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {     /* VIETNAMESE syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' A 'digits/day' dB 'digits/year' Y 'digits/at' k 'hours' M 'minutes'", NULL);
+
+	if (ast_using_saysentence()) {
+		if (the_zone) {
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), the_zone->msg_format, the_zone->timezone); /* what else should I do? This format string
+																			 would have to be in say_sentence format;
+																			 and, maybe, it would be better to override it
+																			 in the translation file rather than the config file! */
+		} else {
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-recieved>%[q]d<digits/at>%[IMp]d", t, t);
+		}
+		/* All the languages are handled via entries in the translation file for the lang_LOCALE, a mapping for the above format */
 	} else {
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' IMp", NULL);
+		if (the_zone) {
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), the_zone->msg_format, the_zone->timezone);
+		} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {     /* GERMAN syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {     /* GREEK syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q  H 'digits/kai' M ", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {     /* ITALIAN syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' 'digits/hours' k 'digits/e' M 'digits/minutes'", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {     /* DUTCH syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/nl-om' HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {     /* NORWEGIAN syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {     /* POLISH syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* Brazillian PORTUGUESE syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Ad 'digits/pt-de' B 'digits/pt-de' Y 'digits/pt-as' HM ", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {     /* SWEDISH syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' dB 'digits/at' k 'and' M", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {     /* CHINESE (Taiwan) syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "qR 'vm-received'", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {     /* VIETNAMESE syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' A 'digits/day' dB 'digits/year' Y 'digits/at' k 'hours' M 'minutes'", NULL);
+		} else {
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' IMp", NULL);
+		}
 	}
 #if 0
 	pbx_builtin_setvar_helper(chan, "DIFF_DAY", NULL);
@@ -8339,15 +8496,31 @@
 					 * and if found, use that instead of saying number. */
 					if (ast_fileexists(prefile, NULL, NULL) > 0) {
 						ast_verb(3, "Playing envelope info: CID number '%s' matches mailbox number, playing recorded name\n", callerid);
-						if (!callback)
-							res = wait_file2(chan, vms, "vm-from");
-						res = ast_stream_and_wait(chan, prefile, "");
+						if (ast_using_saysentence()) {
+							if (!callback) {
+								res = ast_say_sentence(chan, "", "<vm-from>%z", prefile);
+							} else {
+								res = ast_say_sentence(chan, "", "%z", prefile);
+							}
+						} else {
+							if (!callback)
+								res = wait_file2(chan, vms, "vm-from");
+							res = ast_stream_and_wait(chan, prefile, "");
+						}
 					} else {
 						ast_verb(3, "Playing envelope info: message from '%s'\n", callerid);
 						/* Say "from extension" as one saying to sound smoother */
-						if (!callback)
-							res = wait_file2(chan, vms, "vm-from-extension");
-						res = ast_say_digit_str(chan, callerid, "", ast_channel_language(chan));
+						if (ast_using_saysentence()) {
+							if (!callback) {
+								res = ast_say_sentence(chan, "", "<vm-from-extension>%i", callerid);
+							} else {
+								res = ast_say_sentence(chan, "", "%i", callerid);
+							}
+						} else {
+							if (!callback)
+								res = wait_file2(chan, vms, "vm-from-extension");
+							res = ast_say_digit_str(chan, callerid, "", ast_channel_language(chan));
+						}
 					}
 				}
 			}
@@ -8359,23 +8532,40 @@
 				snprintf(prefile, sizeof(prefile), "%s/recordings/callerids/%s", ast_config_AST_SPOOL_DIR, callerid);
 				if (!saycidnumber && ast_fileexists(prefile, NULL, NULL) > 0) {
 					ast_verb(3, "Playing recorded name for CID number '%s' - '%s'\n", callerid,prefile);
-					wait_file2(chan, vms, "vm-from");
-					res = ast_stream_and_wait(chan, prefile, "");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, "", "<vm-from>%z", prefile);
+					} else {
+						wait_file2(chan, vms, "vm-from");
+						res = ast_stream_and_wait(chan, prefile, "");
+					}
 					ast_verb(3, "Played recorded name result '%d'\n", res);
 				} else {
 					/* Since this is all nicely figured out, why not say "from phone number" in this case" */
-					wait_file2(chan, vms, "vm-from-phonenumber");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-from-phonenumber>%i", callerid);
+					} else {
+						wait_file2(chan, vms, "vm-from-phonenumber");
+						res = ast_say_digit_str(chan, callerid, AST_DIGIT_ANY, ast_channel_language(chan));
+					}
+				}
+			} else {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "%i", callerid);
+				} else {
 					res = ast_say_digit_str(chan, callerid, AST_DIGIT_ANY, ast_channel_language(chan));
 				}
-			} else {
-				res = ast_say_digit_str(chan, callerid, AST_DIGIT_ANY, ast_channel_language(chan));
 			}
 		}
 	} else {
 		/* Number unknown */
 		ast_debug(1, "VM-CID: From an unknown number\n");
 		/* Say "from an unknown caller" as one phrase - it is already recorded by "the voice" anyhow */
-		res = wait_file2(chan, vms, "vm-unknown-caller");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-unknown-caller>");
+		} else {
+
+			res = wait_file2(chan, vms, "vm-unknown-caller");
+		}
 	}
 	return res;
 }
@@ -8396,35 +8586,40 @@
 	ast_debug(1, "VM-Duration: duration is: %d seconds converted to: %d minutes\n", durations, durationm);
 
 	if ((!res) && (durationm >= minduration)) {
-		res = wait_file2(chan, vms, "vm-duration");
 
 		/* POLISH syntax */
-		if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
-			div_t num = div(durationm, 10);
-
-			if (durationm == 1) {
-				res = ast_play_and_wait(chan, "digits/1z");
-				res = res ? res : ast_play_and_wait(chan, "vm-minute-ta");
-			} else if (num.rem > 1 && num.rem < 5 && num.quot != 1) {
-				if (num.rem == 2) {
-					if (!num.quot) {
-						res = ast_play_and_wait(chan, "digits/2-ie");
+		if (!ast_using_saysentence()) {
+			if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
+				div_t num = div(durationm, 10);
+	
+				res = wait_file2(chan, vms, "vm-duration");
+				if (durationm == 1) {
+					res = ast_play_and_wait(chan, "digits/1z");
+					res = res ? res : ast_play_and_wait(chan, "vm-minute-ta");
+				} else if (num.rem > 1 && num.rem < 5 && num.quot != 1) {
+					if (num.rem == 2) {
+						if (!num.quot) {
+							res = ast_play_and_wait(chan, "digits/2-ie");
+						} else {
+							res = say_and_wait(chan, durationm - 2 , ast_channel_language(chan));
+							res = res ? res : ast_play_and_wait(chan, "digits/2-ie");
+						}
 					} else {
-						res = say_and_wait(chan, durationm - 2 , ast_channel_language(chan));
-						res = res ? res : ast_play_and_wait(chan, "digits/2-ie");
+						res = say_and_wait(chan, durationm, ast_channel_language(chan));
 					}
+					res = res ? res : ast_play_and_wait(chan, "vm-minute-ty");
 				} else {
 					res = say_and_wait(chan, durationm, ast_channel_language(chan));
+					res = res ? res : ast_play_and_wait(chan, "vm-minute-t");
 				}
-				res = res ? res : ast_play_and_wait(chan, "vm-minute-ty");
+			/* DEFAULT syntax */
 			} else {
-				res = say_and_wait(chan, durationm, ast_channel_language(chan));
-				res = res ? res : ast_play_and_wait(chan, "vm-minute-t");
+				res = wait_file2(chan, vms, "vm-duration");
+				res = ast_say_number(chan, durationm, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
+				res = wait_file2(chan, vms, "vm-minutes");
 			}
-		/* DEFAULT syntax */
 		} else {
-			res = ast_say_number(chan, durationm, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
-			res = wait_file2(chan, vms, "vm-minutes");
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-duration>%n<vm-minutes>", durationm);
 		}
 	}
 	return res;
@@ -8441,11 +8636,6 @@
 	vms->starting = 0;
 	make_file(vms->fn, sizeof(vms->fn), vms->curdir, vms->curmsg);
 	adsi_message(chan, vms);
-	if (!vms->curmsg) {
-		res = wait_file2(chan, vms, "vm-first");	/* "First" */
-	} else if (vms->curmsg == vms->lastmsg) {
-		res = wait_file2(chan, vms, "vm-last");		/* "last" */
-	}
 
 	snprintf(filename, sizeof(filename), "%s.txt", vms->fn);
 	RETRIEVE(vms->curdir, vms->curmsg, vmu->mailbox, vmu->context);
@@ -8456,78 +8646,107 @@
 	}
 	flag = ast_variable_retrieve(msg_cfg, "message", "flag");
 
-	/* Play the word urgent if we are listening to urgent messages */
-	if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
-		res = wait_file2(chan, vms, "vm-Urgent");	/* "urgent" */
-	}
-
-	if (!res) {
-		/* XXX Why are we playing messages above, and then playing the same language-specific stuff here? */
-		/* POLISH syntax */
-		if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
-			if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
-				int ten, one;
-				char nextmsg[256];
-				ten = (vms->curmsg + 1) / 10;
-				one = (vms->curmsg + 1) % 10;
-
-				if (vms->curmsg < 20) {
-					snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", vms->curmsg + 1);
-					res = wait_file2(chan, vms, nextmsg);
-				} else {
-					snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", ten * 10);
-					res = wait_file2(chan, vms, nextmsg);
-					if (one > 0) {
-						if (!res) {
-							snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", one);
-							res = wait_file2(chan, vms, nextmsg);
-						}
-					}
-				}
-			}
-			if (!res)
-				res = wait_file2(chan, vms, "vm-message");
-		/* HEBREW syntax */
-		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {
-			if (!vms->curmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-first");
-			} else if (vms->curmsg == vms->lastmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-last");
+	if (ast_using_saysentence()) {
+		if (!vms->curmsg) {
+			if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-first><vm-Urgent><vm-message>");
 			} else {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-number");
-				res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-first><vm-message>");
 			}
-		/* VIETNAMESE syntax */
-		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
-			if (!vms->curmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-first");
-			} else if (vms->curmsg == vms->lastmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-last");
+		} else if (vms->curmsg == vms->lastmsg) {
+			if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-last><vm-Urgent><vm-message>");
 			} else {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-number");
-				res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-last><vm-message>");
 			}
+		
 		} else {
-			if (!strncasecmp(ast_channel_language(chan), "se", 2)) { /* SWEDISH syntax */
-				res = wait_file2(chan, vms, "vm-meddelandet");  /* "message" */
-			} else { /* DEFAULT syntax */
-				res = wait_file2(chan, vms, "vm-message");
+			if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-Urgent><vm-message>%n", vms->curmsg+1);
+			} else {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-message>%n", vms->curmsg+1);
 			}
-			if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
-				if (!res) {
-					ast_test_suite_event_notify("PLAYBACK", "Message: message number");
-					res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
+		}
+	} else {
+
+		if (!vms->curmsg) {
+			res = wait_file2(chan, vms, "vm-first");	/* "First" */
+		} else if (vms->curmsg == vms->lastmsg) {
+			res = wait_file2(chan, vms, "vm-last");		/* "last" */
+		}
+
+		/* Play the word urgent if we are listening to urgent messages */
+		if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+			res = wait_file2(chan, vms, "vm-Urgent");	/* "urgent" */
+		}
+
+		if (!res) {
+			/* XXX Why are we playing messages above, and then playing the same language-specific stuff here? */
+			/* POLISH syntax */
+			if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
+				if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
+					int ten, one;
+					char nextmsg[256];
+					ten = (vms->curmsg + 1) / 10;
+					one = (vms->curmsg + 1) % 10;
+	
+					if (vms->curmsg < 20) {
+						snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", vms->curmsg + 1);
+						res = wait_file2(chan, vms, nextmsg);
+					} else {
+						snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", ten * 10);
+						res = wait_file2(chan, vms, nextmsg);
+						if (one > 0) {
+							if (!res) {
+								snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", one);
+								res = wait_file2(chan, vms, nextmsg);
+							}
+						}
+					}
 				}
+				if (!res)
+					res = wait_file2(chan, vms, "vm-message");
+			/* HEBREW syntax */
+			} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {
+				if (!vms->curmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-first");
+				} else if (vms->curmsg == vms->lastmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-last");
+				} else {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-number");
+					res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				}
+			/* VIETNAMESE syntax */
+			} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
+				if (!vms->curmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-first");
+				} else if (vms->curmsg == vms->lastmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-last");
+				} else {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-number");
+					res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				}
+			} else {
+				if (!strncasecmp(ast_channel_language(chan), "se", 2)) { /* SWEDISH syntax */
+					res = wait_file2(chan, vms, "vm-meddelandet");  /* "message" */
+				} else { /* DEFAULT syntax */
+					res = wait_file2(chan, vms, "vm-message");
+				}
+				if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
+					if (!res) {
+						ast_test_suite_event_notify("PLAYBACK", "Message: message number");
+						res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
+					}
+				}
 			}
 		}
 	}
-
 	if (!valid_config(msg_cfg)) {
 		ast_log(AST_LOG_WARNING, "No message attribute file?!! (%s)\n", filename);
 		return 0;
@@ -8874,27 +9093,32 @@
 
 static int vm_play_folder_name(struct ast_channel *chan, char *box)
 {
-	int cmd;
-
-	if (  !strncasecmp(ast_channel_language(chan), "it", 2) ||
-		  !strncasecmp(ast_channel_language(chan), "es", 2) ||
-		  !strncasecmp(ast_channel_language(chan), "pt", 2)) { /* Italian, Spanish, or Portuguese syntax */
-		cmd = ast_play_and_wait(chan, "vm-messages"); /* "messages */
-		return cmd ? cmd : ast_play_and_wait(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {
-		return vm_play_folder_name_gr(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* Hebrew syntax */
-		return ast_play_and_wait(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
-		return vm_play_folder_name_pl(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* Ukrainian syntax */
-		return vm_play_folder_name_ua(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
-		return ast_play_and_wait(chan, box);
-	} else {  /* Default English */
-		cmd = ast_play_and_wait(chan, box);
-		return cmd ? cmd : ast_play_and_wait(chan, "vm-messages"); /* "messages */
+	int cmd=0;
+	
+	if (ast_using_saysentence()) {
+		cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-messages", box);
+	} else {
+		if (  !strncasecmp(ast_channel_language(chan), "it", 2) ||
+			  !strncasecmp(ast_channel_language(chan), "es", 2) ||
+			  !strncasecmp(ast_channel_language(chan), "pt", 2)) { /* Italian, Spanish, or Portuguese syntax */
+				cmd = ast_play_and_wait(chan, "vm-messages"); /* "messages */
+				return cmd ? cmd : ast_play_and_wait(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {
+			return vm_play_folder_name_gr(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* Hebrew syntax */
+			return ast_play_and_wait(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
+			return vm_play_folder_name_pl(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* Ukrainian syntax */
+			return vm_play_folder_name_ua(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
+			return ast_play_and_wait(chan, box);
+		} else {  /* Default English */
+			cmd = ast_play_and_wait(chan, box);
+			return cmd ? cmd : ast_play_and_wait(chan, "vm-messages"); /* "messages */
+		}
 	}
+	return cmd;
 }
 
 /* GREEK SYNTAX
@@ -8942,7 +9166,7 @@
 				res = ast_play_and_wait(chan, "vm-messages");
 		}
 	} else if (!vms->oldmessages && !vms->newmessages) 
-		res = ast_play_and_wait(chan, "vm-denExeteMynhmata"); 
+		res = ast_play_and_wait(chan, "vm-denExeteMynhmata");
 	return res;
 }
 
@@ -9108,59 +9332,91 @@
 	}
 	return res;
 }
-	
+
+
+
 /* Default English syntax */
 static int vm_intro_en(struct ast_channel *chan, struct vm_state *vms)
 {
 	int res;
-
 	/* Introduce messages they have */
-	res = ast_play_and_wait(chan, "vm-youhave");
-	if (!res) {
+	if (ast_using_saysentence()) {
+		int something_said=0;
 		if (vms->urgentmessages) {
-			res = say_and_wait(chan, vms->urgentmessages, ast_channel_language(chan));
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-Urgent");
-			if ((vms->oldmessages || vms->newmessages) && !res) {
-				res = ast_play_and_wait(chan, "vm-and");
-			} else if (!res) {
-				if ((vms->urgentmessages == 1))
-					res = ast_play_and_wait(chan, "vm-message");
-				else
-					res = ast_play_and_wait(chan, "vm-messages");
-			}
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave>%n<vm-Urgent><vm-messages>", vms->urgentmessages); /* now before you have a cow about the messages vs message issue, 
+																	let me tell you that the translation file should specify these
+																	kinds of variances. NOT the say_sentence call itself. */
+			something_said = 1;
 		}
+		if (res)
+			return res;
 		if (vms->newmessages) {
-			res = say_and_wait(chan, vms->newmessages, ast_channel_language(chan));
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-INBOX");
-			if (vms->oldmessages && !res)
-				res = ast_play_and_wait(chan, "vm-and");
-			else if (!res) {
-				if ((vms->newmessages == 1))
-					res = ast_play_and_wait(chan, "vm-message");
-				else
-					res = ast_play_and_wait(chan, "vm-messages");
+			if (something_said) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-and>%n<vm-INBOX><vm-messages>", vms->newmessages);
+			} else {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave>%n<vm-INBOX><vm-messages>", vms->newmessages);
 			}
-				
 		}
-		if (!res && vms->oldmessages) {
-			res = say_and_wait(chan, vms->oldmessages, ast_channel_language(chan));
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-Old");
-			if (!res) {
-				if (vms->oldmessages == 1)
-					res = ast_play_and_wait(chan, "vm-message");
-				else
-					res = ast_play_and_wait(chan, "vm-messages");
+		if (res)
+			return res;
+		if (vms->oldmessages) {
+			if (something_said) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-and>%n<vm-INBOX><vm-messages>", vms->oldmessages);
+			} else {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave>%n<vm-INBOX><vm-messages>", vms->oldmessages);
 			}
 		}
+		if (res)
+			return res;
+		res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-messages>");
+	} else {
+		res = ast_play_and_wait(chan, "vm-youhave");
 		if (!res) {
-			if (!vms->urgentmessages && !vms->oldmessages && !vms->newmessages) {
-				res = ast_play_and_wait(chan, "vm-no");
+			if (vms->urgentmessages) {
+				res = say_and_wait(chan, vms->urgentmessages, ast_channel_language(chan));
 				if (!res)
-					res = ast_play_and_wait(chan, "vm-messages");
+					res = ast_play_and_wait(chan, "vm-Urgent");
+				if ((vms->oldmessages || vms->newmessages) && !res) {
+					res = ast_play_and_wait(chan, "vm-and");
+				} else if (!res) {
+					if ((vms->urgentmessages == 1))
+						res = ast_play_and_wait(chan, "vm-message");
+					else
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
 			}
+			if (vms->newmessages) {
+				res = say_and_wait(chan, vms->newmessages, ast_channel_language(chan));
+				if (!res)
+					res = ast_play_and_wait(chan, "vm-INBOX");
+				if (vms->oldmessages && !res)
+					res = ast_play_and_wait(chan, "vm-and");
+				else if (!res) {
+					if ((vms->newmessages == 1))
+						res = ast_play_and_wait(chan, "vm-message");
+					else
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
+					
+			}
+			if (!res && vms->oldmessages) {
+				res = say_and_wait(chan, vms->oldmessages, ast_channel_language(chan));
+				if (!res)
+					res = ast_play_and_wait(chan, "vm-Old");
+				if (!res) {
+					if (vms->oldmessages == 1)
+						res = ast_play_and_wait(chan, "vm-message");
+					else
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
+			}
+			if (!res) {
+				if (!vms->urgentmessages && !vms->oldmessages && !vms->newmessages) {
+					res = ast_play_and_wait(chan, "vm-no");
+					if (!res)
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
+			}
 		}
 	}
 	return res;
@@ -9175,7 +9431,7 @@
 		res =	ast_play_and_wait(chan, "vm-no") ||
 			ast_play_and_wait(chan, "vm-message");
 	else
-		res =	ast_play_and_wait(chan, "vm-youhave");
+		res = ast_play_and_wait(chan, "vm-youhave");
 	if (!res && vms->newmessages) {
 		res = (vms->newmessages == 1) ?
 			ast_play_and_wait(chan, "digits/un") ||
@@ -9186,7 +9442,7 @@
 			ast_play_and_wait(chan, "vm-nuovi") ||
 			ast_play_and_wait(chan, "vm-messages");
 		if (!res && vms->oldmessages)
-			res =	ast_play_and_wait(chan, "vm-and");
+			res = ast_play_and_wait(chan, "vm-and");
 	}
 	if (!res && vms->oldmessages) {
 		res = (vms->oldmessages == 1) ?
@@ -9782,7 +10038,7 @@
 		if (!res && vms->oldmessages) {
 			res = say_and_wait(chan, vms->oldmessages, ast_channel_language(chan));
 			if (!res)
-				res = ast_play_and_wait(chan, "vm-Old");			
+				res = ast_play_and_wait(chan, "vm-Old");
 		}
 		if (!res) {
 			if (!vms->oldmessages && !vms->newmessages) {
@@ -9795,6 +10051,11 @@
 	return res;
 }
 
+/*  ============ NOTICE ============================
+    This message, and all the avbove language-specific functions should be removed once say_sentence
+    is standard */
+
+
 static int vm_intro(struct ast_channel *chan, struct ast_vm_user *vmu, struct vm_state *vms)
 {
 	char prefile[256];
@@ -9804,55 +10065,63 @@
 	if (ast_test_flag(vmu, VM_TEMPGREETWARN)) {
 		RETRIEVE(prefile, -1, vmu->mailbox, vmu->context);
 		if (ast_fileexists(prefile, NULL, NULL) > 0) {
-			ast_play_and_wait(chan, "vm-tempgreetactive");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempgreetactive>");
+			} else {
+				ast_play_and_wait(chan, "vm-tempgreetactive");
+			}
 		}
 		DISPOSE(prefile, -1);
 	}
 
 	/* Play voicemail intro - syntax is different for different languages */
-	if (0) {
-		return 0;
-	} else if (!strncasecmp(ast_channel_language(chan), "cs", 2)) {  /* CZECH syntax */
-		return vm_intro_cs(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "cz", 2)) {  /* deprecated CZECH syntax */
-		static int deprecation_warning = 0;
-		if (deprecation_warning++ % 10 == 0) {
-			ast_log(LOG_WARNING, "cz is not a standard language code.  Please switch to using cs instead.\n");
+	if (!ast_using_saysentence()) {
+		if (0) {
+			return 0;
+		} else if (!strncasecmp(ast_channel_language(chan), "cs", 2)) {  /* CZECH syntax */
+			return vm_intro_cs(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "cz", 2)) {  /* deprecated CZECH syntax */
+			static int deprecation_warning = 0;
+			if (deprecation_warning++ % 10 == 0) {
+				ast_log(LOG_WARNING, "cz is not a standard language code.  Please switch to using cs instead.\n");
+			}
+			return vm_intro_cs(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {  /* GERMAN syntax */
+			return vm_intro_de(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "es", 2)) {  /* SPANISH syntax */
+			return vm_intro_es(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "fr", 2)) {  /* FRENCH syntax */
+			return vm_intro_fr(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK syntax */
+			return vm_intro_gr(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW syntax */
+			return vm_intro_he(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN syntax */
+			return vm_intro_it(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {  /* DUTCH syntax */
+			return vm_intro_nl(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {  /* NORWEGIAN syntax */
+			return vm_intro_no(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {  /* POLISH syntax */
+			return vm_intro_pl(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* BRAZILIAN PORTUGUESE syntax */
+			return vm_intro_pt_BR(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE syntax */
+			return vm_intro_pt(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "ru", 2)) {  /* RUSSIAN syntax */
+			return vm_intro_multilang(chan, vms, "n");
+		} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {  /* SWEDISH syntax */
+			return vm_intro_se(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* UKRAINIAN syntax */
+			return vm_intro_multilang(chan, vms, "n");
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) { /* VIETNAMESE syntax */
+			return vm_intro_vi(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
+			return vm_intro_zh(chan, vms);
+		} else {                                             /* Default to ENGLISH */
+			return vm_intro_en(chan, vms);
 		}
-		return vm_intro_cs(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {  /* GERMAN syntax */
-		return vm_intro_de(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "es", 2)) {  /* SPANISH syntax */
-		return vm_intro_es(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "fr", 2)) {  /* FRENCH syntax */
-		return vm_intro_fr(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK syntax */
-		return vm_intro_gr(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW syntax */
-		return vm_intro_he(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN syntax */
-		return vm_intro_it(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {  /* DUTCH syntax */
-		return vm_intro_nl(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {  /* NORWEGIAN syntax */
-		return vm_intro_no(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {  /* POLISH syntax */
-		return vm_intro_pl(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* BRAZILIAN PORTUGUESE syntax */
-		return vm_intro_pt_BR(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE syntax */
-		return vm_intro_pt(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "ru", 2)) {  /* RUSSIAN syntax */
-		return vm_intro_multilang(chan, vms, "n");
-	} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {  /* SWEDISH syntax */
-		return vm_intro_se(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* UKRAINIAN syntax */
-		return vm_intro_multilang(chan, vms, "n");
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) { /* VIETNAMESE syntax */
-		return vm_intro_vi(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
-		return vm_intro_zh(chan, vms);
-	} else {                                             /* Default to ENGLISH */
+	} else {
 		return vm_intro_en(chan, vms);
 	}
 }
@@ -9862,77 +10131,143 @@
 	int res = 0;
 	/* Play instructions and wait for new command */
 	while (!res) {
-		if (vms->starting) {
-			if (vms->lastmsg > -1) {
-				if (skipadvanced)
-					res = ast_play_and_wait(chan, "vm-onefor-full");
-				else
-					res = ast_play_and_wait(chan, "vm-onefor");
+
+		if (ast_using_saysentence()) {
+			if (vms->starting) {
+				if (vms->lastmsg > -1) {
+					if (skipadvanced)
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor-full>%z.<vm-opts-full>.", vms->vmbox);
+					else
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor>%z.<vm-opts>.", vms->vmbox);
+				}
+			} else {
+				/* Added for additional help */
+				if (skipadvanced) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor-full>%z<vm-opts-full>.", vms->vmbox);
+				}
+				/* Logic:
+				 * If the current message is not the first OR
+				 * if we're listening to the first new message and there are
+				 * also urgent messages, then prompt for navigation to the
+				 * previous message
+				 */
+				if (vms->curmsg || (!in_urgent && vms->urgentmessages > 0) || (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0)) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-prev>");
+				}
+				if (!res && !skipadvanced)
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-advopts>");
 				if (!res)
-					res = vm_play_folder_name(chan, vms->vmbox);
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-repeat>"); /* I'm tired of changing these... I'll let the macro do the work for now */
+				/* Logic:
+				 * If we're not listening to the last message OR
+				 * we're listening to the last urgent message and there are
+				 * also new non-urgent messages, then prompt for navigation
+				 * to the next message
+				 */
+				if (!res && ((vms->curmsg != vms->lastmsg) || (in_urgent && vms->newmessages > 0) ||
+					(ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0) )) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-next>");
+				}
+				if (!res) {
+					int curmsg_deleted;
+#ifdef IMAP_STORAGE
+					ast_mutex_lock(&vms->lock);
+#endif
+					curmsg_deleted = vms->deleted[vms->curmsg];
+#ifdef IMAP_STORAGE
+					ast_mutex_unlock(&vms->lock);
+#endif
+					if (!curmsg_deleted) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-delete>");  /* all of these are standalone sentences */
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-undelete>");
+					}
+					if (!res) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-toforward>");
+					}
+					if (!res) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-savemessage>");
+					}
+				}
 			}
 			if (!res) {
-				if (skipadvanced)
-					res = ast_play_and_wait(chan, "vm-opts-full");
-				else
-					res = ast_play_and_wait(chan, "vm-opts");
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-helpexit>");
 			}
 		} else {
-			/* Added for additional help */
-			if (skipadvanced) {
-				res = ast_play_and_wait(chan, "vm-onefor-full");
+			if (vms->starting) {
+				if (vms->lastmsg > -1) {
+					if (skipadvanced)
+						res = ast_play_and_wait(chan, "vm-onefor-full");
+					else
+						res = ast_play_and_wait(chan, "vm-onefor");
+					if (!res)
+						res = vm_play_folder_name(chan, vms->vmbox);
+				}
+				if (!res) {
+					if (skipadvanced)
+						res = ast_play_and_wait(chan, "vm-opts-full");
+					else
+						res = ast_play_and_wait(chan, "vm-opts");
+				}
+			} else {
+				/* Added for additional help */
+				if (skipadvanced) {
+					res = ast_play_and_wait(chan, "vm-onefor-full");
+					if (!res)
+						res = vm_play_folder_name(chan, vms->vmbox);
+					res = ast_play_and_wait(chan, "vm-opts-full");
+				}
+				/* Logic:
+				 * If the current message is not the first OR
+				 * if we're listening to the first new message and there are
+				 * also urgent messages, then prompt for navigation to the
+				 * previous message
+				 */
+				if (vms->curmsg || (!in_urgent && vms->urgentmessages > 0) || (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0)) {
+					res = ast_play_and_wait(chan, "vm-prev");
+				}
+				if (!res && !skipadvanced)
+					res = ast_play_and_wait(chan, "vm-advopts");
 				if (!res)
-					res = vm_play_folder_name(chan, vms->vmbox);
-				res = ast_play_and_wait(chan, "vm-opts-full");
-			}
-			/* Logic:
-			 * If the current message is not the first OR
-			 * if we're listening to the first new message and there are
-			 * also urgent messages, then prompt for navigation to the
-			 * previous message
-			 */
-			if (vms->curmsg || (!in_urgent && vms->urgentmessages > 0) || (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0)) {
-				res = ast_play_and_wait(chan, "vm-prev");
-			}
-			if (!res && !skipadvanced)
-				res = ast_play_and_wait(chan, "vm-advopts");
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-repeat");
-			/* Logic:
-			 * If we're not listening to the last message OR
-			 * we're listening to the last urgent message and there are
-			 * also new non-urgent messages, then prompt for navigation
-			 * to the next message
-			 */
-			if (!res && ((vms->curmsg != vms->lastmsg) || (in_urgent && vms->newmessages > 0) ||
-				(ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0) )) {
-				res = ast_play_and_wait(chan, "vm-next");
-			}
-			if (!res) {
-				int curmsg_deleted;
-#ifdef IMAP_STORAGE
-				ast_mutex_lock(&vms->lock);
+					res = ast_play_and_wait(chan, "vm-repeat");
+				/* Logic:
+				 * If we're not listening to the last message OR
+				 * we're listening to the last urgent message and there are
+				 * also new non-urgent messages, then prompt for navigation
+				 * to the next message
+				 */
+				if (!res && ((vms->curmsg != vms->lastmsg) || (in_urgent && vms->newmessages > 0) ||
+					(ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0) )) {
+					res = ast_play_and_wait(chan, "vm-next");
+				}
+				if (!res) {
+					int curmsg_deleted;
+#ifdef 	IMAP_STORAGE
+					ast_mutex_lock(&vms->lock);
 #endif
-				curmsg_deleted = vms->deleted[vms->curmsg];
+					curmsg_deleted = vms->deleted[vms->curmsg];
 #ifdef IMAP_STORAGE
-				ast_mutex_unlock(&vms->lock);
+					ast_mutex_unlock(&vms->lock);
 #endif
-				if (!curmsg_deleted) {
-					res = ast_play_and_wait(chan, "vm-delete");
-				} else {
-					res = ast_play_and_wait(chan, "vm-undelete");
+					if (!curmsg_deleted) {
+						res = ast_play_and_wait(chan, "vm-delete");
+					} else {
+						res = ast_play_and_wait(chan, "vm-undelete");
+					}
+					if (!res) {
+						res = ast_play_and_wait(chan, "vm-toforward");
+					}
+					if (!res) {
+						res = ast_play_and_wait(chan, "vm-savemessage");
+					}
 				}
-				if (!res) {
-					res = ast_play_and_wait(chan, "vm-toforward");
-				}
-				if (!res) {
-					res = ast_play_and_wait(chan, "vm-savemessage");
-				}
 			}
+	
+			if (!res) {
+				res = ast_play_and_wait(chan, "vm-helpexit");
+			}
 		}
-		if (!res) {
-			res = ast_play_and_wait(chan, "vm-helpexit");
-		}
+
 		if (!res)
 			res = ast_waitfordigit(chan, 6000);
 		if (!res) {
@@ -9971,10 +10306,14 @@
 
 static int vm_instructions(struct ast_channel *chan, struct ast_vm_user *vmu, struct vm_state *vms, int skipadvanced, int in_urgent)
 {
-	if (vms->starting && !strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
-		return vm_instructions_zh(chan, vmu, vms, skipadvanced, in_urgent);
-	} else {					/* Default to ENGLISH */
+	if (ast_using_saysentence()) {
 		return vm_instructions_en(chan, vmu, vms, skipadvanced, in_urgent);
+	} else {
+		if (vms->starting && !strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
+			return vm_instructions_zh(chan, vmu, vms, skipadvanced, in_urgent);
+		} else {					/* Default to ENGLISH */
+			return vm_instructions_en(chan, vmu, vms, skipadvanced, in_urgent);
+		}
 	}
 }
 
@@ -10033,7 +10372,11 @@
 	 */
 	for (;;) {
 		newpassword[1] = '\0';
-		newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+		if (ast_using_saysentence()) {
+			newpassword[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-newpassword>");
+		} else {
+			newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+		}
 		if (cmd == '#')
 			newpassword[0] = '\0';
 		if (cmd < 0 || cmd == 't' || cmd == '#')
@@ -10044,10 +10387,18 @@
 		cmd = check_password(vmu, newpassword); /* perform password validation */
 		if (cmd != 0) {
 			ast_log(AST_LOG_NOTICE, "Invalid password for user %s (%s)\n", vms->username, newpassword);
-			cmd = ast_play_and_wait(chan, vm_invalid_password);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-invalid-password>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_invalid_password);
+			}
 		} else {
 			newpassword2[1] = '\0';
-			newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			if (ast_using_saysentence()) {
+				newpassword2[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm_reenterpassword>");
+			} else {
+				newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			}
 			if (cmd == '#')
 				newpassword2[0] = '\0';
 			if (cmd < 0 || cmd == 't' || cmd == '#')
@@ -10058,12 +10409,20 @@
 			if (!strcmp(newpassword, newpassword2))
 				break;
 			ast_log(AST_LOG_NOTICE, "Password mismatch for user %s (%s != %s)\n", vms->username, newpassword, newpassword2);
-			cmd = ast_play_and_wait(chan, vm_mismatch);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mismatch>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_mismatch);
+			}
 		}
 		if (++tries == 3)
 			return -1;
 		if (cmd != 0) {
-			cmd = ast_play_and_wait(chan, vm_pls_try_again);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-pls-try-again>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_pls_try_again);
+			}
 		}
 	}
 	if (pwdchange & PWDCHANGE_INTERNAL)
@@ -10072,7 +10431,11 @@
 		vm_change_password_shell(vmu, newpassword);
 
 	ast_debug(1, "User %s set password to %s of length %d\n", vms->username, newpassword, (int) strlen(newpassword));
-	cmd = ast_play_and_wait(chan, vm_passchanged);
+	if (ast_using_saysentence()) {
+		cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-passchanged>");
+	} else {
+		cmd = ast_play_and_wait(chan, vm_passchanged);
+	}
 
 	return cmd;
 }
@@ -10118,11 +10481,19 @@
 			break;
 		case '5': /* change password */
 			if (vmu->password[0] == '-') {
-				cmd = ast_play_and_wait(chan, "vm-no");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-no>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-no");
+				}
 				break;
 			}
 			newpassword[1] = '\0';
-			newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+			if (ast_using_saysentence()) {
+				newpassword[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-newpassword>");
+			} else {
+				newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+			}
 			if (cmd == '#')
 				newpassword[0] = '\0';
 			else {
@@ -10135,14 +10506,22 @@
 			cmd = check_password(vmu, newpassword); /* perform password validation */
 			if (cmd != 0) {
 				ast_log(AST_LOG_NOTICE, "Invalid password for user %s (%s)\n", vms->username, newpassword);
-				cmd = ast_play_and_wait(chan, vm_invalid_password);
-				if (!cmd) {
-					cmd = ast_play_and_wait(chan, vm_pls_try_again);
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-invalid-password><vm-pls-try-again>");
+				} else {
+					cmd = ast_play_and_wait(chan, vm_invalid_password);
+					if (!cmd) {
+						cmd = ast_play_and_wait(chan, vm_pls_try_again);
+					}
 				}
 				break;
 			}
 			newpassword2[1] = '\0';
-			newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			if (ast_using_saysentence()) {
+				newpassword[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-reenterpassword>");
+			} else {
+				newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			}
 			if (cmd == '#')
 				newpassword2[0] = '\0';
 			else {
@@ -10155,9 +10534,14 @@
 			}
 			if (strcmp(newpassword, newpassword2)) {
 				ast_log(AST_LOG_NOTICE, "Password mismatch for user %s (%s != %s)\n", vms->username, newpassword, newpassword2);
-				cmd = ast_play_and_wait(chan, vm_mismatch);
-				if (!cmd) {
-					cmd = ast_play_and_wait(chan, vm_pls_try_again);
+				
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mismatch><vm-pls-try-again>");
+				} else {
+					cmd = ast_play_and_wait(chan, vm_mismatch);
+					if (!cmd) {
+						cmd = ast_play_and_wait(chan, vm_pls_try_again);
+					}
 				}
 				break;
 			}
@@ -10171,7 +10555,11 @@
 
 			ast_debug(1, "User %s set password to %s of length %d\n",
 				vms->username, newpassword, (int) strlen(newpassword));
-			cmd = ast_play_and_wait(chan, vm_passchanged);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-passchanged>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_passchanged);
+			}
 			break;
 		case '*':
 			cmd = 't';
@@ -10181,11 +10569,19 @@
 			snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vms->username);
 			RETRIEVE(prefile, -1, vmu->mailbox, vmu->context);
 			if (ast_fileexists(prefile, NULL, NULL)) {
-				cmd = ast_play_and_wait(chan, "vm-tmpexists");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tmpexists>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-tmpexists");
+				}
 			}
 			DISPOSE(prefile, -1);
 			if (!cmd) {
-				cmd = ast_play_and_wait(chan, "vm-options");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-options>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-options");
+				}
 			}
 			if (!cmd) {
 				cmd = ast_waitfordigit(chan, 6000);
@@ -10257,16 +10653,28 @@
 				break;
 			case '2':
 				DELETE(prefile, -1, prefile, vmu);
-				ast_play_and_wait(chan, "vm-tempremoved");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempremoved>");
+				} else {
+					ast_play_and_wait(chan, "vm-tempremoved");
+				}
 				cmd = 't';	
 				break;
 			case '*': 
 				cmd = 't';
 				break;
 			default:
-				cmd = ast_play_and_wait(chan,
-					ast_fileexists(prefile, NULL, NULL) > 0 ? /* XXX always true ? */
-						"vm-tempgreeting2" : "vm-tempgreeting");
+				if (ast_using_saysentence()) {
+					if (ast_fileexists(prefile, NULL, NULL) > 0)
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempgreeting2>");
+					else
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempgreeting>");
+	
+				} else {
+					cmd = ast_play_and_wait(chan,
+						ast_fileexists(prefile, NULL, NULL) > 0 ? /* XXX always true ? */
+							"vm-tempgreeting2" : "vm-tempgreeting");
+				}
 				if (!cmd) {
 					cmd = ast_waitfordigit(chan, 6000);
 				}
@@ -10286,6 +10694,57 @@
 	return cmd;
 }
 
+/*! 
+ * \brief Default English syntax for 'You have N messages' greeting.
+ * \param chan
+ * \param vms
+ * \param vmu
+ *
+ * \return zero on success, -1 on error.
+ */
+static int vm_browse_messages_en(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
+{
+	int cmd = 0;
+
+	if (vms->lastmsg > -1) {
+		cmd = play_message(chan, vmu, vms);
+	} else {
+		if (ast_using_saysentence()) {
+			if (!strcmp(vms->curbox, "INBOX"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-INBOX><vm-messages>");
+			else if (!strcmp(vms->curbox, "Old"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Old><vm-messages>");
+			else if (!strcmp(vms->curbox, "Urgent"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Urgent><vm-messages>");
+			else if (!strcmp(vms->curbox, "Work"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Work><vm-messages>");
+			else if (!strcmp(vms->curbox, "Friends"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Friends><vm-messages>");
+			else if (!strcmp(vms->curbox, "Family"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Family><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust1"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust1><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust2"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust2><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust3"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust3><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust4"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust4><vm-messages>");
+		} else {
+			cmd = ast_play_and_wait(chan, "vm-youhave");
+			if (!cmd) 
+				cmd = ast_play_and_wait(chan, "vm-no");
+			if (!cmd) {
+				snprintf(vms->fn, sizeof(vms->fn), "vm-%s", vms->curbox);
+				cmd = ast_play_and_wait(chan, vms->fn);
+			}
+			if (!cmd)
+				cmd = ast_play_and_wait(chan, "vm-messages");
+		}
+	}
+	return cmd;
+}
+
 /*!
  * \brief Greek syntax for 'You have N messages' greeting.
  * \param chan
@@ -10294,6 +10753,7 @@
  *
  * \return zero on success, -1 on error.
  */	
+
 static int vm_browse_messages_gr(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
 {
 	int cmd = 0;
@@ -10338,34 +10798,7 @@
 	return cmd;
 }
 
-/*! 
- * \brief Default English syntax for 'You have N messages' greeting.
- * \param chan
- * \param vms
- * \param vmu
- *
- * \return zero on success, -1 on error.
- */
-static int vm_browse_messages_en(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
-{
-	int cmd = 0;
 
-	if (vms->lastmsg > -1) {
-		cmd = play_message(chan, vmu, vms);
-	} else {
-		cmd = ast_play_and_wait(chan, "vm-youhave");
-		if (!cmd) 
-			cmd = ast_play_and_wait(chan, "vm-no");
-		if (!cmd) {
-			snprintf(vms->fn, sizeof(vms->fn), "vm-%s", vms->curbox);
-			cmd = ast_play_and_wait(chan, vms->fn);
-		}
-		if (!cmd)
-			cmd = ast_play_and_wait(chan, "vm-messages");
-	}
-	return cmd;
-}
-
 /*! 
  *\brief Italian syntax for 'You have N messages' greeting.
  * \param chan
@@ -10509,21 +10942,25 @@
  */
 static int vm_browse_messages(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
 {
-	if (!strncasecmp(ast_channel_language(chan), "es", 2)) {         /* SPANISH */
-		return vm_browse_messages_es(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK */
-		return vm_browse_messages_gr(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW */
-		return vm_browse_messages_he(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN */
-		return vm_browse_messages_it(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE */
-		return vm_browse_messages_pt(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {  /* VIETNAMESE */
-		return vm_browse_messages_vi(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {  /* CHINESE (Taiwan) */
-		return vm_browse_messages_zh(chan, vms, vmu);
-	} else {                                             /* Default to English syntax */
+	if (!ast_using_saysentence()) {
+		if (!strncasecmp(ast_channel_language(chan), "es", 2)) {         /* SPANISH */
+			return vm_browse_messages_es(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK */
+			return vm_browse_messages_gr(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW */
+			return vm_browse_messages_he(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN */
+			return vm_browse_messages_it(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE */
+			return vm_browse_messages_pt(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {  /* VIETNAMESE */
+			return vm_browse_messages_vi(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {  /* CHINESE (Taiwan) */
+			return vm_browse_messages_zh(chan, vms, vmu);
+		} else {                                             /* Default to English syntax */
+			return vm_browse_messages_en(chan, vms, vmu);
+		}
+	} else {
 		return vm_browse_messages_en(chan, vms, vmu);
 	}
 }
@@ -10541,9 +10978,16 @@
 	if (!skipuser && useadsi)
 		adsi_login(chan);
 	ast_test_suite_event_notify("PLAYBACK", "Message: vm-login");
-	if (!silent && !skipuser && ast_streamfile(chan, "vm-login", ast_channel_language(chan))) {
-		ast_log(AST_LOG_WARNING, "Couldn't stream login file\n");
-		return -1;
+	if (ast_using_saysentence()) {
+		if (!silent && !skipuser && ast_say_sentence(chan, "", "<vm-login>")) {
+			ast_log(AST_LOG_WARNING, "Couldn't stream login file\n");
+			return -1;
+		}
+	} else {
+		if (!silent && !skipuser && ast_streamfile(chan, "vm-login", ast_channel_language(chan))) {
+			ast_log(AST_LOG_WARNING, "Couldn't stream login file\n");
+			return -1;
+		}
 	}
 
 	/* Authenticate them and get their mailbox/password */
@@ -10589,9 +11033,16 @@
 			password[0] = '\0';
 		} else {
 			ast_test_suite_event_notify("PLAYBACK", "Message: %s", vm_password);
-			if (ast_streamfile(chan, vm_password, ast_channel_language(chan))) {
-				ast_log(AST_LOG_WARNING, "Unable to stream password file\n");
-				return -1;
+			if (ast_using_saysentence()) {
+				if (ast_say_sentence(chan,"", "<vm-password>")) {	
+					ast_log(AST_LOG_WARNING, "Unable to stream password file\n");
+					return -1;
+				}
+			} else {
+				if (ast_streamfile(chan, vm_password, ast_channel_language(chan))) {
+					ast_log(AST_LOG_WARNING, "Unable to stream password file\n");
+					return -1;
+				}
 			}
 			if (ast_readstring(chan, password, sizeof(password) - 1, 2000, 10000, "#") < 0) {
 				ast_log(AST_LOG_WARNING, "Unable to read password\n");
@@ -10626,26 +11077,47 @@
 		if (!valid) {
 			if (skipuser || logretries >= max_logins) {
 				ast_test_suite_event_notify("PLAYBACK", "Message: vm-incorrect");
-				if (ast_streamfile(chan, "vm-incorrect", ast_channel_language(chan))) {
-					ast_log(AST_LOG_WARNING, "Unable to stream incorrect message\n");
-					return -1;
+				if (ast_using_saysentence()) {
+					if ( (ast_say_sentence(chan, "", "<vm-incorrect>")) < 0 ) {
+						ast_log(AST_LOG_WARNING, "Unable to stream vm-incorrect message\n");
+						return -1;
+					}
+				} else {
+					if (ast_streamfile(chan, "vm-incorrect", ast_channel_language(chan))) {
+						ast_log(AST_LOG_WARNING, "Unable to stream vm-incorrect message\n");
+						return -1;
+					}
 				}
 			} else {
 				ast_test_suite_event_notify("PLAYBACK", "Message: vm-incorrect-mailbox");
 				if (useadsi)
 					adsi_login(chan);
-				if (ast_streamfile(chan, "vm-incorrect-mailbox", ast_channel_language(chan))) {
-					ast_log(AST_LOG_WARNING, "Unable to stream incorrect mailbox message\n");
-					return -1;
+
+				if (ast_using_saysentence()) {
+					if ( ast_say_sentence(chan, "", "<vm-incorrect-mailbox>") < 0) {
+						ast_log(AST_LOG_WARNING, "Unable to stream incorrect mailbox message\n");
+						return -1;
+					}
+				} else {
+					if (ast_streamfile(chan, "vm-incorrect-mailbox", ast_channel_language(chan))) {
+						ast_log(AST_LOG_WARNING, "Unable to stream incorrect mailbox message\n");
+						return -1;
+					}
 				}
 			}
-			if (ast_waitstream(chan, ""))	/* Channel is hung up */
-				return -1;
+			if (!ast_using_saysentence()) {
+				if (ast_waitstream(chan, ""))	/* Channel is hung up */
+					return -1;
+				ast_stopstream(chan);
+			}
 		}
 	}
 	if (!valid && (logretries >= max_logins)) {
-		ast_stopstream(chan);
-		ast_play_and_wait(chan, "vm-goodbye");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
 		return -1;
 	}
 	if (vmu && !skipuser) {
@@ -11026,7 +11498,12 @@
 	/* Check to see if this is a new user */
 	if (!strcasecmp(vmu->mailbox, vmu->password) && 
 		(ast_test_flag(vmu, VM_FORCENAME | VM_FORCEGREET))) {
-		if (ast_play_and_wait(chan, "vm-newuser") == -1)
+		if (ast_using_saysentence()) {
+			cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-newuser>");
+		} else {
+			cmd = ast_play_and_wait(chan, "vm-newuser");
+		}
+		if (cmd == -1)
 			ast_log(AST_LOG_WARNING, "Couldn't stream new user file\n");
 		cmd = vm_newuser(chan, vmu, &vms, vmfmts, record_gain);
 		if ((cmd == 't') || (cmd == '#')) {
@@ -11045,12 +11522,20 @@
 		ast_debug(3, "Checking quotas: comparing %u to %u\n", vms.quota_usage, vms.quota_limit);
 		if (vms.quota_limit && vms.quota_usage >= vms.quota_limit) {
 			ast_debug(1, "*** QUOTA EXCEEDED!!\n");
-			cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 		}
 		ast_debug(3, "Checking quotas: User has %d messages and limit is %d.\n", (vms.newmessages + vms.oldmessages), vmu->maxmsg);
 		if ((vms.newmessages + vms.oldmessages) >= vmu->maxmsg) {
 			ast_log(AST_LOG_WARNING, "No more messages possible.  User has %d messages and limit is %d.\n", (vms.newmessages + vms.oldmessages), vmu->maxmsg);
-			cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 		}
 #endif
 
@@ -11120,7 +11605,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11137,7 +11626,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11149,7 +11642,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11161,7 +11658,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11174,7 +11675,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11186,22 +11691,46 @@
 				default:
 					cmd = 0;
 					if (!vms.starting) {
-						cmd = ast_play_and_wait(chan, "vm-toreply");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-toreply>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-toreply");
+						}
 					}
 					if (!ast_strlen_zero(vmu->callback) && !vms.starting && !cmd) {
-						cmd = ast_play_and_wait(chan, "vm-tocallback");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocallback>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-tocallback");
+						}
 					}
 					if (!cmd && !vms.starting) {
-						cmd = ast_play_and_wait(chan, "vm-tohearenv");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tohearenv>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-tohearenv");
+						}
 					}
 					if (!ast_strlen_zero(vmu->dialout) && !cmd) {
-						cmd = ast_play_and_wait(chan, "vm-tomakecall");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tomakecall>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-tomakecall");
+						}
 					}
 					if (ast_test_flag(vmu, VM_SVMAIL) && !cmd) {
-						cmd = ast_play_and_wait(chan, "vm-leavemsg");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-leavemsg>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-leavemsg");
+						}
 					}
 					if (!cmd) {
-						cmd = ast_play_and_wait(chan, "vm-starmain");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-starmain>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-starmain");
+						}
 					}
 					if (!cmd) {
 						cmd = ast_waitfordigit(chan, 6000);
@@ -11242,13 +11771,21 @@
 					ast_debug(1, "No more new messages, opened INBOX and got %d Urgent messages\n", vms.lastmsg + 1);
 					vms.curmsg = vms.lastmsg;
 					if (vms.lastmsg < 0) {
-						cmd = ast_play_and_wait(chan, "vm-nomore");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-nomore");
+						}
 					}
 				} else if (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms.lastmsg > 0) {
 					vms.curmsg = vms.lastmsg;
 					cmd = play_message(chan, vmu, &vms);
 				} else {
-					cmd = ast_play_and_wait(chan, "vm-nomore");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-nomore");
+					}
 				}
 			}
 			break;
@@ -11273,13 +11810,21 @@
 					ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 					vms.curmsg = -1;
 					if (vms.lastmsg < 0) {
-						cmd = ast_play_and_wait(chan, "vm-nomore");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-nomore");
+						}
 					}
 				} else if (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms.lastmsg > 0) {
 					vms.curmsg = 0;
 					cmd = play_message(chan, vmu, &vms);
 				} else {
-					cmd = ast_play_and_wait(chan, "vm-nomore");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-nomore");
+					}
 				}
 			}
 			break;
@@ -11298,7 +11843,11 @@
 					}
 					else if (play_folder == 1)
 						vms.oldmessages--;
-					cmd = ast_play_and_wait(chan, "vm-deleted");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-deleted");
+					}
 				} else {
 					if (play_folder == 0) {
 						if (in_urgent) {
@@ -11309,7 +11858,11 @@
 					}
 					else if (play_folder == 1)
 						vms.oldmessages++;
-					cmd = ast_play_and_wait(chan, "vm-undeleted");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-undeleted>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-undeleted");
+					}
 				}
 				if (ast_test_flag(vmu, VM_SKIPAFTERCMD)) {
 					if (vms.curmsg < vms.lastmsg) {
@@ -11335,10 +11888,18 @@
 							ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 							vms.curmsg = -1;
 							if (vms.lastmsg < 0) {
+								if (ast_using_saysentence()) {
+									cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+								} else {
+									cmd = ast_play_and_wait(chan, "vm-nomore");
+								}
+							}
+						} else {
+							if (ast_using_saysentence()) {
+								cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+							} else {
 								cmd = ast_play_and_wait(chan, "vm-nomore");
 							}
-						} else {
-							cmd = ast_play_and_wait(chan, "vm-nomore");
 						}
 					}
 				}
@@ -11373,10 +11934,18 @@
 					ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 					vms.curmsg = -1;
 					if (vms.lastmsg < 0) {
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-nomore");
+						}
+					}
+				} else {
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+					} else {
 						cmd = ast_play_and_wait(chan, "vm-nomore");
 					}
-				} else {
-					cmd = ast_play_and_wait(chan, "vm-nomore");
 				}
 			}
 			break;
@@ -11415,15 +11984,28 @@
 				adsi_message(chan, &vms);
 			snprintf(vms.fn, sizeof(vms.fn), "vm-%s", mbox(vmu, box));
 			if (!cmd) {
-				cmd = ast_play_and_wait(chan, "vm-message");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-message>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-message");
+				}
 				if (!cmd) 
 					cmd = say_and_wait(chan, vms.curmsg + 1, ast_channel_language(chan));
+				if (!cmd) {
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-savedto>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-savedto");
+					}
+				}
 				if (!cmd)
-					cmd = ast_play_and_wait(chan, "vm-savedto");
-				if (!cmd)
 					cmd = vm_play_folder_name(chan, vms.fn);
 			} else {
-				cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+				}
 			}
 			if (ast_test_flag((&globalflags), VM_SKIPAFTERCMD)) {
 				if (vms.curmsg < vms.lastmsg) {
@@ -11449,25 +12031,46 @@
 						ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 						vms.curmsg = -1;
 						if (vms.lastmsg < 0) {
+							if (ast_using_saysentence()) {
+								cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+							} else {
+								cmd = ast_play_and_wait(chan, "vm-nomore");
+							}
+						}
+					} else {
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
 							cmd = ast_play_and_wait(chan, "vm-nomore");
 						}
-					} else {
-						cmd = ast_play_and_wait(chan, "vm-nomore");
 					}
 				}
 			}
 			break;
 		case '*': /* Help */
 			if (!vms.starting) {
-				cmd = ast_play_and_wait(chan, "vm-onefor");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-onefor");
+				}
 				if (!strncasecmp(ast_channel_language(chan), "he", 2)) {
-					cmd = ast_play_and_wait(chan, "vm-for");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-for>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-for");
+					}
 				}
 				if (!cmd)
 					cmd = vm_play_folder_name(chan, vms.vmbox);
+				if (!cmd) {
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-opts>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-opts");
+					}
+				}
 				if (!cmd)
-					cmd = ast_play_and_wait(chan, "vm-opts");
-				if (!cmd)
 					cmd = vm_instructions(chan, vmu, &vms, 1, in_urgent);
 			} else
 				cmd = 0;
@@ -11496,10 +12099,19 @@
 		ast_stopstream(chan);
 		adsi_goodbye(chan);
 		if (valid && res != OPERATOR_EXIT) {
-			if (silentexit)
-				res = ast_play_and_wait(chan, "vm-dialout");
-			else 
-				res = ast_play_and_wait(chan, "vm-goodbye");
+			if (silentexit) {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-dialout>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-dialout");
+				}
+			} else {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-goodbye");
+				}
+			}
 		}
 		if ((valid && res > 0) || res == OPERATOR_EXIT) {
 			res = 0;
@@ -11586,7 +12198,26 @@
 		}
 	} else {
 		char temp[256];
-		res = ast_app_getdata(chan, "vm-whichbox", temp, sizeof(temp) - 1, 0);
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "#", "<vm-whichbox>");
+			if (res == '#' || res < 0) {
+				temp[0] = 0;
+			} else if (res == 0) {  /* played out and no input still */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+	
+				res = ast_readstring(chan, temp, sizeof(temp) - 1, to, fto, "#");
+	
+			} else { /* input other than # */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+				temp[0] = res;
+				temp[1] = 0;
+				res = ast_readstring(chan, temp+1, sizeof(temp) - 2, to, fto, "#");
+			}
+		} else {
+			res = ast_app_getdata(chan, "vm-whichbox", temp, sizeof(temp) - 1, 0);
+		}
 		if (res < 0)
 			return res;
 		if (ast_strlen_zero(temp))
@@ -11596,7 +12227,11 @@
 
 	res = leave_voicemail(chan, args.argv0, &leave_options);
 	if (res == 't') {
-		ast_play_and_wait(chan, "vm-goodbye");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
 		res = 0;
 	}
 
@@ -12106,7 +12741,11 @@
 	if (!vm_authenticate(chan, mailbox, sizeof(mailbox), &vmus, context, NULL, skipuser, 3, silent)) {
 		pbx_builtin_setvar_helper(chan, "AUTH_MAILBOX", mailbox);
 		pbx_builtin_setvar_helper(chan, "AUTH_CONTEXT", vmus.context);
-		ast_play_and_wait(chan, "auth-thankyou");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<auth-thankyou>");
+		} else {
+			ast_play_and_wait(chan, "auth-thankyou");
+		}
 		res = 0;
 	} else if (mailbox[0] == '*') {
 		/* user entered '*' */
@@ -14352,11 +14991,15 @@
 		ast_verb(3, "Destination number will be entered manually\n");
 		while (retries < 3 && cmd != 't') {
 			destination[1] = '\0';
-			destination[0] = cmd = ast_play_and_wait(chan, "vm-enter-num-to-call");
-			if (!cmd)
-				destination[0] = cmd = ast_play_and_wait(chan, "vm-then-pound");
-			if (!cmd)
-				destination[0] = cmd = ast_play_and_wait(chan, "vm-star-cancel");
+			if (ast_using_saysentence()) {
+				destination[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-enter-num-to-call><vm-then-pound><vm-star-cancel>");
+			} else {
+				destination[0] = cmd = ast_play_and_wait(chan, "vm-enter-num-to-call");
+				if (!cmd)
+					destination[0] = cmd = ast_play_and_wait(chan, "vm-then-pound");
+				if (!cmd)
+					destination[0] = cmd = ast_play_and_wait(chan, "vm-star-cancel");
+			}
 			if (!cmd) {
 				cmd = ast_waitfordigit(chan, 6000);
 				if (cmd)
@@ -14491,7 +15134,11 @@
 					}
 				} else {
 					ast_verb(3, "Caller can not specify callback number - no dialout context available\n");
-					res = ast_play_and_wait(chan, "vm-sorry");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-sorry");
+					}
 				}
 				ast_config_destroy(msg_cfg);
 				return res;
@@ -14507,31 +15154,62 @@
 			case '9':
 			case '0':
 
-				res = ast_play_and_wait(chan, "vm-sorry");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-sorry");
+				}
 				retries++;
 				break;
 			default:
 				if (num) {
 					ast_verb(3, "Confirm CID number '%s' is number to use for callback\n", num);
-					res = ast_play_and_wait(chan, "vm-num-i-have");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-num-i-have>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-num-i-have");
+					}
 					if (!res)
 						res = play_message_callerid(chan, vms, num, vmu->context, 1, 1);
-					if (!res)
-						res = ast_play_and_wait(chan, "vm-tocallnum");
+					if (!res) {
+						if (ast_using_saysentence()) {
+							res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocallnum>");
+						} else {
+							res = ast_play_and_wait(chan, "vm-tocallnum");
+						}
+					}
 					/* Only prompt for a caller-specified number if there is a dialout context specified */
 					if (!ast_strlen_zero(vmu->dialout)) {
-						if (!res)
-							res = ast_play_and_wait(chan, "vm-calldiffnum");
+						if (!res) {
+							if (ast_using_saysentence()) {
+								res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-calldiffnum>");
+							} else {
+								res = ast_play_and_wait(chan, "vm-calldiffnum");
+							}
+						}
 					}
 				} else {
-					res = ast_play_and_wait(chan, "vm-nonumber");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nonumber>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-nonumber");
+					}
 					if (!ast_strlen_zero(vmu->dialout)) {
-						if (!res)
-							res = ast_play_and_wait(chan, "vm-toenternumber");
+						if (!res) {
+							if (ast_using_saysentence()) {
+								res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-toenternumber>");
+							} else {
+								res = ast_play_and_wait(chan, "vm-toenternumber");
+							}
+						}
 					}
 				}
 				if (!res) {
-					res = ast_play_and_wait(chan, "vm-star-cancel");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-star-cancel>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-star-cancel");
+					}
 				}
 				if (!res) {
 					res = ast_waitfordigit(chan, 6000);
@@ -14561,8 +15239,13 @@
 		ast_callerid_parse(cid, &name, &num);
 		if (!num) {
 			ast_verb(3, "No CID number available, no reply sent\n");
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-nonumber");
+			if (!res) {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nonumber>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-nonumber");
+				}
+			}
 			ast_config_destroy(msg_cfg);
 			return res;
 		} else {
@@ -14584,7 +15267,11 @@
 			} else {
 				/* Sender has no mailbox, can't reply */
 				ast_verb(3, "No mailbox number '%s' in context '%s', no reply sent\n", num, vmu->context);
-				ast_play_and_wait(chan, "vm-nobox");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nobox>");
+				} else {
+					ast_play_and_wait(chan, "vm-nobox");
+				}
 				res = 't';
 				ast_config_destroy(msg_cfg);
 				return res;
@@ -14674,11 +15361,16 @@
 				ast_verb(3, "Recording the message\n");
 			
 			if (recorded && outsidecaller) {
-				cmd = ast_play_and_wait(chan, INTRO);
-				cmd = ast_play_and_wait(chan, "beep");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-intro><beep>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-intro");
+					if (!cmd)
+						cmd = ast_play_and_wait(chan, "beep");
+				}
 			}
 			recorded = 1;
-			/* After an attempt has been made to record message, we have to take care of INTRO and beep for incoming messages, but not for greetings */
+			/* After an attempt has been made to record message, we have to take care of vm-intro and beep for incoming messages, but not for greetings */
 			if (record_gain)
 				ast_channel_setoption(chan, AST_OPTION_RXGAIN, &record_gain, sizeof(record_gain), 0);
 			if (ast_test_flag(vmu, VM_OPERATOR))
@@ -14706,16 +15398,28 @@
 			} else if (vmu->review && sound_duration && (*sound_duration < 5)) {
 				/* Message is too short */
 				ast_verb(3, "Message too short\n");
-				cmd = ast_play_and_wait(chan, "vm-tooshort");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tooshort>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-tooshort");
+				}
 				cmd = ast_filedelete(tempfile, NULL);
 				break;
 			} else if (vmu->review && (cmd == 2 && sound_duration && *sound_duration < (maxsilence + 3))) {
 				/* Message is all silence */
 				ast_verb(3, "Nothing recorded\n");
 				cmd = ast_filedelete(tempfile, NULL);
-				cmd = ast_play_and_wait(chan, "vm-nothingrecorded");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nothingrecorded>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-nothingrecorded");
+				}
 				if (!cmd)
-					cmd = ast_play_and_wait(chan, "vm-speakup");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-speakup>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-speakup");
+					}
 				break;
 #endif
 			} else {
@@ -14729,18 +15433,34 @@
 				/* Mark Urgent */
 				if ((flag && ast_strlen_zero(flag)) || (!ast_strlen_zero(flag) && strcmp(flag, "Urgent"))) {
 					ast_verb(3, "marking message as Urgent\n");
-					res = ast_play_and_wait(chan, "vm-marked-urgent");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-marked-urgent>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-marked-urgent");
+					}
 					strcpy(flag, "Urgent");
 				} else if (flag) {
 					ast_verb(3, "UNmarking message as Urgent\n");
-					res = ast_play_and_wait(chan, "vm-marked-nonurgent");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-marked-nonurgent>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-marked-nonurgent");
+					}
 					strcpy(flag, "");
 				} else {
-					ast_play_and_wait(chan, "vm-sorry");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+					} else {
+						ast_play_and_wait(chan, "vm-sorry");
+					}
 				}
 				cmd = 0;
 			} else {
-				cmd = ast_play_and_wait(chan, "vm-sorry");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-sorry");
+				}
 			}
 			break;
 		case '5':
@@ -14750,14 +15470,22 @@
 		case '9':
 		case '*':
 		case '#':
-			cmd = ast_play_and_wait(chan, "vm-sorry");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-sorry");
+			}
 			break;
 #if 0 
 /*  XXX Commented out for the moment because of the dangers of deleting
     a message while recording (can put the message numbers out of sync) */
 		case '*':
 			/* Cancel recording, delete message, offer to take another message*/
-			cmd = ast_play_and_wait(chan, "vm-deleted");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-deleted");
+			}
 			cmd = ast_filedelete(tempfile, NULL);
 			if (outsidecaller) {
 				res = vm_exec(chan, NULL);
@@ -14768,26 +15496,50 @@
 #endif
 		case '0':
 			if (!ast_test_flag(vmu, VM_OPERATOR) || (!canceleddtmf && !outsidecaller)) {
-				cmd = ast_play_and_wait(chan, "vm-sorry");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-sorry");
+				}
 				break;
 			}
 			if (msg_exists || recorded) {
-				cmd = ast_play_and_wait(chan, "vm-saveoper");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-saveoper>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-saveoper");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 3000);
 				if (cmd == '1') {
 					ast_filerename(tempfile, recordfile, NULL);
-					ast_play_and_wait(chan, "vm-msgsaved");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgsaved>");
+					} else {
+						ast_play_and_wait(chan, "vm-msgsaved");
+					}
 					cmd = '0';
 				} else if (cmd == '4') {
 					if (flag) {
-						ast_play_and_wait(chan, "vm-marked-urgent");
+						if (ast_using_saysentence()) {
+							ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-marked-urgent>");
+						} else {
+							ast_play_and_wait(chan, "vm-marked-urgent");
+						}
 						strcpy(flag, "Urgent");
 					}
-					ast_play_and_wait(chan, "vm-msgsaved");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgsaved>");
+					} else {
+						ast_play_and_wait(chan, "vm-msgsaved");
+					}
 					cmd = '0';
 				} else {
-					ast_play_and_wait(chan, "vm-deleted");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+					} else {
+						ast_play_and_wait(chan, "vm-deleted");
+					}
 					DELETE(tempfile, -1, tempfile, vmu);
 					cmd = '0';
 				}
@@ -14800,28 +15552,52 @@
 			if (outsidecaller && !ast_test_flag(vmu, VM_REVIEW))
 				return cmd;
 			if (msg_exists) {
-				cmd = ast_play_and_wait(chan, "vm-review");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-review");
+				}
 				if (!cmd && outsidecaller) {
 					if ((flag && ast_strlen_zero(flag)) || (!ast_strlen_zero(flag) && strcmp(flag, "Urgent"))) {
-						cmd = ast_play_and_wait(chan, "vm-review-urgent");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review-urgent>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-review-urgent");
+						}
 					} else if (flag) {
-						cmd = ast_play_and_wait(chan, "vm-review-nonurgent");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review-nonurgent>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-review-nonurgent");
+						}
 					}
 				}
 			} else {
-				cmd = ast_play_and_wait(chan, "vm-torerecord");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-torerecord>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-torerecord");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 600);
 			}
 			
 			if (!cmd && outsidecaller && ast_test_flag(vmu, VM_OPERATOR)) {
-				cmd = ast_play_and_wait(chan, "vm-reachoper");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-reachoper>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-reachoper");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 600);
 			}
 #if 0
 			if (!cmd)
-				cmd = ast_play_and_wait(chan, "vm-tocancelmsg");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocancelmsg>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-tocancelmsg");
+				}
 #endif
 			if (!cmd)
 				cmd = ast_waitfordigit(chan, 6000);
@@ -14838,9 +15614,13 @@
 		ast_filedelete(tempfile, NULL);
 	}
 
-	if (cmd != 't' && outsidecaller)
-		ast_play_and_wait(chan, "vm-goodbye");
-
+	if (cmd != 't' && outsidecaller) {
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
+	}
 	return cmd;
 }
 
Index: apps/app_dictate.c
===================================================================
--- apps/app_dictate.c	(revision 403615)
+++ apps/app_dictate.c	(working copy)
@@ -162,7 +162,11 @@
 		mode = DMODE_PLAY;
 		memset(&flags, 0, sizeof(flags));
 		ast_set_flag(&flags, DFLAG_PAUSE);
-		digit = play_and_wait(chan, "dictate/forhelp", AST_DIGIT_ANY);
+		if (ast_using_saysentence()) {
+			digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/forhelp>");
+		} else {
+			digit = play_and_wait(chan, "dictate/forhelp", AST_DIGIT_ANY);
+		}
 		done = 0;
 		speed = 1;
 		res = 0;
@@ -231,25 +235,52 @@
 						break;
 					case '*':
 						ast_toggle_flag(&flags, DFLAG_PAUSE);
-						if (ast_test_flag(&flags, DFLAG_PAUSE)) {
-							digit = play_and_wait(chan, "dictate/pause", AST_DIGIT_ANY);
+						if (ast_using_saysentence()) {
+							if (ast_test_flag(&flags, DFLAG_PAUSE)) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/pause>");
+							} else {
+								if (mode == DMODE_PLAY)
+									digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/playback>");
+								else
+									digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/record>");
+							}
 						} else {
-							digit = play_and_wait(chan, mode == DMODE_PLAY ? "dictate/playback" : "dictate/record", AST_DIGIT_ANY);
+							if (ast_test_flag(&flags, DFLAG_PAUSE)) {
+								digit = play_and_wait(chan, "dictate/pause", AST_DIGIT_ANY);
+							} else {
+								digit = play_and_wait(chan, mode == DMODE_PLAY ? "dictate/playback" : "dictate/record", AST_DIGIT_ANY);
+							}
 						}
 						break;
 					case '0':
 						ast_set_flag(&flags, DFLAG_PAUSE);
-						digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/paused>");
+							} else {
+								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							}
 						switch(mode) {
 						case DMODE_PLAY:
-							digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/play_help>");
+							} else {
+								digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							}
 							break;
 						case DMODE_RECORD:
-							digit = play_and_wait(chan, "dictate/record_help", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/record_help>");
+							} else {
+								digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							}
 							break;
 						}
 						if (digit == 0) {
-							digit = play_and_wait(chan, "dictate/both_help", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/both_help>");
+							} else {
+								digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							}
 						} else if (digit < 0) {
 							done = 1;
 							break;
@@ -265,9 +296,17 @@
 				case DMODE_PLAY:
 					if (lastop != DMODE_PLAY) {
 						if (ast_test_flag(&flags, DFLAG_PAUSE)) {
-							digit = play_and_wait(chan, "dictate/playback_mode", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = play_and_wait(chan, "dictate/playback_mode", AST_DIGIT_ANY);
+							} else {
+								digit = play_and_wait(chan, "dictate/playback_mode", AST_DIGIT_ANY);
+							}
 							if (digit == 0) {
+							if (ast_using_saysentence()) {
 								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							} else {
+								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							}
 							} else if (digit < 0) {
 								break;
 							}
@@ -301,9 +340,17 @@
 					if (lastop != DMODE_RECORD) {
 						int oflags = O_CREAT | O_WRONLY;
 						if (ast_test_flag(&flags, DFLAG_PAUSE)) {
-							digit = play_and_wait(chan, "dictate/record_mode", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/record_mode>");
+							} else {
+								digit = play_and_wait(chan, "dictate/record_mode", AST_DIGIT_ANY);
+							}
 							if (digit == 0) {
-								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+								if (ast_using_saysentence()) {
+									digit = play_and_wait(chan, AST_DIGIT_ANY, "<dictate/paused>");
+								} else {
+									digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+								}
 							} else if (digit < 0) {
 								break;
 							}
@@ -312,7 +359,11 @@
 						ast_closestream(fs);
 						if ( ast_test_flag(&flags, DFLAG_TRUNC)) {
 							oflags |= O_TRUNC;
-							digit = play_and_wait(chan, "dictate/truncating_audio", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/truncating_audio>");
+							} else {
+								digit = play_and_wait(chan, "dictate/truncating_audio", AST_DIGIT_ANY);
+							}
 						} else {
 							oflags |= O_APPEND;
 						}
Index: apps/app_meetme.c
===================================================================
--- apps/app_meetme.c	(revision 403615)
+++ apps/app_meetme.c	(working copy)
@@ -2767,12 +2767,20 @@
 
 		/* they can't override the admin mute state */
 		if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {
-			if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-muted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
-			if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-unmuted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2784,8 +2792,12 @@
 		}
 
 		if (user->adminflags & ADMINFLAG_T_REQUEST) {
-			if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<beep>");
+			} else {
+				if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2819,8 +2831,12 @@
 
 	default:
 		*menu_mode = MENU_DISABLED;
-		if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-errormenu>");
+		} else {
+			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 		break;
 	}
@@ -2849,12 +2865,20 @@
 		}
 
 		if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {
-			if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-muted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
-			if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-unmuted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2863,13 +2887,21 @@
 		*menu_mode = MENU_DISABLED;
 		if (conf->locked) {
 			conf->locked = 0;
-			if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-unlockednow>");
+			} else {
+				if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			conf->locked = 1;
-			if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-lockednow>");
+			} else {
+				if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2882,8 +2914,12 @@
 		*menu_mode = MENU_DISABLED;
 		usr = ao2_find(conf->usercontainer, &max_no, 0);
 		if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {
-			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-errormenu>");
+			} else {
+				if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			usr->adminflags |= ADMINFLAG_KICKME;
@@ -2901,12 +2937,20 @@
 		/* Extend RT conference */
 		if (rt_schedule) {
 			if (!rt_extend_conf(conf->confno)) {
-				if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {
-					ast_waitstream(chan, "");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, "", "<conf-errormenu>");
+				} else {
+					if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {
+						ast_waitstream(chan, "");
+					}
 				}
 			} else {
-				if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {
-					ast_waitstream(chan, "");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, "", "<conf-errormenu>");
+				} else {
+					if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {
+						ast_waitstream(chan, "");
+					}
 				}
 			}
 			ast_stopstream(chan);
@@ -2923,10 +2967,14 @@
 		break;
 
 	case '8':
-		if (!ast_streamfile(chan, "conf-adminmenu-menu8", ast_channel_language(chan))) {
-			/* If the user provides DTMF while playing the sound, we want to drop right into the extended menu function with new DTMF once we get out of here. */
-			*dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
-			ast_stopstream(chan);
+		if (ast_using_saysentence()) {
+			*dtmf = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-adminmenu-menu8>");
+		} else {
+			if (!ast_streamfile(chan, "conf-adminmenu-menu8", ast_channel_language(chan))) {
+				/* If the user provides DTMF while playing the sound, we want to drop right into the extended menu function with new DTMF once we get out of here. */
+				*dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
+				ast_stopstream(chan);
+			}
 		}
 		*menu_mode = MENU_ADMIN_EXTENDED;
 		break;
@@ -2937,8 +2985,12 @@
 	default:
 		menu_mode = MENU_DISABLED;
 		/* Play an error message! */
-		if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-errormenu>");
+		} else {
+			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 		break;
 	}
@@ -2970,65 +3022,110 @@
 		keepplaying = 1;
 		playednamerec = 0;
 		if (conf->users == 1) {
-			if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			if (ast_using_saysentence()) {
+				if (keepplaying) {
+					res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-onlyperson>");
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
+			} else {
+				if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
+				}
 			}
 		} else if (conf->users == 2) {
-			if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			if (ast_using_saysentence()) {
+				if (keepplaying) {
+					res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-onlyone>");
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
+			} else {
+				if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
+				}
 			}
 		} else {
-			if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			if (ast_using_saysentence()) {
+				if (keepplaying) {
+					res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-thereare>%n<conf-otherinparty>", conf->users - 1);
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
-			}
-			if (keepplaying) {
-				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			} else {
+				if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
-			}
-			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+				if (keepplaying) {
+					res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
+				if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
+				}
 			}
 		}
 		user_iter = ao2_iterator_init(conf->usercontainer, 0);
 		while((usr = ao2_iterator_next(&user_iter))) {
 			if (ast_fileexists(usr->namerecloc, NULL, NULL)) {
-				if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {
-					res = ast_waitstream(chan, AST_DIGIT_ANY);
-					ast_stopstream(chan);
-					if (res > 0) {
-						keepplaying = 0;
+				if (ast_using_saysentence()) {
+					if (keepplaying) {
+						res=ast_say_sentence(chan, AST_DIGIT_ANY, "%z", usr->namerecloc); /* Play a recorded username */
+						if (res > 0) {
+							keepplaying = 0;
+						}
 					}
+				} else {
+					if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {
+						res = ast_waitstream(chan, AST_DIGIT_ANY);
+						ast_stopstream(chan);
+						if (res > 0) {
+							keepplaying = 0;
+						}
+					}
 				}
 				playednamerec = 1;
 			}
 			ao2_ref(usr, -1);
 		}
 		ao2_iterator_destroy(&user_iter);
-		if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {
-			res = ast_waitstream(chan, AST_DIGIT_ANY);
-			ast_stopstream(chan);
-			if (res > 0) {
-				keepplaying = 0;
+		if (ast_using_saysentence()) {
+			if (keepplaying && playednamerec) {
+				res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-roll-callcomplete>");
+				if (res > 0) {
+					keepplaying = 0;
+				}
 			}
+		} else {
+			if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {
+				res = ast_waitstream(chan, AST_DIGIT_ANY);
+				ast_stopstream(chan);
+				if (res > 0) {
+					keepplaying = 0;
+				}
+			}
 		}
 
 		*menu_mode = MENU_DISABLED;
@@ -3036,8 +3133,12 @@
 
 	case '2': /* *82 Eject all non-admins */
 		if (conf->users == 1) {
-			if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-errormenu>");
+			} else {
+				if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);
@@ -3050,14 +3151,22 @@
 		if(conf->gmuted) {
 			conf->gmuted = 0;
 			ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);
-			if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-now-unmuted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			conf->gmuted = 1;
 			ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);
-			if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-now-muted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		ast_stopstream(chan);
@@ -3104,8 +3213,12 @@
 				}
 			}
 			ast_mutex_unlock(&conf->recordthreadlock);
-			if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-now-recording>");
+			} else {
+				if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 
@@ -3119,8 +3232,12 @@
 		break;
 
 	default:
-		if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-errormenu>");
+		} else {
+			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 		ast_stopstream(chan);
 		*menu_mode = MENU_DISABLED;
@@ -3392,8 +3509,12 @@
 
 	if (conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN))) {
 		/* Sorry, but this conference is locked! */	
-		if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-locked>");
+		} else {
+			if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))
+				ast_waitstream(chan, "");
+		}
 		goto outrun;
 	}
 
@@ -3402,8 +3523,12 @@
 	if (rt_schedule && conf->maxusers) {
 		if (conf->users >= conf->maxusers) {
 			/* Sorry, but this confernce has reached the participant limit! */	
-			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-full>");
+			} else {
+				if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))
+					ast_waitstream(chan, "");
+			}
 			ast_mutex_unlock(&conf->playlock);
 			goto outrun;
 		}
@@ -3513,56 +3638,88 @@
 	/* Play an arbitrary intro message */
 	if (ast_test_flag64(confflags, CONFFLAG_INTROMSG) &&
 			!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])) {
-		if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "%z", optargs[OPT_ARG_INTROMSG]);  /* look this up and replace it! */
+		} else {
+			if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 	}
 
 	if (!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))) {
-		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))
-			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))
-				ast_waitstream(chan, "");
-		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)
-			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))
-				ast_waitstream(chan, "");
+		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-onlyperson>");
+			} else {
+				if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
+			}
+		}
+		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0) {
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-waitforleader>");
+			} else {
+				if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
+			}
+		}
 	}
 
 	if (ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1) {
 		int keepplaying = 1;
 
 		if (conf->users == 2) { 
-			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-onlyone>");
 				if (res > 0)
 					keepplaying = 0;
 				else if (res == -1)
 					goto outrun;
+			} else {
+				if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1)
+						goto outrun;
+				}
 			}
 		} else { 
-			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-thereare>%n<conf-otherinparty>", conf->users - 1);
 				if (res > 0)
 					keepplaying = 0;
 				else if (res == -1)
 					goto outrun;
+			} else {
+				if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1)
+						goto outrun;
+				}
+				if (keepplaying) {
+					res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1)
+						goto outrun;
+				}
+				if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1) 
+						goto outrun;
+				}
 			}
-			if (keepplaying) {
-				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
-				if (res > 0)
-					keepplaying = 0;
-				else if (res == -1)
-					goto outrun;
-			}
-			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0)
-					keepplaying = 0;
-				else if (res == -1) 
-					goto outrun;
-			}
 		}
 	}
 
@@ -3797,11 +3954,15 @@
 
 						if (!announcement_played && conf->endalert) {
 							if (now.tv_sec + conf->endalert >= conf->endtime) {
-								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))
-									ast_waitstream(chan, "");
-								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));
-								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))
-									ast_waitstream(chan, "");
+								if (ast_using_saysentence()) {
+									ast_say_sentence(chan, "", "<conf-will-end-in>%n<minutes>", (conf->endtime - now.tv_sec) / 60);
+								} else {
+									if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))
+										ast_waitstream(chan, "");
+									ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));
+									if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))
+										ast_waitstream(chan, "");
+								}
 								if (musiconhold) {
 									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
 								}
@@ -3843,9 +4004,13 @@
 				}
  	
  				if (time_left_ms <= 0) {
- 					if (user->end_sound) {						
- 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan));
- 						res = ast_waitstream(chan, "");
+ 					if (user->end_sound) {
+						if (ast_using_saysentence()) {
+							res = ast_say_sentence(chan, "", "%z", user->end_sound); /* Get rid of the variable */
+						} else {
+ 							res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan));
+ 							res = ast_waitstream(chan, "");
+						}
  					}
 					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {
 						ret = 0;
@@ -3869,22 +4034,36 @@
  						/* force the time left to round up if appropriate */
  						if (user->warning_sound && user->play_warning) {
  							if (!strcmp(user->warning_sound, "timeleft")) {
- 								
- 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan));
- 								res = ast_waitstream(chan, "");
- 								if (minutes) {
- 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
- 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan));
+ 								if (ast_using_saysentence()) {
+									if (minutes && seconds) {
+										res = ast_say_sentence(chan, "", "<vm-youhave>%n<queue-minutes><vm-and>%n<queue-seconds>", minutes, seconds);
+									} else if (minutes && !seconds) {
+										res = ast_say_sentence(chan, "", "<vm-youhave>%n<queue-minutes>", minutes);
+									} else if (!minutes && seconds) {
+										res = ast_say_sentence(chan, "", "<vm-youhave>%n<queue-seconds>", seconds);
+									}
+								} else {
+	 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan));
  									res = ast_waitstream(chan, "");
- 								}
- 								if (seconds) {
- 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
- 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan));
+ 									if (minutes) {
+ 										res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+ 										res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan));
+ 										res = ast_waitstream(chan, "");
+ 									}
+ 									if (seconds) {
+ 										res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+ 										res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan));
+ 										res = ast_waitstream(chan, "");
+ 									}
+								}
+ 							} else {
+								
+ 								if (ast_using_saysentence()) {
+									res = ast_say_sentence(chan, "", "%z", user->warning_sound);
+								} else {
+ 									res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan));
  									res = ast_waitstream(chan, "");
- 								}
- 							} else {
- 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan));
- 								res = ast_waitstream(chan, "");
+								}
  							}
 							if (musiconhold) {
 								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
@@ -3924,20 +4103,28 @@
 			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&
 			    lastmarked == 0) {
 				if (currentmarked == 1 && conf->users > 1) {
-					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
-					if (conf->users - 1 == 1) {
-						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {
-							ast_waitstream(chan, "");
-						}
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "%n<conf-userswilljoin>", conf->users - 1); /* the plural/singular is handled in the translation file */
 					} else {
-						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {
-							ast_waitstream(chan, "");
+						ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+						if (conf->users - 1 == 1) {
+							if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {
+								ast_waitstream(chan, "");
+							}
+						} else {
+							if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {
+								ast_waitstream(chan, "");
+							}
 						}
 					}
 				}
 				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {
-					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
-						ast_waitstream(chan, "");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "<conf-onlyperson>");
+					} else {
+						if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
+							ast_waitstream(chan, "");
+						}
 					}
 				}
 			}
@@ -3949,8 +4136,12 @@
 				if (currentmarked == 0) {
 					if (lastmarked != 0) {
 						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {
-							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {
-								ast_waitstream(chan, "");
+							if (ast_using_saysentence()) {
+								ast_say_sentence(chan, "", "<conf-leaderhasleft>");
+							} else {
+								if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {
+									ast_waitstream(chan, "");
+								}
 							}
 						}
 						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {
@@ -3992,8 +4183,12 @@
 					}
 					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && 
 						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {
-						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {
-							ast_waitstream(chan, "");
+						if (ast_using_saysentence()) {
+							ast_say_sentence(chan, "", "<conf-placeintoconf>");
+						} else {
+							if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {
+								ast_waitstream(chan, "");
+							}
 						}
 						conf_play(chan, conf, ENTER);
 					}
@@ -4088,9 +4283,14 @@
 			/* If I have been kicked, exit the conference */
 			if (user->adminflags & ADMINFLAG_KICKME) {
 				/* You have been kicked. */
-				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && 
-					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {
-					ast_waitstream(chan, "");
+				if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "<conf-kicked>");
+					} else {
+						if (!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {
+							ast_waitstream(chan, "");
+						}
+					}
 				}
 				ret = 0;
 				break;
@@ -4190,17 +4390,26 @@
 						char *menu_to_play;
 						if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {
 							menu_mode = MENU_ADMIN;
-							menu_to_play = "conf-adminmenu-18";
+							if (ast_using_saysentence()) {
+								dtmf = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-adminmenu-18>");
+							} else {
+								menu_to_play = "conf-adminmenu-18";
+							}
 						} else {
 							menu_mode = MENU_NORMAL;
-							menu_to_play = "conf-usermenu-162";
+							if (ast_using_saysentence()) {
+								dtmf = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-usermenu-162>");
+							} else {
+								menu_to_play = "conf-usermenu-162";
+							}
 						}
-
-						if (!ast_streamfile(chan, menu_to_play, ast_channel_language(chan))) {
-							dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
-							ast_stopstream(chan);
-						} else {
-							dtmf = 0;
+						if (!ast_using_saysentence()) {
+							if (!ast_streamfile(chan, menu_to_play, ast_channel_language(chan))) {
+								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
+								ast_stopstream(chan);
+							} else {
+								dtmf = 0;
+							}
 						}
 					} else {
 						dtmf = f->subclass.integer;
@@ -4562,8 +4771,12 @@
 
 		if (rt_schedule && *too_early) {
 			/* Announce that the caller is early and exit */
-			if (!ast_streamfile(chan, "conf-has-not-started", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-has-not-started>");
+			} else {
+				if (!ast_streamfile(chan, "conf-has-not-started", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 			ast_variables_destroy(var);
 			return NULL;
@@ -4975,17 +5188,25 @@
 
 			/* Not found? */
 			if (ast_strlen_zero(confno)) {
-				res = ast_streamfile(chan, "conf-noempty", ast_channel_language(chan));
 				ast_test_suite_event_notify("PLAYBACK", "Message: conf-noempty");
-				if (!res)
-					ast_waitstream(chan, "");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, "", "<conf-noempty>");
+				} else {
+					res = ast_streamfile(chan, "conf-noempty", ast_channel_language(chan));
+					if (!res)
+						ast_waitstream(chan, "");
+				}
 			} else {
 				if (sscanf(confno, "%30d", &confno_int) == 1) {
 					if (!ast_test_flag64(&confflags, CONFFLAG_QUIET)) {
-						res = ast_streamfile(chan, "conf-enteringno", ast_channel_language(chan));
-						if (!res) {
-							ast_waitstream(chan, "");
-							res = ast_say_digits(chan, confno_int, "", ast_channel_language(chan));
+						if (ast_using_saysentence()) {
+							ast_say_sentence(chan, "", "<conf-enteringno>%n", confno_int);
+						} else {
+							res = ast_streamfile(chan, "conf-enteringno", ast_channel_language(chan));
+							if (!res) {
+								ast_waitstream(chan, "");
+								res = ast_say_digits(chan, confno_int, "", ast_channel_language(chan));
+							}
 						}
 					}
 				} else {
@@ -5020,9 +5241,13 @@
 			if (!cnf) {
 				if (allowretry) {
 					confno[0] = '\0';
-					res = ast_streamfile(chan, "conf-invalid", ast_channel_language(chan));
-					if (!res)
-						ast_waitstream(chan, "");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "<conf-invalid>");
+					} else {
+						res = ast_streamfile(chan, "conf-invalid", ast_channel_language(chan));
+						if (!res)
+							ast_waitstream(chan, "");
+					}
 					res = -1;
 				}
 			} else {
@@ -5087,12 +5312,16 @@
 								break;
 							} else {
 								/* Pin invalid */
-								if (!ast_streamfile(chan, "conf-invalidpin", ast_channel_language(chan))) {
-									res = ast_waitstream(chan, AST_DIGIT_ANY);
-									ast_stopstream(chan);
+								if (ast_using_saysentence()) {
+									res = ast_say_sentence(chan, "", "<conf-invalidpin>");
 								} else {
-									ast_log(LOG_WARNING, "Couldn't play invalid pin msg!\n");
-									break;
+									if (!ast_streamfile(chan, "conf-invalidpin", ast_channel_language(chan))) {
+										res = ast_waitstream(chan, AST_DIGIT_ANY);
+										ast_stopstream(chan);
+									} else {
+										ast_log(LOG_WARNING, "Couldn't play invalid pin msg!\n");
+										break;
+									}
 								}
 								if (res < 0)
 									break;
Index: apps/app_minivm.c
===================================================================
--- apps/app_minivm.c	(revision 403615)
+++ apps/app_minivm.c	(working copy)
@@ -1561,49 +1561,85 @@
 
 	snprintf(fn, sizeof(fn), "%s%s/%s/greet", MVM_SPOOL_DIR, domain, username);
 
-	if (ast_fileexists(fn, NULL, NULL) > 0) {
-		res = ast_streamfile(chan, fn, ast_channel_language(chan));
-		if (res) 
-			return -1;
-		res = ast_waitstream(chan, ecodes);
-		if (res) 
-			return res;
-	} else {
-		int numericusername = 1;
-		char *i = username;
-
-		ast_debug(2, "No personal prompts. Using default prompt set for language\n");
-
-		while (*i)  {
-			ast_debug(2, "Numeric? Checking %c\n", *i);
-			if (!isdigit(*i)) {
-				numericusername = FALSE;
-				break;
+	if (ast_using_saysentence()) {
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+			if (busy)
+				res = ast_say_sentence(chan, ecodes, "%z<vm-isonphone>.", fn);
+			else
+				res = ast_say_sentence(chan, ecodes, "%z<vm-isunavail>.", fn);
+		} else {
+			int numericusername = 1;
+			char *i = username;
+	
+			ast_debug(2, "No personal prompts. Using default prompt set for language\n");
+	
+			while (*i)  {
+				ast_debug(2, "Numeric? Checking %c\n", *i);
+				if (!isdigit(*i)) {
+					numericusername = FALSE;
+					break;
+				}
+				i++;
 			}
-			i++;
+	
+			if (numericusername) {
+				if (busy)
+					res = ast_say_sentence(chan, ecodes, "<vm-theperson>%i<vm-isonphone>.", username);
+				else
+					res = ast_say_sentence(chan, ecodes, "<vm-theperson>%i<vm-isunavail>.", username);
+			} else {
+				if (busy)
+					res = ast_say_sentence(chan, ecodes, "<vm-theextensionis><vm-isonphone>.");
+				else
+					res = ast_say_sentence(chan, ecodes, "<vm-theextensionis><vm-isunavail>.");
+			}
 		}
+	} else {
 
-		if (numericusername) {
-			if (ast_streamfile(chan, "vm-theperson", ast_channel_language(chan)))
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+			res = ast_streamfile(chan, fn, ast_channel_language(chan));
+			if (res) 
 				return -1;
-			if ((res = ast_waitstream(chan, ecodes)))
+			res = ast_waitstream(chan, ecodes);
+			if (res) 
 				return res;
-
-			res = ast_say_digit_str(chan, username, ecodes, ast_channel_language(chan));
-			if (res)
-				return res;
 		} else {
-			if (ast_streamfile(chan, "vm-theextensionis", ast_channel_language(chan)))
-				return -1;
-			if ((res = ast_waitstream(chan, ecodes)))
-				return res;
+			int numericusername = 1;
+			char *i = username;
+	
+			ast_debug(2, "No personal prompts. Using default prompt set for language\n");
+	
+			while (*i)  {
+				ast_debug(2, "Numeric? Checking %c\n", *i);
+				if (!isdigit(*i)) {
+					numericusername = FALSE;
+					break;
+				}
+				i++;
+			}
+	
+			if (numericusername) {
+				if (ast_streamfile(chan, "vm-theperson", ast_channel_language(chan)))
+					return -1;
+				if ((res = ast_waitstream(chan, ecodes)))
+					return res;
+	
+				res = ast_say_digit_str(chan, username, ecodes, ast_channel_language(chan));
+				if (res)
+					return res;
+			} else {
+				if (ast_streamfile(chan, "vm-theextensionis", ast_channel_language(chan)))
+					return -1;
+				if ((res = ast_waitstream(chan, ecodes)))
+					return res;
+			}
 		}
+	
+		res = ast_streamfile(chan, busy ? "vm-isonphone" : "vm-isunavail", ast_channel_language(chan));
+		if (res)
+			return -1;
+		res = ast_waitstream(chan, ecodes);
 	}
-
-	res = ast_streamfile(chan, busy ? "vm-isonphone" : "vm-isunavail", ast_channel_language(chan));
-	if (res)
-		return -1;
-	res = ast_waitstream(chan, ecodes);
 	return res;
 }
 
@@ -1666,8 +1702,13 @@
 				ast_verb(3, "Re-recording the message\n");
 			else
 				ast_verb(3, "Recording the message\n");
-			if (recorded && outsidecaller) 
-				cmd = ast_play_and_wait(chan, "beep");
+			if (recorded && outsidecaller) {
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<beep>");
+				} else {
+					cmd = ast_play_and_wait(chan, "beep");
+				}
+			}
 			recorded = 1;
 			/* After an attempt has been made to record message, we have to take care of INTRO and beep for incoming messages, but not for greetings */
 			if (record_gain)
@@ -1697,22 +1738,42 @@
  		case '9':
 		case '*':
 		case '#':
- 			cmd = ast_play_and_wait(chan, "vm-sorry");
+ 			if (ast_using_saysentence()) {
+ 				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+ 			} else {
+ 				cmd = ast_play_and_wait(chan, "vm-sorry");
+ 			}
  			break;
  		case '0':
 			if(!ast_test_flag(vmu, MVM_OPERATOR)) {
- 				cmd = ast_play_and_wait(chan, "vm-sorry");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-sorry");
+ 				}
  				break;
 			}
 			if (message_exists || recorded) {
-				cmd = ast_play_and_wait(chan, "vm-saveoper");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-saveoper>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-saveoper");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 3000);
 				if (cmd == '1') {
-					ast_play_and_wait(chan, "vm-msgsaved");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgsaved>");
+					} else {
+						ast_play_and_wait(chan, "vm-msgsaved");
+					}
 					cmd = '0';
 				} else {
-					ast_play_and_wait(chan, "vm-deleted");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+					} else {
+						ast_play_and_wait(chan, "vm-deleted");
+					}
 					vm_delete(recordfile);
 					cmd = '0';
 				}
@@ -1725,15 +1786,27 @@
 			if (outsidecaller && !ast_test_flag(vmu, MVM_REVIEW))
 				return cmd;
  			if (message_exists) {
- 				cmd = ast_play_and_wait(chan, "vm-review");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-review");
+ 				}
  			} else {
- 				cmd = ast_play_and_wait(chan, "vm-torerecord");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-torerecord>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-torerecord");
+ 				}
  				if (!cmd)
  					cmd = ast_waitfordigit(chan, 600);
  			}
 
  			if (!cmd && outsidecaller && ast_test_flag(vmu, MVM_OPERATOR)) {
- 				cmd = ast_play_and_wait(chan, "vm-reachoper");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-reachoper>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-reachoper");
+ 				}
  				if (!cmd)
  					cmd = ast_waitfordigit(chan, 600);
  			}
@@ -1747,8 +1820,13 @@
  			}
  		}
  	}
-	if (outsidecaller)
-		ast_play_and_wait(chan, "vm-goodbye");
+	if (outsidecaller) {
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
+	}
  	if (cmd == 't')
  		cmd = 0;
  	return cmd;
@@ -1942,9 +2020,13 @@
 	txtdes = mkstemp(tmptxtfile);
 	if (txtdes < 0) {
 		ast_log(LOG_ERROR, "Unable to create message file %s: %s\n", tmptxtfile, strerror(errno));
-		res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
-		if (!res)
-			res = ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<vm-mailboxfull>.");
+		} else {
+			res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
+			if (!res)
+				res = ast_waitstream(chan, "");
+		}
 		pbx_builtin_setvar_helper(chan, "MVM_RECORD_STATUS", "FAILED");
 		return res;
 	}
@@ -2371,12 +2453,16 @@
 		res = 0;
 	}
 	if (!res && !ast_test_flag(&leave_options, OPT_SILENT)) {
-		res = ast_streamfile(chan, SOUND_INTRO, ast_channel_language(chan));
-		if (!res)
-			res = ast_waitstream(chan, ecodes);
-		if (res == '#') {
-			ast_set_flag(&leave_options, OPT_SILENT);
-			res = 0;
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, ecodes, "<vm-intro>.");
+		} else {
+			res = ast_streamfile(chan, SOUND_INTRO, ast_channel_language(chan));
+			if (!res)
+				res = ast_waitstream(chan, ecodes);
+			}
+			if (res == '#') {
+				ast_set_flag(&leave_options, OPT_SILENT);
+				res = 0;
 		}
 	}
 	if (res > 0)
@@ -2401,7 +2487,11 @@
 			} else if (ousemacro && !ast_strlen_zero(ast_channel_macrocontext(chan))) {
 				ast_channel_context_set(chan, ast_channel_macrocontext(chan));
 			}
-			ast_play_and_wait(chan, "transfer");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<transfer>");
+			} else {
+				ast_play_and_wait(chan, "transfer");
+			}
 			ast_channel_priority_set(chan, 0);
 			pbx_builtin_setvar_helper(chan, "MVM_GREET_STATUS", "USEREXIT");
 		}
Index: apps/app_directory.c
===================================================================
--- apps/app_directory.c	(revision 403615)
+++ apps/app_directory.c	(working copy)
@@ -286,11 +286,24 @@
  *           '1' for selected entry from directory
  *           '*' for skipped entry from directory
  */
+
+static int dir_sayname(struct ast_channel *chan, const char *mailbox, const char *context, char *path, int pathlen)
+{
+        int res = -1;
+        snprintf(path, pathlen, "%s/voicemail/%s/%s/greet", ast_config_AST_SPOOL_DIR, context, mailbox);
+        if (ast_fileexists(path, NULL, NULL)) {
+		res = 0;
+        }
+        return res;
+}
+
 static int play_mailbox_owner(struct ast_channel *chan, const char *context,
 	const char *ext, const char *name, struct ast_flags *flags)
 {
 	int res = 0;
-	if ((res = ast_app_sayname(chan, ext, context)) >= 0) {
+	char dir[PATH_MAX];
+
+	if ((res = dir_sayname(chan, ext, context, dir, sizeof(dir))) >= 0) {
 		ast_stopstream(chan);
 		/* If Option 'e' was specified, also read the extension number with the name */
 		if (ast_test_flag(flags, OPT_SAYEXTENSION)) {
@@ -354,11 +367,30 @@
 		item = *ptr;
 
 		for (loop = 3 ; loop > 0; loop--) {
+			if (ast_using_saysentence()) {
+				char path[PATH_MAX];
+				int res2 = dir_sayname(chan, item->exten, item->context, path, sizeof(path));
+				if (res2 < 0)  {/* if there is NO greeting file */
+					if (!ast_strlen_zero(path) && ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%c<vm-extension>%c<dir-instr>.", S_OR(item->name, item->exten), item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%c<dir-instr>.", S_OR(item->name, item->exten));
+					}
+				} else {
+					if (ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-extension>%c<dir-instr>.", path, item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<dir-instr>.", path);
+					}
+				}
+			} else {
+	
+				if (!res)
+					res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
+				if (!res)
+					res = ast_stream_and_wait(chan, "dir-instr", AST_DIGIT_ANY);
+			}
 			if (!res)
-				res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
-			if (!res)
-				res = ast_stream_and_wait(chan, "dir-instr", AST_DIGIT_ANY);
-			if (!res)
 				res = ast_waitfordigit(chan, 3000);
 			ast_stopstream(chan);
 	
@@ -405,33 +437,54 @@
 
 		for (i = 0; i < limit && !res; i++) {
 			item = block[i];
-
-			snprintf(buf, sizeof(buf), "digits/%d", i + 1);
-			/* Press <num> for <name>, [ extension <ext> ] */
-			res = ast_streamfile(chan, "dir-multi1", ast_channel_language(chan));
+			if (ast_using_saysentence()) {
+				char path[PATH_MAX];
+				int res2 = dir_sayname(chan, item->exten, item->context, path, sizeof(path));
+				if (res2 < 0)  {/* if there is NO greeting file */
+					if (!ast_strlen_zero(item->name) && ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%c<vm-extension>%c", i+1, S_OR(item->name, item->exten), item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%c", i+1, S_OR(item->name, item->exten));
+					}
+				} else {
+					if (ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%z<vm-extension>%c", i+1, path, item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%z", i+1, path);
+					}
+				}
+			} else {
+				snprintf(buf, sizeof(buf), "digits/%d", i + 1);
+				/* Press <num> for <name>, [ extension <ext> ] */
+				res = ast_streamfile(chan, "dir-multi1", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+				if (!res)
+					res = ast_streamfile(chan, buf, ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+				if (!res)
+					res = ast_streamfile(chan, "dir-multi2", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+				if (!res)
+					res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+			}
 			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
-				res = ast_streamfile(chan, buf, ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
-				res = ast_streamfile(chan, "dir-multi2", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
-				res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
 				res = ast_waitfordigit(chan, 800);
 		}
 
 		/* Press "9" for more names. */
 		if (!res && count > limit) {
-			res = ast_streamfile(chan, "dir-multi9", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi9>.");
+			} else {
+				res = ast_streamfile(chan, "dir-multi9", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+			}
 		}
 
 		if (!res) {
@@ -783,7 +836,11 @@
 	}
 
 	if (count < 1) {
-		res = ast_streamfile(chan, "dir-nomatch", ast_channel_language(chan));
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<dir-nomatch>.");
+		} else {
+			res = ast_streamfile(chan, "dir-nomatch", ast_channel_language(chan));
+		}
 		goto exit;
 	}
 
@@ -815,7 +872,11 @@
 	}
 
 	if (!res) {
-		res = ast_streamfile(chan, "dir-nomore", ast_channel_language(chan));
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<dir-nomore>.");
+		} else {
+			res = ast_streamfile(chan, "dir-nomore", ast_channel_language(chan));
+		}
 	}
 
 exit:
Index: apps/app_authenticate.c
===================================================================
--- apps/app_authenticate.c	(revision 403615)
+++ apps/app_authenticate.c	(working copy)
@@ -161,8 +161,35 @@
    
 	/* Start asking for password */
 	for (retries = 0; retries < 3; retries++) {
-		if ((res = ast_app_getdata(chan, prompt, passwd, maxdigits, 0)) < 0)
-			break;
+		if (ast_using_saysentence()) {
+			char temp[40];
+			if (!strcmp(prompt,"agent-pass")) {
+				res = ast_say_sentence(chan, "#", "<agent-pass>.");
+			} else if (!strcmp(prompt, "auth-incorrect")) { 
+				res = ast_say_sentence(chan, "#", "<auth-incorrect>.");
+			} else {
+				res = ast_say_sentence(chan, "#", "%z.", prompt);
+			}
+			
+			if (res == '#' || res < 0) {
+				temp[0] = 0;
+			} else if (res == 0) {  /* played out and no input still */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+	
+				res = ast_readstring(chan, temp, sizeof(temp) - 1, to, fto, "#");
+	
+			} else { /* input other than # */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+				temp[0] = res;
+				temp[1] = 0;
+				res = ast_readstring(chan, temp+1, sizeof(temp) - 2, to, fto, "#");
+			}
+		} else {
+			if ((res = ast_app_getdata(chan, prompt, passwd, maxdigits, 0)) < 0)
+				break;
+		}
 
 		res = 0;
 
@@ -253,11 +280,19 @@
 			ast_channel_accountcode_set(chan, passwd);
 			ast_channel_unlock(chan);
 		}
-		if (!(res = ast_streamfile(chan, "auth-thankyou", ast_channel_language(chan))))
-			res = ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<auth-thankyou>.");
+		} else {
+			if (!(res = ast_streamfile(chan, "auth-thankyou", ast_channel_language(chan))))
+				res = ast_waitstream(chan, "");
+		}
 	} else {
-		if (!ast_streamfile(chan, "vm-goodbye", ast_channel_language(chan)))
-			res = ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<vm-goodbye>.");
+		} else {
+			if (!ast_streamfile(chan, "vm-goodbye", ast_channel_language(chan)))
+				res = ast_waitstream(chan, "");
+		}
 		res = -1;
 	}
 
Index: apps/app_confbridge.c
===================================================================
--- apps/app_confbridge.c	(revision 403615)
+++ apps/app_confbridge.c	(working copy)
@@ -1,4 +1,5 @@
 /*
+
  * Asterisk -- An open source telephony toolkit.
  *
  * Copyright (C) 2007-2008, Digium, Inc.
@@ -319,6 +320,9 @@
 	CONF_RECORD_STOP,
 };
 
+static int play_sound_pre(struct confbridge_conference *conference);
+static int play_sound_post(struct confbridge_conference *conference);
+
 /*! \brief Container to hold all conference bridges in progress */
 struct ao2_container *conference_bridges;
 
@@ -766,34 +770,58 @@
 	} else if (conference->activeusers == 2) {
 		if (user) {
 			/* Eep, there is one other person */
-			if (ast_stream_and_wait(user->chan,
-				only_one,
-				"")) {
-				return -1;
+			if (ast_using_saysentence()) {
+				if (ast_say_sentence(user->chan, "", "<conf-onlyone>")) {
+					return -1;
+				}
+			} else {
+				if (ast_stream_and_wait(user->chan,
+					only_one,
+					"")) {
+					return -1;
+				}
 			}
 		} else {
-			play_sound_file(conference, only_one);
+			if (ast_using_saysentence()) {
+				play_sound_pre(conference);
+				ast_say_sentence(conference->playback_chan, "", "<conf-onlyone>");
+				play_sound_post(conference);
+			} else {
+				play_sound_file(conference, only_one);
+			}
 		}
 	} else {
 		/* Alas multiple others in here */
 		if (user) {
-			if (ast_stream_and_wait(user->chan,
-				there_are,
-				"")) {
-				return -1;
+			if (ast_using_saysentence()) {
+				if (ast_say_sentence(user->chan, "", "<conf-thereare>%n<conf-otherinparty>", conference->activeusers - 1)) {
+					return -1;
+				}
+			} else {
+				if (ast_stream_and_wait(user->chan,
+					there_are,
+					"")) {
+					return -1;
+				}
+				if (ast_say_number(user->chan, conference->activeusers - 1, "", ast_channel_language(user->chan), NULL)) {
+					return -1;
+				}
+				if (ast_stream_and_wait(user->chan,
+					other_in_party,
+					"")) {
+					return -1;
+				}
 			}
-			if (ast_say_number(user->chan, conference->activeusers - 1, "", ast_channel_language(user->chan), NULL)) {
-				return -1;
+		} else if (sound_file_exists(there_are) && sound_file_exists(other_in_party)) {
+			if (ast_using_saysentence()) {
+				play_sound_pre(conference);
+				ast_say_sentence(conference->playback_chan, "", "<conf-thereare>%n<conf-otherinparty>", conference->activeusers - 1);
+				play_sound_post(conference);
+			} else {
+				play_sound_file(conference, there_are);
+				play_sound_number(conference, conference->activeusers - 1);
+				play_sound_file(conference, other_in_party);
 			}
-			if (ast_stream_and_wait(user->chan,
-				other_in_party,
-				"")) {
-				return -1;
-			}
-		} else if (sound_file_exists(there_are) && sound_file_exists(other_in_party)) {
-			play_sound_file(conference, there_are);
-			play_sound_number(conference, conference->activeusers - 1);
-			play_sound_file(conference, other_in_party);
 		}
 	}
 	return 0;
@@ -1385,6 +1413,31 @@
 	return 0;
 }
 
+static int play_sound_pre(struct confbridge_conference *conference)
+{
+	ast_mutex_lock(&conference->playback_lock);
+	if (!conference->playback_chan && alloc_playback_chan(conference)) {
+		ast_mutex_unlock(&conference->playback_lock);
+		return -1;
+	}
+	if (conf_announce_channel_push(conference->playback_chan)) {
+		ast_mutex_unlock(&conference->playback_lock);
+		return -1;
+	}
+	return 0;
+}
+
+static int play_sound_post(struct confbridge_conference *conference)
+{
+	ast_debug(1, "Departing announcer channel '%s' from conference bridge '%s'\n",
+		ast_channel_name(conference->playback_chan), conference->name);
+	conf_announce_channel_depart(conference->playback_chan);
+
+	ast_mutex_unlock(&conference->playback_lock);
+
+	return 0;
+}
+
 static int play_sound_helper(struct confbridge_conference *conference, const char *filename, int say_number)
 {
 	/* Do not waste resources trying to play files that do not exist */
@@ -1482,10 +1535,14 @@
 				return 0;
 			}
 		}
-		ast_streamfile(chan,
-			conf_get_sound(CONF_SOUND_INVALID_PIN, user->b_profile.sounds),
-			ast_channel_language(chan));
-		res = ast_waitstream(chan, AST_DIGIT_ANY);
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-invalid-pin>");
+		} else {
+			ast_streamfile(chan,
+				conf_get_sound(CONF_SOUND_INVALID_PIN, user->b_profile.sounds),
+				ast_channel_language(chan));
+			res = ast_waitstream(chan, AST_DIGIT_ANY);
+		}
 		if (res > 0) {
 			/* Account for digit already read during ivalid pin playback
 			 * resetting pin buf. */
@@ -1721,20 +1778,35 @@
 	/* if this user has a intro, play it before entering */
 	if (!ast_strlen_zero(user.name_rec_location)) {
 		ast_autoservice_start(chan);
-		play_sound_file(conference, user.name_rec_location);
-		play_sound_file(conference,
-			conf_get_sound(CONF_SOUND_HAS_JOINED, user.b_profile.sounds));
+		if (ast_using_saysentence()) {
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "%z<conf-hasjoin>", user.name_rec_location);
+			play_sound_post(conference);
+		} else {
+			play_sound_file(conference, user.name_rec_location);
+			play_sound_file(conference,
+				conf_get_sound(CONF_SOUND_HAS_JOINED, user.b_profile.sounds));
+		}
 		ast_autoservice_stop(chan);
 	}
 
 	/* Play the Join sound to both the conference and the user entering. */
 	if (!quiet) {
-		const char *join_sound = conf_get_sound(CONF_SOUND_JOIN, user.b_profile.sounds);
-
-		ast_stream_and_wait(chan, join_sound, "");
-		ast_autoservice_start(chan);
-		play_sound_file(conference, join_sound);
-		ast_autoservice_stop(chan);
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<confbridge-join>");
+			ast_autoservice_start(chan);
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<confbridge-join>");
+			play_sound_post(conference);
+			ast_autoservice_stop(chan);
+		} else {
+			const char *join_sound = conf_get_sound(CONF_SOUND_JOIN, user.b_profile.sounds);
+	
+			ast_stream_and_wait(chan, join_sound, "");
+			ast_autoservice_start(chan);
+			play_sound_file(conference, join_sound);
+			ast_autoservice_stop(chan);
+		}
 	}
 
 	/* See if we need to automatically set this user as a video source or not */
@@ -1770,17 +1842,29 @@
 	/* if this user has a intro, play it when leaving */
 	if (!quiet && !ast_strlen_zero(user.name_rec_location)) {
 		ast_autoservice_start(chan);
-		play_sound_file(conference, user.name_rec_location);
-		play_sound_file(conference,
-			conf_get_sound(CONF_SOUND_HAS_LEFT, user.b_profile.sounds));
+		if (ast_using_saysentence()) {
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "%z<conf-hasleft>", user.name_rec_location);
+			play_sound_post(conference);
+		} else {
+			play_sound_file(conference, user.name_rec_location);
+			play_sound_file(conference,
+				conf_get_sound(CONF_SOUND_HAS_LEFT, user.b_profile.sounds));
+		}
 		ast_autoservice_stop(chan);
 	}
 
 	/* play the leave sound */
 	if (!quiet) {
-		const char *leave_sound = conf_get_sound(CONF_SOUND_LEAVE, user.b_profile.sounds);
 		ast_autoservice_start(chan);
-		play_sound_file(conference, leave_sound);
+		if (ast_using_saysentence()) {
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<confbridge-leave>");
+			play_sound_post(conference);
+		} else {
+			const char *leave_sound = conf_get_sound(CONF_SOUND_LEAVE, user.b_profile.sounds);
+			play_sound_file(conference, leave_sound);
+		}
 		ast_autoservice_stop(chan);
 	}
 
@@ -1790,9 +1874,13 @@
 
 	/* If the user was kicked from the conference play back the audio prompt for it */
 	if (!quiet && user.kicked) {
-		res = ast_stream_and_wait(chan,
-			conf_get_sound(CONF_SOUND_KICKED, user.b_profile.sounds),
-			"");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-kicked>");
+		} else {
+			res = ast_stream_and_wait(chan,
+				conf_get_sound(CONF_SOUND_KICKED, user.b_profile.sounds),
+				"");
+		}
 	}
 
 	/* Restore volume adjustments to previous values in case they were changed */
@@ -1866,17 +1954,36 @@
 
 	ao2_unlock(conference);
 
-	sound_to_play = conf_get_sound((mute ? CONF_SOUND_PARTICIPANTS_MUTED : CONF_SOUND_PARTICIPANTS_UNMUTED),
-		user->b_profile.sounds);
-
 	/* The host needs to hear it seperately, as they don't get the audio from play_sound_helper */
-	ast_stream_and_wait(user->chan, sound_to_play, "");
+	if (ast_using_saysentence()) {
+		if (mute) {
+			ast_say_sentence(user->chan, "", "<conf-now-muted>");
+			/* Announce to the group that all participants are muted */
+			ast_autoservice_start(user->chan);
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<conf-now-muted>");
+			play_sound_post(conference);
+			ast_autoservice_stop(user->chan);
+		} else {
+			ast_say_sentence(user->chan, "", "<conf-now-unmuted>");
+			/* Announce to the group that all participants are muted */
+			ast_autoservice_start(user->chan);
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<conf-now-muted>");
+			play_sound_post(conference);
+			ast_autoservice_stop(user->chan);
+		}
+	} else {
+		sound_to_play = conf_get_sound((mute ? CONF_SOUND_PARTICIPANTS_MUTED : CONF_SOUND_PARTICIPANTS_UNMUTED),
+			user->b_profile.sounds);
+	
+		ast_stream_and_wait(user->chan, sound_to_play, "");
+		/* Announce to the group that all participants are muted */
+		ast_autoservice_start(user->chan);
+		play_sound_helper(conference, sound_to_play, 0);
+		ast_autoservice_stop(user->chan);
+	}
 
-	/* Announce to the group that all participants are muted */
-	ast_autoservice_start(user->chan);
-	play_sound_helper(conference, sound_to_play, 0);
-	ast_autoservice_stop(user->chan);
-
 	return 0;
 }
 
@@ -1886,9 +1993,22 @@
 	char *file = NULL;
 
 	while ((file = strsep(&file_copy, "&"))) {
-		if (ast_stream_and_wait(bridge_channel->chan, file, "")) {
-			ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
-			return -1;
+		if (ast_using_saysentence()) {
+			ast_say_sentence(bridge_channel->chan, "", "%z", file); /* This comes in from the config file and is embedded in the menu parsed stuff. Ugh! */
+										/* The reason I say UGH is because this kind of configurable menu requires fixed sound
+										  files to tell the user what to press;  Otherwise, the options have to be published to users;
+										  since the options are a restricted set anyway, why play around? Just implement them all anyway,
+										  and fix them in place, and  let the user use the documentation. The only place I can imagine this
+										  such configurable menus useful is the case where you have some old conference system you want
+										  to replace, and not have to teach users a new menu structure.... I say, let them relearn */
+										  /* SO, Now, unless some other application uses this file in an ast_say_sentence() call, the
+										     utterance will not be picked up scans for inclusion in translation templates. They will have
+   										     to be hand entered. */
+		} else {
+			if (ast_stream_and_wait(bridge_channel->chan, file, "")) {
+				ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
+				return -1;
+			}
 		}
 	}
 	return 0;
@@ -1910,13 +2030,18 @@
 	char *file = NULL;
 
 	while ((file = strsep(&file_copy, "&"))) {
-		if (ast_streamfile(bridge_channel->chan, file, ast_channel_language(bridge_channel->chan))) {
-			ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
-			return -1;
+		if (ast_using_saysentence()) {
+			digit = ast_say_sentence(bridge_channel->chan, AST_DIGIT_ANY, "%z", file);
+		} else {
+			if (ast_streamfile(bridge_channel->chan, file, ast_channel_language(bridge_channel->chan))) {
+				ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
+				return -1;
+			}
+			digit = ast_waitstream(bridge_channel->chan, AST_DIGIT_ANY);
 		}
 
 		/* now wait for more digits. */
-		if (!(digit = ast_waitstream(bridge_channel->chan, AST_DIGIT_ANY))) {
+		if (!digit) {
 			/* streaming finished and no DTMF was entered */
 			continue;
 		} else if (digit == -1) {
@@ -1930,7 +2055,8 @@
 		/* streaming finished on all files and no DTMF was entered */
 		return -1;
 	}
-	ast_stopstream(bridge_channel->chan);
+	if (!ast_using_saysentence())
+		ast_stopstream(bridge_channel->chan);
 
 	/* If we get here, then DTMF has been entered, This means no
 	 * additional prompts should be played for this menu entry */
Index: apps/app_dial.c
===================================================================
--- apps/app_dial.c	(revision 403615)
+++ apps/app_dial.c	(working copy)
@@ -1749,8 +1749,13 @@
 	for (loopcount = 0; loopcount < 3; loopcount++) {
 		if (res2 && loopcount == 0) /* error in ast_autoservice_start() */
 			break;
-		if (!res2) /* on timeout, play the message again */
-			res2 = ast_play_and_wait(peer, "priv-callpending");
+		if (!res2) { /* on timeout, play the message again */
+			if (ast_using_saysentence()) {
+				res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<priv-callpending>");
+			} else {
+				res2 = ast_play_and_wait(peer, "priv-callpending");
+			}
+		}
 		if (!valid_priv_reply(opts, res2))
 			res2 = 0;
 		/* priv-callpending script:
@@ -1763,10 +1768,20 @@
 		/* now get input from the called party, as to their choice */
 		if (!res2) {
 			/* XXX can we have both, or they are mutually exclusive ? */
-			if (ast_test_flag64(opts, OPT_PRIVACY))
-				res2 = ast_play_and_wait(peer, "priv-callee-options");
-			if (ast_test_flag64(opts, OPT_SCREENING))
-				res2 = ast_play_and_wait(peer, "screen-callee-options");
+			if (ast_test_flag64(opts, OPT_PRIVACY)) {
+				if (ast_using_saysentence()) {
+					res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<priv-callee-options>");
+				} else {
+					res2 = ast_play_and_wait(peer, "priv-callee-options");
+				}
+			}
+			if (ast_test_flag64(opts, OPT_SCREENING)) {
+				if (ast_using_saysentence()) {
+					res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<screen-callee-options>");
+				} else {
+					res2 = ast_play_and_wait(peer, "screen-callee-options");
+				}
+			}
 		}
 
 		/*! \page DialPrivacy Dial Privacy scripts
@@ -1788,7 +1803,11 @@
 		if (valid_priv_reply(opts, res2))
 			break;
 		/* invalid option */
-		res2 = ast_play_and_wait(peer, "vm-sorry");
+		if (ast_using_saysentence()) {
+			res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<vm-sorry>");
+		} else {
+			res2 = ast_play_and_wait(peer, "vm-sorry");
+		}
 	}
 
 	if (ast_test_flag64(opts, OPT_MUSICBACK)) {
@@ -1948,8 +1967,12 @@
 					ast_verb(3, "Successfully deleted %s intro file\n", pa->privintro);
 				return -1;
 			}
-			if (!ast_streamfile(chan, "vm-dialout", ast_channel_language(chan)) )
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<vm-dialout>");
+			} else {
+				if (!ast_streamfile(chan, "vm-dialout", ast_channel_language(chan)) )
+					ast_waitstream(chan, "");
+			}
 		}
 	}
 	return 1; /* success */
Index: include/asterisk/file.h
===================================================================
--- include/asterisk/file.h	(revision 403615)
+++ include/asterisk/file.h	(working copy)
@@ -50,6 +50,18 @@
 
 #define SEEK_FORCECUR	10
 
+
+/*!
+ * \brief evaluates the format string, and gets a list of files to play,
+ *  This function should be used for all speech communication from Asterisk
+ *  to a user.
+ * \param chan channel to send sound files to 
+ * \param ecodes a string containing characters 0 thru 9, or * or #, or any combination thereof, that a user can press to terminate the playing.
+ * \param format -- a string containing the expressions to evaluate. See the SayScript guide.
+ * \param the arguments follow that are necessary to match the % constructs in the format string (kinda along the lines of printf).
+ */
+int ast_say_sentence(struct ast_channel *chan, const char *ecodes, const char *format, ...);
+
 /*! The type of event associated with a ast_waitstream_fr_cb invocation */
 enum ast_waitstream_fr_cb_values {
 	AST_WAITSTREAM_CB_REWIND = 1,
@@ -76,6 +88,7 @@
  */
 int ast_streamfile(struct ast_channel *c, const char *filename, const char *preflang);
 
+
 /*!
  * \brief stream file until digit
  * If the file name is non-empty, try to play it.
Index: include/asterisk.h
===================================================================
--- include/asterisk.h	(revision 403615)
+++ include/asterisk.h	(working copy)
@@ -79,6 +79,7 @@
 int ast_set_priority(int);			/*!< Provided by asterisk.c */
 int ast_fd_init(void);				/*!< Provided by astfd.c */
 int ast_pbx_init(void);				/*!< Provided by pbx.c */
+int ast_using_saysentence(void);                /*!< Provided by asterisk.c */
 
 /*!
  * \brief Register a function to be executed before Asterisk exits.
