Index: contrib/asterisk-ng-doxygen
===================================================================
--- contrib/asterisk-ng-doxygen	(revision 404606)
+++ contrib/asterisk-ng-doxygen	(working copy)
@@ -1,14 +1,14 @@
-# Doxyfile 1.7.1
+# Doxyfile 1.8.1.2
 
 # This file describes the settings to be used by the documentation system
-# doxygen (www.doxygen.org) for a project
+# doxygen (www.doxygen.org) for a project.
 #
-# All text after a hash (#) is considered a comment and will be ignored
+# All text after a hash (#) is considered a comment and will be ignored.
 # The format is:
 #       TAG = value [value, ...]
 # For lists items can also be appended using:
 #       TAG += value [value, ...]
-# Values that contain spaces should be placed between quotes (" ")
+# Values that contain spaces should be placed between quotes (" ").
 
 #---------------------------------------------------------------------------
 # Project related configuration options
@@ -22,8 +22,9 @@
 
 DOXYFILE_ENCODING      = UTF-8
 
-# The PROJECT_NAME tag is a single word (or a sequence of words surrounded
-# by quotes) that should identify the project.
+# The PROJECT_NAME tag is a single word (or sequence of words) that should
+# identify the project. Note that if you do not use Doxywizard you need
+# to put quotes around the project name if it contains spaces.
 
 PROJECT_NAME           = "Asterisk - The Open Source Telephony Project"
 
@@ -31,8 +32,21 @@
 # This could be handy for archiving the generated documentation or
 # if some version control system is used.
 
-PROJECT_NUMBER         =
+PROJECT_NUMBER         = SVN-trunk-r402607M
 
+# Using the PROJECT_BRIEF tag one can provide an optional one line description
+# for a project that appears at the top of each page and should give viewer
+# a quick idea about the purpose of the project. Keep the description short.
+
+PROJECT_BRIEF          =
+
+# With the PROJECT_LOGO tag one can specify an logo or icon that is
+# included in the documentation. The maximum height of the logo should not
+# exceed 55 pixels and the maximum width should not exceed 200 pixels.
+# Doxygen will copy the logo to the output directory.
+
+PROJECT_LOGO           =
+
 # The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)
 # base path where the generated documentation will be put.
 # If a relative path is entered, it will be relative to the location
@@ -57,7 +71,7 @@
 # Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,
 # Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English
 # messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,
-# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrilic, Slovak,
+# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak,
 # Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.
 
 OUTPUT_LANGUAGE        = English
@@ -126,7 +140,7 @@
 STRIP_FROM_INC_PATH    =
 
 # If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter
-# (but less readable) file names. This can be useful is your file systems
+# (but less readable) file names. This can be useful if your file system
 # doesn't support long names like on DOS, Mac, or CD-ROM.
 
 SHORT_NAMES            = NO
@@ -182,6 +196,13 @@
 ALIASES                = "extref=\xrefitem extref \"ExtRef\" \"External references\"" \
                          "AsteriskTrunkWarning=\note The information contained on this page may be out of date.  To make sure you get the most current information, please make sure that you are using the documentation generated from Asterisk trunk."
 
+# This tag can be used to specify a number of word-keyword mappings (TCL only).
+# A mapping has the form "name=value". For example adding
+# "class=itcl::class" will allow you to use the command class in the
+# itcl::class meaning.
+
+TCL_SUBST              =
+
 # Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C
 # sources only. Doxygen will then generate output that is more tailored for C.
 # For instance, some of the names that are used will be different. The list
@@ -220,11 +241,20 @@
 
 EXTENSION_MAPPING      =
 
+# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all
+# comments according to the Markdown format, which allows for more readable
+# documentation. See http://daringfireball.net/projects/markdown/ for details.
+# The output of markdown processing is further processed by doxygen, so you
+# can mix doxygen, HTML, and XML commands with Markdown formatting.
+# Disable only in case of backward compatibilities issues.
+
+MARKDOWN_SUPPORT       = YES
+
 # If you use STL classes (i.e. std::string, std::vector, etc.) but do not want
 # to include (a tag file for) the STL sources as input, then you should
 # set this tag to YES in order to let doxygen match functions declarations and
 # definitions whose arguments contain STL classes (e.g. func(std::string); v.s.
-# func(std::string) {}). This also make the inheritance and collaboration
+# func(std::string) {}). This also makes the inheritance and collaboration
 # diagrams that involve STL classes more complete and accurate.
 
 BUILTIN_STL_SUPPORT    = NO
@@ -242,7 +272,7 @@
 
 # For Microsoft's IDL there are propget and propput attributes to indicate getter
 # and setter methods for a property. Setting this option to YES (the default)
-# will make doxygen to replace the get and set methods by a property in the
+# will make doxygen replace the get and set methods by a property in the
 # documentation. This will only work if the methods are indeed getting or
 # setting a simple type. If this is not the case, or you want to show the
 # methods anyway, you should set this option to NO.
@@ -264,6 +294,22 @@
 
 SUBGROUPING            = YES
 
+# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and
+# unions are shown inside the group in which they are included (e.g. using
+# @ingroup) instead of on a separate page (for HTML and Man pages) or
+# section (for LaTeX and RTF).
+
+INLINE_GROUPED_CLASSES = NO
+
+# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and
+# unions with only public data fields will be shown inline in the documentation
+# of the scope in which they are defined (i.e. file, namespace, or group
+# documentation), provided this scope is documented. If set to NO (the default),
+# structs, classes, and unions are shown on a separate page (for HTML and Man
+# pages) or section (for LaTeX and RTF).
+
+INLINE_SIMPLE_STRUCTS  = NO
+
 # When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum
 # is documented as struct, union, or enum with the name of the typedef. So
 # typedef struct TypeS {} TypeT, will appear in the documentation as a struct
@@ -280,16 +326,27 @@
 # For small to medium size projects (<1000 input files) the default value is
 # probably good enough. For larger projects a too small cache size can cause
 # doxygen to be busy swapping symbols to and from disk most of the time
-# causing a significant performance penality.
+# causing a significant performance penalty.
 # If the system has enough physical memory increasing the cache will improve the
 # performance by keeping more symbols in memory. Note that the value works on
-# a logarithmic scale so increasing the size by one will rougly double the
+# a logarithmic scale so increasing the size by one will roughly double the
 # memory usage. The cache size is given by this formula:
 # 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,
-# corresponding to a cache size of 2^16 = 65536 symbols
+# corresponding to a cache size of 2^16 = 65536 symbols.
 
 SYMBOL_CACHE_SIZE      = 0
 
+# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be
+# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given
+# their name and scope. Since this can be an expensive process and often the
+# same symbol appear multiple times in the code, doxygen keeps a cache of
+# pre-resolved symbols. If the cache is too small doxygen will become slower.
+# If the cache is too large, memory is wasted. The cache size is given by this
+# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0,
+# corresponding to a cache size of 2^16 = 65536 symbols.
+
+LOOKUP_CACHE_SIZE      = 0
+
 #---------------------------------------------------------------------------
 # Build related configuration options
 #---------------------------------------------------------------------------
@@ -306,6 +363,10 @@
 
 EXTRACT_PRIVATE        = NO
 
+# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal scope will be included in the documentation.
+
+EXTRACT_PACKAGE        = NO
+
 # If the EXTRACT_STATIC tag is set to YES all static members of a file
 # will be included in the documentation.
 
@@ -328,7 +389,7 @@
 # extracted and appear in the documentation as a namespace called
 # 'anonymous_namespace{file}', where file will be replaced with the base
 # name of the file that contains the anonymous namespace. By default
-# anonymous namespace are hidden.
+# anonymous namespaces are hidden.
 
 EXTRACT_ANON_NSPACES   = NO
 
@@ -439,6 +500,15 @@
 
 SORT_BY_SCOPE_NAME     = NO
 
+# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to
+# do proper type resolution of all parameters of a function it will reject a
+# match between the prototype and the implementation of a member function even
+# if there is only one candidate or it is obvious which candidate to choose
+# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen
+# will still accept a match between prototype and implementation in such cases.
+
+STRICT_PROTO_MATCHING  = NO
+
 # The GENERATE_TODOLIST tag can be used to enable (YES) or
 # disable (NO) the todo list. This list is created by putting \todo
 # commands in the documentation.
@@ -469,10 +539,10 @@
 ENABLED_SECTIONS       =
 
 # The MAX_INITIALIZER_LINES tag determines the maximum number of lines
-# the initial value of a variable or define consists of for it to appear in
+# the initial value of a variable or macro consists of for it to appear in
 # the documentation. If the initializer consists of more lines than specified
 # here it will be hidden. Use a value of 0 to hide initializers completely.
-# The appearance of the initializer of individual variables and defines in the
+# The appearance of the initializer of individual variables and macros in the
 # documentation can be controlled using \showinitializer or \hideinitializer
 # command in the documentation regardless of this setting.
 
@@ -484,12 +554,6 @@
 
 SHOW_USED_FILES        = YES
 
-# If the sources in your project are distributed over multiple directories
-# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy
-# in the documentation. The default is NO.
-
-SHOW_DIRECTORIES       = YES
-
 # Set the SHOW_FILES tag to NO to disable the generation of the Files page.
 # This will remove the Files entry from the Quick Index and from the
 # Folder Tree View (if specified). The default is YES.
@@ -515,13 +579,23 @@
 
 # The LAYOUT_FILE tag can be used to specify a layout file which will be parsed
 # by doxygen. The layout file controls the global structure of the generated
-# output files in an output format independent way. The create the layout file
+# output files in an output format independent way. To create the layout file
 # that represents doxygen's defaults, run doxygen with the -l option.
 # You can optionally specify a file name after the option, if omitted
 # DoxygenLayout.xml will be used as the name of the layout file.
 
 LAYOUT_FILE            =
 
+# The CITE_BIB_FILES tag can be used to specify one or more bib files
+# containing the references data. This must be a list of .bib files. The
+# .bib extension is automatically appended if omitted. Using this command
+# requires the bibtex tool to be installed. See also
+# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style
+# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this
+# feature you need bibtex and perl available in the search path.
+
+CITE_BIB_FILES         =
+
 #---------------------------------------------------------------------------
 # configuration options related to warning and progress messages
 #---------------------------------------------------------------------------
@@ -550,7 +624,7 @@
 
 WARN_IF_DOC_ERROR      = NO
 
-# This WARN_NO_PARAMDOC option can be abled to get warnings for
+# The WARN_NO_PARAMDOC option can be enabled to get warnings for
 # functions that are documented, but have no documentation for their parameters
 # or return value. If set to NO (the default) doxygen will only warn about
 # wrong or incomplete parameter documentation, but not about the absence of
@@ -596,8 +670,9 @@
 # FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp
 # and *.h) to filter out the source-files in the directories. If left
 # blank the following patterns are tested:
-# *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx
-# *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py *.f90
+# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh
+# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py
+# *.f90 *.f *.for *.vhd *.vhdl
 
 FILE_PATTERNS          = *.c \
                          *.h \
@@ -609,17 +684,19 @@
 
 RECURSIVE              = yes
 
-# The EXCLUDE tag can be used to specify files and/or directories that should
+# The EXCLUDE tag can be used to specify files and/or directories that should be
 # excluded from the INPUT source files. This way you can easily exclude a
 # subdirectory from a directory tree whose root is specified with the INPUT tag.
+# Note that relative paths are relative to the directory from which doxygen is
+# run.
 
 EXCLUDE                = doc/api \
                          menuselect \
                          res/pjproject \
                          addons/ooh323c/src
 
-# The EXCLUDE_SYMLINKS tag can be used select whether or not files or
-# directories that are symbolic links (a Unix filesystem feature) are excluded
+# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or
+# directories that are symbolic links (a Unix file system feature) are excluded
 # from the input.
 
 EXCLUDE_SYMLINKS       = YES
@@ -688,8 +765,8 @@
 # filter if there is a match.
 # The filters are a list of the form:
 # pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further
-# info on how filters are used. If FILTER_PATTERNS is empty, INPUT_FILTER
-# is applied to all files.
+# info on how filters are used. If FILTER_PATTERNS is empty or if
+# non of the patterns match the file name, INPUT_FILTER is applied.
 
 FILTER_PATTERNS        =
 
@@ -699,6 +776,14 @@
 
 FILTER_SOURCE_FILES    = NO
 
+# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file
+# pattern. A pattern will override the setting for FILTER_PATTERN (if any)
+# and it is also possible to disable source filtering for a specific pattern
+# using *.ext= (so without naming a filter). This option only has effect when
+# FILTER_SOURCE_FILES is enabled.
+
+FILTER_SOURCE_PATTERNS =
+
 #---------------------------------------------------------------------------
 # configuration options related to source browsing
 #---------------------------------------------------------------------------
@@ -717,7 +802,7 @@
 
 # Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct
 # doxygen to hide any special comment blocks from generated source code
-# fragments. Normal C and C++ comments will always remain visible.
+# fragments. Normal C, C++ and Fortran comments will always remain visible.
 
 STRIP_CODE_COMMENTS    = NO
 
@@ -801,7 +886,14 @@
 
 # The HTML_HEADER tag can be used to specify a personal HTML header for
 # each generated HTML page. If it is left blank doxygen will generate a
-# standard header.
+# standard header. Note that when using a custom header you are responsible
+#  for the proper inclusion of any scripts and style sheets that doxygen
+# needs, which is dependent on the configuration options used.
+# It is advised to generate a default header using "doxygen -w html
+# header.html footer.html stylesheet.css YourConfigFile" and then modify
+# that header. Note that the header is subject to change so you typically
+# have to redo this when upgrading to a newer version of doxygen or when
+# changing the value of configuration settings such as GENERATE_TREEVIEW!
 
 HTML_HEADER            =
 
@@ -816,12 +908,21 @@
 # fine-tune the look of the HTML output. If the tag is left blank doxygen
 # will generate a default style sheet. Note that doxygen will try to copy
 # the style sheet file to the HTML output directory, so don't put your own
-# stylesheet in the HTML output directory as well, or it will be erased!
+# style sheet in the HTML output directory as well, or it will be erased!
 
 HTML_STYLESHEET        =
 
+# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or
+# other source files which should be copied to the HTML output directory. Note
+# that these files will be copied to the base HTML output directory. Use the
+# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these
+# files. In the HTML_STYLESHEET file, use the file name only. Also note that
+# the files will be copied as-is; there are no commands or markers available.
+
+HTML_EXTRA_FILES       =
+
 # The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.
-# Doxygen will adjust the colors in the stylesheet and background images
+# Doxygen will adjust the colors in the style sheet and background images
 # according to this color. Hue is specified as an angle on a colorwheel,
 # see http://en.wikipedia.org/wiki/Hue for more information.
 # For instance the value 0 represents red, 60 is yellow, 120 is green,
@@ -851,20 +952,23 @@
 
 HTML_TIMESTAMP         = YES
 
-# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes,
-# files or namespaces will be aligned in HTML using tables. If set to
-# NO a bullet list will be used.
-
-HTML_ALIGN_MEMBERS     = YES
-
 # If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML
 # documentation will contain sections that can be hidden and shown after the
-# page has loaded. For this to work a browser that supports
-# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox
-# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).
+# page has loaded.
 
 HTML_DYNAMIC_SECTIONS  = NO
 
+# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of
+# entries shown in the various tree structured indices initially; the user
+# can expand and collapse entries dynamically later on. Doxygen will expand
+# the tree to such a level that at most the specified number of entries are
+# visible (unless a fully collapsed tree already exceeds this amount).
+# So setting the number of entries 1 will produce a full collapsed tree by
+# default. 0 is a special value representing an infinite number of entries
+# and will result in a full expanded tree by default.
+
+HTML_INDEX_NUM_ENTRIES = 100
+
 # If the GENERATE_DOCSET tag is set to YES, additional index files
 # will be generated that can be used as input for Apple's Xcode 3
 # integrated development environment, introduced with OSX 10.5 (Leopard).
@@ -1016,17 +1120,14 @@
 
 ECLIPSE_DOC_ID         = org.doxygen.Project
 
-# The DISABLE_INDEX tag can be used to turn on/off the condensed index at
-# top of each HTML page. The value NO (the default) enables the index and
-# the value YES disables it.
+# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs)
+# at top of each HTML page. The value NO (the default) enables the index and
+# the value YES disables it. Since the tabs have the same information as the
+# navigation tree you can set this option to NO if you already set
+# GENERATE_TREEVIEW to YES.
 
 DISABLE_INDEX          = NO
 
-# This tag can be used to set the number of enum values (range [1..20])
-# that doxygen will group on one line in the generated HTML documentation.
-
-ENUM_VALUES_PER_LINE   = 4
-
 # The GENERATE_TREEVIEW tag is used to specify whether a tree-like index
 # structure should be generated to display hierarchical information.
 # If the tag value is set to YES, a side panel will be generated
@@ -1034,13 +1135,17 @@
 # is generated for HTML Help). For this to work a browser that supports
 # JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).
 # Windows users are probably better off using the HTML help feature.
+# Since the tree basically has the same information as the tab index you
+# could consider to set DISABLE_INDEX to NO when enabling this option.
 
 GENERATE_TREEVIEW      = NO
 
-# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories,
-# and Class Hierarchy pages using a tree view instead of an ordered list.
+# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values
+# (range [0,1..20]) that doxygen will group on one line in the generated HTML
+# documentation. Note that a value of 0 will completely suppress the enum
+# values from appearing in the overview section.
 
-USE_INLINE_TREES       = NO
+ENUM_VALUES_PER_LINE   = 4
 
 # If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be
 # used to set the initial width (in pixels) of the frame in which the tree
@@ -1069,6 +1174,32 @@
 
 FORMULA_TRANSPARENT    = YES
 
+# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax
+# (see http://www.mathjax.org) which uses client side Javascript for the
+# rendering instead of using prerendered bitmaps. Use this if you do not
+# have LaTeX installed or if you want to formulas look prettier in the HTML
+# output. When enabled you may also need to install MathJax separately and
+# configure the path to it using the MATHJAX_RELPATH option.
+
+USE_MATHJAX            = NO
+
+# When MathJax is enabled you need to specify the location relative to the
+# HTML output directory using the MATHJAX_RELPATH option. The destination
+# directory should contain the MathJax.js script. For instance, if the mathjax
+# directory is located at the same level as the HTML output directory, then
+# MATHJAX_RELPATH should be ../mathjax. The default value points to
+# the MathJax Content Delivery Network so you can quickly see the result without
+# installing MathJax.
+# However, it is strongly recommended to install a local
+# copy of MathJax from http://www.mathjax.org before deployment.
+
+MATHJAX_RELPATH        = http://cdn.mathjax.org/mathjax/latest
+
+# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension
+# names that should be enabled during MathJax rendering.
+
+MATHJAX_EXTENSIONS     =
+
 # When the SEARCHENGINE tag is enabled doxygen will generate a search box
 # for the HTML output. The underlying search engine uses javascript
 # and DHTML and should work on any modern browser. Note that when using
@@ -1084,7 +1215,7 @@
 # using Javascript. Doxygen will generate the search PHP script and index
 # file to put on the web server. The advantage of the server
 # based approach is that it scales better to large projects and allows
-# full text search. The disadvances is that it is more difficult to setup
+# full text search. The disadvantages are that it is more difficult to setup
 # and does not have live searching capabilities.
 
 SERVER_BASED_SEARCH    = NO
@@ -1125,7 +1256,7 @@
 COMPACT_LATEX          = NO
 
 # The PAPER_TYPE tag can be used to set the paper type that is used
-# by the printer. Possible values are: a4, a4wide, letter, legal and
+# by the printer. Possible values are: a4, letter, legal and
 # executive. If left blank a4wide will be used.
 
 PAPER_TYPE             = letter
@@ -1142,6 +1273,13 @@
 
 LATEX_HEADER           =
 
+# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for
+# the generated latex document. The footer should contain everything after
+# the last chapter. If it is left blank doxygen will generate a
+# standard footer. Notice: only use this tag if you know what you are doing!
+
+LATEX_FOOTER           =
+
 # If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated
 # is prepared for conversion to pdf (using ps2pdf). The pdf file will
 # contain links (just like the HTML output) instead of page references
@@ -1175,6 +1313,12 @@
 
 LATEX_SOURCE_CODE      = NO
 
+# The LATEX_BIB_STYLE tag can be used to specify the style to use for the
+# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See
+# http://en.wikipedia.org/wiki/BibTeX for more info.
+
+LATEX_BIB_STYLE        = plain
+
 #---------------------------------------------------------------------------
 # configuration options related to the RTF output
 #---------------------------------------------------------------------------
@@ -1206,7 +1350,7 @@
 
 RTF_HYPERLINKS         = NO
 
-# Load stylesheet definitions from file. Syntax is similar to doxygen's
+# Load style sheet definitions from file. Syntax is similar to doxygen's
 # config file, i.e. a series of assignments. You only have to provide
 # replacements, missing definitions are set to their default value.
 
@@ -1351,7 +1495,7 @@
 EXPAND_ONLY_PREDEF     = YES
 
 # If the SEARCH_INCLUDES tag is set to YES (the default) the includes files
-# in the INCLUDE_PATH (see below) will be search if a #include is found.
+# pointed to by INCLUDE_PATH will be searched when a #include is found.
 
 SEARCH_INCLUDES        = YES
 
@@ -1384,7 +1528,8 @@
 # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then
 # this tag can be used to specify a list of macro names that should be expanded.
 # The macro definition that is found in the sources will be used.
-# Use the PREDEFINED tag if you want to use a different macro definition.
+# Use the PREDEFINED tag if you want to use a different macro definition that
+# overrules the definition found in the source code.
 
 EXPAND_AS_DEFINED      = AST_INLINE_API \
                          AST_DECLARE_STRING_FIELDS \
@@ -1433,10 +1578,9 @@
                          AST_OPTIONAL_API_ATTR
 
 # If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then
-# doxygen's preprocessor will remove all function-like macros that are alone
-# on a line, have an all uppercase name, and do not end with a semicolon. Such
-# function macros are typically used for boiler-plate code, and will confuse
-# the parser if not removed.
+# doxygen's preprocessor will remove all references to function-like macros
+# that are alone on a line, have an all uppercase name, and do not end with a
+# semicolon, because these will confuse the parser if not removed.
 
 SKIP_FUNCTION_MACROS   = YES
 
@@ -1444,22 +1588,18 @@
 # Configuration::additions related to external references
 #---------------------------------------------------------------------------
 
-# The TAGFILES option can be used to specify one or more tagfiles.
-# Optionally an initial location of the external documentation
-# can be added for each tagfile. The format of a tag file without
-# this location is as follows:
+# The TAGFILES option can be used to specify one or more tagfiles. For each
+# tag file the location of the external documentation should be added. The
+# format of a tag file without this location is as follows:
 #
 # TAGFILES = file1 file2 ...
 # Adding location for the tag files is done as follows:
 #
 # TAGFILES = file1=loc1 "file2 = loc2" ...
-# where "loc1" and "loc2" can be relative or absolute paths or
-# URLs. If a location is present for each tag, the installdox tool
-# does not have to be run to correct the links.
-# Note that each tag file must have a unique name
-# (where the name does NOT include the path)
-# If a tag file is not located in the directory in which doxygen
-# is run, you must also specify the path to the tagfile here.
+# where "loc1" and "loc2" can be relative or absolute paths
+# or URLs. Note that each tag file must have a unique name (where the name does
+# NOT include the path). If a tag file is not located in the directory in which
+# doxygen is run, you must also specify the path to the tagfile here.
 
 TAGFILES               =
 
@@ -1492,9 +1632,8 @@
 # If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will
 # generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base
 # or super classes. Setting the tag to NO turns the diagrams off. Note that
-# this option is superseded by the HAVE_DOT option below. This is only a
-# fallback. It is recommended to install and use dot, since it yields more
-# powerful graphs.
+# this option also works with HAVE_DOT disabled, but it is recommended to
+# install and use dot, since it yields more powerful graphs.
 
 CLASS_DIAGRAMS         = NO
 
@@ -1518,7 +1657,7 @@
 # toolkit from AT&T and Lucent Bell Labs. The other options in this section
 # have no effect if this option is set to NO (the default)
 
-HAVE_DOT               = NO
+HAVE_DOT               = YES
 
 # The DOT_NUM_THREADS specifies the number of dot invocations doxygen is
 # allowed to run in parallel. When set to 0 (the default) doxygen will
@@ -1528,14 +1667,12 @@
 
 DOT_NUM_THREADS        = 0
 
-# By default doxygen will write a font called FreeSans.ttf to the output
-# directory and reference it in all dot files that doxygen generates. This
-# font does not include all possible unicode characters however, so when you need
-# these (or just want a differently looking font) you can specify the font name
-# using DOT_FONTNAME. You need need to make sure dot is able to find the font,
-# which can be done by putting it in a standard location or by setting the
-# DOTFONTPATH environment variable or by setting DOT_FONTPATH to the directory
-# containing the font.
+# By default doxygen will use the Helvetica font for all dot files that
+# doxygen generates. When you want a differently looking font you can specify
+# the font name using DOT_FONTNAME. You need to make sure dot is able to find
+# the font, which can be done by putting it in a standard location or by setting
+# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the
+# directory containing the font.
 
 DOT_FONTNAME           = FreeSans.ttf
 
@@ -1544,17 +1681,16 @@
 
 DOT_FONTSIZE           = 10
 
-# By default doxygen will tell dot to use the output directory to look for the
-# FreeSans.ttf font (which doxygen will put there itself). If you specify a
-# different font using DOT_FONTNAME you can set the path where dot
-# can find it using this tag.
+# By default doxygen will tell dot to use the Helvetica font.
+# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to
+# set the path where dot can find it.
 
 DOT_FONTPATH           =
 
 # If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen
 # will generate a graph for each documented class showing the direct and
 # indirect inheritance relations. Setting this tag to YES will force the
-# the CLASS_DIAGRAMS tag to NO.
+# CLASS_DIAGRAMS tag to NO.
 
 CLASS_GRAPH            = YES
 
@@ -1576,6 +1712,15 @@
 
 UML_LOOK               = NO
 
+# If the UML_LOOK tag is enabled, the fields and methods are shown inside
+# the class node. If there are many fields or methods and many nodes the
+# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS
+# threshold limits the number of items for each type to make the size more
+# managable. Set this to 0 for no limit. Note that the threshold may be
+# exceeded by 50% before the limit is enforced.
+
+UML_LIMIT_NUM_FIELDS   = 10
+
 # If set to YES, the inheritance and collaboration graphs will show the
 # relations between templates and their instances.
 
@@ -1612,11 +1757,11 @@
 CALLER_GRAPH           = NO
 
 # If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen
-# will graphical hierarchy of all classes instead of a textual one.
+# will generate a graphical hierarchy of all classes instead of a textual one.
 
 GRAPHICAL_HIERARCHY    = YES
 
-# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES
+# If the DIRECTORY_GRAPH and HAVE_DOT tags are set to YES
 # then doxygen will show the dependencies a directory has on other directories
 # in a graphical way. The dependency relations are determined by the #include
 # relations between the files in the directories.
@@ -1624,11 +1769,22 @@
 DIRECTORY_GRAPH        = YES
 
 # The DOT_IMAGE_FORMAT tag can be used to set the image format of the images
-# generated by dot. Possible values are png, jpg, or gif
-# If left blank png will be used.
+# generated by dot. Possible values are svg, png, jpg, or gif.
+# If left blank png will be used. If you choose svg you need to set
+# HTML_FILE_EXTENSION to xhtml in order to make the SVG files
+# visible in IE 9+ (other browsers do not have this requirement).
 
 DOT_IMAGE_FORMAT       = png
 
+# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to
+# enable generation of interactive SVG images that allow zooming and panning.
+# Note that this requires a modern browser other than Internet Explorer.
+# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you
+# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files
+# visible. Older versions of IE do not have SVG support.
+
+INTERACTIVE_SVG        = NO
+
 # The tag DOT_PATH can be used to specify the path where the dot tool can be
 # found. If left blank, it is assumed the dot tool can be found in the path.
 
@@ -1640,6 +1796,12 @@
 
 DOTFILE_DIRS           =
 
+# The MSCFILE_DIRS tag can be used to specify one or more directories that
+# contain msc files that are included in the documentation (see the
+# \mscfile command).
+
+MSCFILE_DIRS           =
+
 # The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of
 # nodes that will be shown in the graph. If the number of nodes in a graph
 # becomes larger than this value, doxygen will truncate the graph, which is
Index: bridges/bridge_builtin_interval_features.c
===================================================================
--- bridges/bridge_builtin_interval_features.c	(revision 404606)
+++ bridges/bridge_builtin_interval_features.c	(working copy)
@@ -84,20 +84,32 @@
 			min = 0;
 			sec = remaining;
 		}
-
-		ast_stream_and_wait(bridge_channel->chan, "vm-youhave", AST_DIGIT_NONE);
-		if (min) {
-			ast_say_number(bridge_channel->chan, min, AST_DIGIT_NONE,
-				ast_channel_language(bridge_channel->chan), NULL);
-			ast_stream_and_wait(bridge_channel->chan, "queue-minutes", AST_DIGIT_NONE);
+		if (ast_using_saysentence()) {
+			if (min) {
+				if (sec) {
+					ast_say_sentence(bridge_channel->chan, AST_DIGIT_NONE, "<vm-youhave>%n<queue-minutes><vm-and>%n<vm-seconds>", min, sec);
+				} else {
+					ast_say_sentence(bridge_channel->chan, AST_DIGIT_NONE, "<vm-youhave>%n<queue-minutes>", min);
+				}
+			} else {
+				ast_say_sentence(bridge_channel->chan, AST_DIGIT_NONE, "<vm-youhave>%n<queue-seconds>", sec);
+			}
+		} else {
+			ast_stream_and_wait(bridge_channel->chan, "vm-youhave", AST_DIGIT_NONE);
+		
+			if (min) {
+				ast_say_number(bridge_channel->chan, min, AST_DIGIT_NONE,
+					ast_channel_language(bridge_channel->chan), NULL);
+				ast_stream_and_wait(bridge_channel->chan, "queue-minutes", AST_DIGIT_NONE);
+			}
+			if (sec) {
+				ast_say_number(bridge_channel->chan, sec, AST_DIGIT_NONE,
+					ast_channel_language(bridge_channel->chan), NULL);
+				ast_stream_and_wait(bridge_channel->chan, "queue-seconds", AST_DIGIT_NONE);
+			}
 		}
-		if (sec) {
-			ast_say_number(bridge_channel->chan, sec, AST_DIGIT_NONE,
-				ast_channel_language(bridge_channel->chan), NULL);
-			ast_stream_and_wait(bridge_channel->chan, "queue-seconds", AST_DIGIT_NONE);
-		}
 	} else {
-		ast_stream_and_wait(bridge_channel->chan, file, AST_DIGIT_NONE);
+		ast_stream_and_wait(bridge_channel->chan, file, AST_DIGIT_NONE); // If this is just a beep or something like that, then no need to run thru say_sentence
 	}
 
 	/*
Index: include/asterisk.h
===================================================================
--- include/asterisk.h	(revision 404606)
+++ include/asterisk.h	(working copy)
@@ -79,6 +79,7 @@
 int ast_set_priority(int);			/*!< Provided by asterisk.c */
 int ast_fd_init(void);				/*!< Provided by astfd.c */
 int ast_pbx_init(void);				/*!< Provided by pbx.c */
+int ast_using_saysentence(void);                /*!< Provided by asterisk.c */
 
 /*!
  * \brief Register a function to be executed before Asterisk exits.
Index: include/asterisk/file.h
===================================================================
--- include/asterisk/file.h	(revision 404606)
+++ include/asterisk/file.h	(working copy)
@@ -50,6 +50,32 @@
 
 #define SEEK_FORCECUR	10
 
+
+/*!
+ * \brief evaluates the format string, and gets a list of files to play,
+ *  This function should be used for all speech communication from Asterisk
+ *  to a user.
+ * \param chan channel to send sound files to 
+ * \param ecodes a string containing characters 0 thru 9, or * or #, or any combination thereof, that a user can press to terminate the playing.
+ * \param format -- a string containing the expressions to evaluate. See the SayScript guide.
+ * \param the arguments follow that are necessary to match the % constructs in the format string (kinda along the lines of printf).
+ */
+int ast_say_sentence(struct ast_channel *chan, const char *ecodes, const char *format, ...);
+
+
+/*!
+ * \brief evaluates the format string, and gets a list of files to play,
+ *  This function should be used for all speech communication from Asterisk
+ *  to a user. This version is the same as ast_say_sentence, but after starting the
+ *  stream for the first file, it returns with the result from the streamfile call.
+ * \param chan channel to send sound files to 
+ * \param ecodes a string containing characters 0 thru 9, or * or #, or any combination thereof, that a user can press to terminate the playing.
+ * \param format -- a string containing the expressions to evaluate. See the SayScript guide.
+ * \param the arguments follow that are necessary to match the % constructs in the format string (kinda along the lines of printf).
+ */
+
+int ast_say_sentence_nowait(struct ast_channel *chan, const char *ecodes, const char *format, ...);
+
 /*! The type of event associated with a ast_waitstream_fr_cb invocation */
 enum ast_waitstream_fr_cb_values {
 	AST_WAITSTREAM_CB_REWIND = 1,
@@ -76,6 +102,7 @@
  */
 int ast_streamfile(struct ast_channel *c, const char *filename, const char *preflang);
 
+
 /*!
  * \brief stream file until digit
  * If the file name is non-empty, try to play it.
Index: main/file.c
===================================================================
--- main/file.c	(revision 404606)
+++ main/file.c	(working copy)
@@ -35,6 +35,7 @@
 #include <sys/stat.h>
 #include <sys/wait.h>
 #include <math.h>
+#include <sys/socket.h>
 
 #include "asterisk/_private.h"	/* declare ast_file_init() */
 #include "asterisk/paths.h"	/* use ast_config_AST_DATA_DIR */
@@ -72,6 +73,8 @@
 STASIS_MESSAGE_TYPE_DEFN(ast_format_register_type);
 STASIS_MESSAGE_TYPE_DEFN(ast_format_unregister_type);
 
+int ast_say_sentence_core(struct ast_channel *chan, const char *ecodes, int wait, const char *format, va_list ap);
+
 static struct ast_json *json_array_from_list(const char *list, const char *sep)
 {
 	RAII_VAR(struct ast_json *, array, ast_json_array_create(), ast_json_unref);
@@ -1063,6 +1066,204 @@
 	return filehelper(filename, filename2, fmt, ACTION_COPY);
 }
 
+static int count_percents(const char *str)
+{
+	const char *p = str;
+	int count=0;
+	while (*p)
+	{
+		if (*p == '%')
+			count++;
+		p++;
+	}
+	return count;
+}
+
+static char * encode_html(const char *instr, char *outstr)
+{
+	const char *in = instr;
+	char *out = outstr;
+
+	while (*in) {
+		if (*in == '>') {
+			*out++ = '&';
+			*out++ = 'g';
+			*out++ = 't';
+			*out++ = ';';
+			in++;
+		} else if (*in == '<') {
+			*out++ = '&';
+			*out++ = 'l';
+			*out++ = 't';
+			*out++ = ';';
+			in++;
+		} else {
+			*out++ = *in++;
+		}
+	}
+	*out++ = 0; /* cap it off */
+	return outstr;
+}
+
+int ast_say_sentence_core(struct ast_channel *chan, const char *ecodes, int wait, const char *format, va_list ap)
+{ 
+	/* figure out the number of args that *SHOULD* be there,
+	   and verify they ARE there, and then pass them on */
+	int percents = count_percents(format);
+	char request_buf[2048];
+	char format_buf[1048];
+	char ecodes_buf[1048];
+	char response_buf[8096];
+	int i;
+	struct sockaddr_in pin;
+	struct hostent *hp;
+	int sd;
+	int ret;
+	char *searchpt;
+	char *foundpt, *endfoundpt;
+	struct ast_hostent ahp;
+
+
+	/* Steps:
+	1. Gather args, generate an XML request in a text buffer 
+	2. Transmit the XML
+	3. Retrieve the response from the server
+	4. Parse the xml response, play the sounds in order, quit if a stream returns a response code.
+        5. Return the last response.
+
+	And, when I make the entire system local to Asterisk,
+	the process will be same, but no XML, just raw structures
+	to push/pull data.
+	*/
+
+	sprintf(request_buf, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
+<SaySentenceRequest>\n\
+	<Lang_Locale>%s</Lang_Locale>\n\
+	<InterruptKeys>%s</InterruptKeys>\n\
+	<Format>%s</Format>\n\
+	<Arguments>\n", ast_channel_language(chan), encode_html(ecodes,ecodes_buf), encode_html(format,format_buf));
+
+	for (i=0; i<percents; i++) {
+		char *x = va_arg(ap, char*);
+		if (x && *x ) {
+			strcat(request_buf,"		<arg>");
+			strcat(request_buf,x);
+			strcat(request_buf,"</arg>\n");
+		}
+	}
+	va_end(ap);
+
+	strcat(request_buf,"	</Arguments>\n</SaySentenceRequest>\n");
+
+	if ((hp=ast_gethostbyname("localhost", &ahp)) == 0) {
+		ast_log(LOG_ERROR, "Couldn't get localhost's IP!\n");
+		return -1;
+	}
+
+	memset(&pin, 0, sizeof(pin));
+	pin.sin_family = AF_INET;
+	pin.sin_addr.s_addr = ((struct in_addr *)(hp->h_addr))->s_addr;
+	pin.sin_port = htons(9746);
+	if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { ast_log(LOG_ERROR, "Couldn't get a socket!\n");
+		return -1;
+	}
+	errno = 0;
+	if (connect(sd, (struct sockaddr *)&pin, sizeof(pin)) == -1) {
+		ast_log(LOG_ERROR, "Couldn't connect to SayScript server; errno = %s(%d)\n", strerror(errno), errno);
+		ast_log(LOG_ERROR, "sin_port is %d; sin_addr.s_addr = %x(%s)  hostent name=%s; alias: %s; type: %x; length: %d; addr_list0: %s; list1=%s\n", pin.sin_port, pin.sin_addr.s_addr, ast_inet_ntoa((*(struct in_addr *)(hp->h_addr))), hp->h_name, hp->h_aliases[0], hp->h_addrtype, hp->h_length, ast_inet_ntoa(*(struct in_addr *)(hp->h_addr_list[0])), ast_inet_ntoa(*(struct in_addr *)(hp->h_addr_list[1])));
+		return -1;
+	}
+	if (send(sd, request_buf, strlen(request_buf), 0) == -1) {
+		ast_log(LOG_ERROR, "Couldn't send to SayScript server\n");
+		return -1;
+	}
+	/* ret = shutdown(sd, SHUT_WR); Nice try, works, but also shuts the reader! */ /* shutdown the output channel */
+	//ast_log(LOG_ERROR, "Sent the request: \n%s\nShutdown returns %d\n", request_buf, ret);
+	if ((ret = recv(sd,response_buf, sizeof(response_buf), 0)) == -1) {
+		ast_log(LOG_ERROR, "Couldn't receive from SayScript server!\n");
+		return -1;
+	}
+	response_buf[ret] = 0;
+	/* if it got this far, we have a response! */
+	if ( strstr(response_buf,"</SaySentenceResponse>") == 0 ) {
+		ast_log(LOG_ERROR, "SayScript response packet incomplete! Got %d bytes: %s\n", ret, response_buf);
+		return -1;
+	}
+	ast_log(LOG_ERROR, "Got Response: %s\n", response_buf);
+	/* If there are any log messages, issue those as NOTICE to the logfile */
+	searchpt = response_buf;
+	while( (foundpt = strstr(searchpt, "<Message>")) != NULL ) {
+		char mess[1200];
+		endfoundpt = strstr(foundpt, "</Message>");
+		if(!endfoundpt) {
+			ast_log(LOG_ERROR, "SaySentence server response malformed!\nGot: %s\n", response_buf);
+			searchpt = foundpt + 9;
+			continue;
+		}
+		/* do your math-- the file name is between the <File>xxx</File> */
+		strncpy(mess, foundpt+9, endfoundpt-foundpt-9);
+		mess[endfoundpt-foundpt-9] = 0;
+
+		ast_log(LOG_NOTICE, "SaySentence system reports: %s\n", mess);
+		
+		searchpt = endfoundpt + 9;
+		
+	}
+	
+	searchpt = response_buf;
+	while( (foundpt = strstr(searchpt, "<File>")) != NULL ) {
+		char filename[200];
+		endfoundpt = strstr(foundpt, "</File>");
+		if(!endfoundpt) {
+			ast_log(LOG_ERROR, "SaySentence server response malformed!\nGot: %s\n", response_buf);
+			searchpt = foundpt + 6;
+			continue;
+		}
+		/* do your math-- the file name is between the <File>xxx</File> */
+		strncpy(filename, foundpt+6, endfoundpt-foundpt-6);
+		filename[endfoundpt-foundpt-6] = 0;
+		ast_log(LOG_ERROR,"About to streamfile %s\n", filename);
+		ret = ast_streamfile(chan, filename, ast_channel_language(chan));
+		if (ret<0) {
+			ast_log(LOG_ERROR,"Trouble playing %s; ast_streamfile returns %d\n", filename, ret);
+			searchpt = endfoundpt+6;
+			continue;
+		}
+		if (!wait)
+			return ret;
+		ret = ast_waitstream(chan, ecodes);
+		if (ret < 0) {
+			ast_log(LOG_ERROR,"Trouble playing %s; ast_waitstream returns %d\n", filename, ret);
+			ret = ast_stopstream(chan);
+			searchpt = endfoundpt+6;
+			continue;
+		} else if (ret > 0) {
+			ast_stopstream(chan);
+			return ret;
+		}
+		
+		ret = ast_stopstream(chan);
+		
+		searchpt = endfoundpt + 7;
+		
+	}
+	return 0;
+}
+
+int ast_say_sentence_nowait(struct ast_channel *chan, const char *ecodes, const char *format, ...)
+{ 
+	va_list ap;
+	va_start (ap, format);
+	return ast_say_sentence_core(chan, ecodes, 0, format, ap);
+}
+
+int ast_say_sentence(struct ast_channel *chan, const char *ecodes, const char *format, ...)
+{ 
+	va_list ap;
+	va_start (ap, format);
+	return ast_say_sentence_core(chan, ecodes, 1, format, ap);
+}
+
 int ast_streamfile(struct ast_channel *chan, const char *filename, const char *preflang)
 {
 	struct ast_filestream *fs;
@@ -1602,6 +1803,7 @@
 	return sanitize_waitstream_return(res);
 }
 
+/* This func will not be needed if using say_sentence() */
 /*
  * if the file name is non-empty, try to play it.
  * Return 0 if success, -1 if error, digit if interrupted by a digit.
@@ -1610,11 +1812,17 @@
 int ast_stream_and_wait(struct ast_channel *chan, const char *file, const char *digits)
 {
 	int res = 0;
-	if (!ast_strlen_zero(file)) {
-		ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", file, ast_channel_name(chan));
-		res = ast_streamfile(chan, file, ast_channel_language(chan));
-		if (!res) {
-			res = ast_waitstream(chan, digits);
+	if (ast_using_saysentence()) {
+		char buf1[512];
+		snprintf(buf1, sizeof(buf1), "<%s>", file);
+		ast_say_sentence(chan, digits, buf1);
+	} else {
+		if (!ast_strlen_zero(file)) {
+			ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", file, ast_channel_name(chan));
+			res = ast_streamfile(chan, file, ast_channel_language(chan));
+			if (!res) {
+				res = ast_waitstream(chan, digits);
+			}
 		}
 	}
 	return res;
Index: main/bridge_basic.c
===================================================================
--- main/bridge_basic.c	(revision 404606)
+++ main/bridge_basic.c	(working copy)
@@ -2870,8 +2870,12 @@
 	ast_channel_unlock(chan);
 
 	/* Play the simple "transfer" prompt out and wait */
-	res = ast_stream_and_wait(chan, "pbx-transfer", AST_DIGIT_ANY);
-	ast_stopstream(chan);
+	if (ast_using_saysentence()) {
+		res = ast_say_sentence(chan, AST_DIGIT_ANY, "<pbx-transfer>");
+	} else {
+		res = ast_stream_and_wait(chan, "pbx-transfer", AST_DIGIT_ANY);
+		ast_stopstream(chan);
+	}
 	if (res < 0) {
 		/* Hangup or error */
 		return -1;
@@ -2894,7 +2898,11 @@
 			ast_debug(1, "%s dialed '%s@%s' does not exist.\n",
 				ast_channel_name(chan), exten, context);
 		}
-		ast_stream_and_wait(chan, "pbx-invalid", AST_DIGIT_NONE);
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_NONE, "<pbx-invalid>");
+		} else {
+			ast_stream_and_wait(chan, "pbx-invalid", AST_DIGIT_NONE);
+		}
 		res = -1;
 	} else {
 		/* Dialed extension is valid. */
@@ -3018,7 +3026,7 @@
 	props->transfer_target = dial_transfer(bridge_channel->chan, destination);
 	if (!props->transfer_target) {
 		ast_log(LOG_ERROR, "Unable to request outbound channel for attended transfer target.\n");
-		ast_stream_and_wait(props->transferer, props->failsound, AST_DIGIT_NONE);
+		ast_stream_and_wait(props->transferer, props->failsound, AST_DIGIT_NONE); // if this is just a beep or something, no say_sentence call needed.
 		ast_bridge_channel_write_unhold(bridge_channel);
 		attended_transfer_properties_shutdown(props);
 		return 0;
@@ -3029,7 +3037,7 @@
 	props->target_bridge = ast_bridge_basic_new();
 	if (!props->target_bridge) {
 		ast_log(LOG_ERROR, "Unable to create bridge for attended transfer target.\n");
-		ast_stream_and_wait(props->transferer, props->failsound, AST_DIGIT_NONE);
+		ast_stream_and_wait(props->transferer, props->failsound, AST_DIGIT_NONE); // if this is just a beep or something, no say_sentence call needed.
 		ast_bridge_channel_write_unhold(bridge_channel);
 		ast_hangup(props->transfer_target);
 		props->transfer_target = NULL;
@@ -3040,7 +3048,7 @@
 
 	if (attach_framehook(props, props->transfer_target)) {
 		ast_log(LOG_ERROR, "Unable to attach framehook to transfer target.\n");
-		ast_stream_and_wait(props->transferer, props->failsound, AST_DIGIT_NONE);
+		ast_stream_and_wait(props->transferer, props->failsound, AST_DIGIT_NONE); // if this is just a beep or something, no say_sentence call needed.
 		ast_bridge_channel_write_unhold(bridge_channel);
 		ast_hangup(props->transfer_target);
 		props->transfer_target = NULL;
@@ -3055,7 +3063,7 @@
 
 	if (ast_call(props->transfer_target, destination, 0)) {
 		ast_log(LOG_ERROR, "Unable to place outbound call to transfer target.\n");
-		ast_stream_and_wait(bridge_channel->chan, props->failsound, AST_DIGIT_NONE);
+		ast_stream_and_wait(bridge_channel->chan, props->failsound, AST_DIGIT_NONE); // if this is just a beep or something, no say_sentence call needed.
 		ast_bridge_channel_write_unhold(bridge_channel);
 		ast_hangup(props->transfer_target);
 		props->transfer_target = NULL;
@@ -3071,7 +3079,7 @@
 	if (ast_bridge_impart(props->target_bridge, props->transfer_target, NULL, NULL,
 		AST_BRIDGE_IMPART_CHAN_INDEPENDENT)) {
 		ast_log(LOG_ERROR, "Unable to place transfer target into bridge.\n");
-		ast_stream_and_wait(bridge_channel->chan, props->failsound, AST_DIGIT_NONE);
+		ast_stream_and_wait(bridge_channel->chan, props->failsound, AST_DIGIT_NONE); // if this is just a beep or something, no say_sentence call needed.
 		ast_bridge_channel_write_unhold(bridge_channel);
 		ast_hangup(props->transfer_target);
 		props->transfer_target = NULL;
@@ -3081,7 +3089,7 @@
 
 	if (ast_pthread_create_detached(&thread, NULL, attended_transfer_monitor_thread, props)) {
 		ast_log(LOG_ERROR, "Unable to create monitoring thread for attended transfer.\n");
-		ast_stream_and_wait(bridge_channel->chan, props->failsound, AST_DIGIT_NONE);
+		ast_stream_and_wait(bridge_channel->chan, props->failsound, AST_DIGIT_NONE); // if this is just a beep or something, no say_sentence call needed.
 		ast_bridge_channel_write_unhold(bridge_channel);
 		attended_transfer_properties_shutdown(props);
 		return 0;
Index: main/asterisk.c
===================================================================
--- main/asterisk.c	(revision 404606)
+++ main/asterisk.c	(working copy)
@@ -3712,6 +3712,22 @@
 	ast_cli_unregister_multiple(cli_asterisk, ARRAY_LEN(cli_asterisk));
 }
 
+static int uses_saysentence = 0;
+
+int ast_using_saysentence(void)
+{
+	return uses_saysentence;
+}
+
+static void calc_using_saysentence(void)
+{
+	char path[1024];
+	uses_saysentence = 0;
+	snprintf(path, sizeof(path), "%s/translation", cfg_paths.var_dir);
+	if (access(path, R_OK|X_OK) == 0)
+		uses_saysentence = 1;
+}
+
 int main(int argc, char *argv[])
 {
 	int c;
@@ -3883,6 +3899,8 @@
 
 	ast_readconfig();
 	env_init();
+	calc_using_saysentence();
+	
 
 	if (ast_opt_remote && remotesock != NULL)
 		ast_copy_string((char *) cfg_paths.socket_path, remotesock, sizeof(cfg_paths.socket_path));
Index: main/app.c
===================================================================
--- main/app.c	(revision 404606)
+++ main/app.c	(working copy)
@@ -1070,22 +1070,27 @@
 	return control_streamfile(chan, file, fwd, rev, stop, suspend, restart, skipms, offsetms, lang, NULL);
 }
 
+/* We will not need this function, I think, if we use say_sentence! */
 int ast_play_and_wait(struct ast_channel *chan, const char *fn)
 {
 	int d = 0;
 
-	ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", fn, ast_channel_name(chan));
-	if ((d = ast_streamfile(chan, fn, ast_channel_language(chan)))) {
-		return d;
+	if (ast_using_saysentence()) {
+		char buf1[512];
+		snprintf(buf1, sizeof(buf1), "<%s>", fn);  /* BAD, REALLY BAD. We need to get rid of all ast_play_wait() calls! */
+		ast_say_sentence(chan, AST_DIGIT_ANY, buf1);
+	} else {
+		ast_test_suite_event_notify("PLAYBACK", "Message: %s\r\nChannel: %s", fn, ast_channel_name(chan));
+		if ((d = ast_streamfile(chan, fn, ast_channel_language(chan)))) {
+			return d;
+		}
+	
+		d = ast_waitstream(chan, AST_DIGIT_ANY);
+	
+		ast_stopstream(chan);
 	}
-
-	d = ast_waitstream(chan, AST_DIGIT_ANY);
-
-	ast_stopstream(chan);
-
 	return d;
 }
-
 /*!
  * \brief Construct a silence frame of the same duration as \a orig.
  *
@@ -1236,7 +1241,7 @@
 
 	if (playfile || beep) {
 		if (!beep) {
-			d = ast_play_and_wait(chan, playfile);
+			d = ast_play_and_wait(chan, playfile);  /* this is OK to leave as play_and_wait, as the record&play is working on non-scripted files, created outside the realm of sound sets */
 		}
 		if (d > -1) {
 			d = ast_stream_and_wait(chan, "beep", "");
@@ -2148,11 +2153,19 @@
 		case '9':
 		case '*':
 		case '#':
-			cmd = ast_play_and_wait(chan, "vm-sorry");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-sorry");
+			}
 			break;
 		default:
 			if (message_exists) {
-				cmd = ast_play_and_wait(chan, "vm-review");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-review");
+				}
 			} else {
 				if (!(cmd = ast_play_and_wait(chan, "vm-torerecord"))) {
 					cmd = ast_waitfordigit(chan, 600);
Index: channels/chan_dahdi.c
===================================================================
--- channels/chan_dahdi.c	(revision 404606)
+++ channels/chan_dahdi.c	(working copy)
@@ -9542,9 +9542,13 @@
 				ast_log(LOG_WARNING, "Unable to start special tone on %d\n", p->channel);
 			else
 				sleep(1);
-			res = ast_streamfile(chan, "ss-noservice", ast_channel_language(chan));
-			if (res >= 0)
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, "", "<ss-noservice>");
+			} else {
+				res = ast_streamfile(chan, "ss-noservice", ast_channel_language(chan));
+				if (res >= 0)
+					ast_waitstream(chan, "");
+			}
 			res = tone_zone_play_tone(p->subs[idx].dfd, DAHDI_TONE_CONGESTION);
 			ast_hangup(chan);
 			goto quit;
Index: channels/sig_analog.c
===================================================================
--- channels/sig_analog.c	(revision 404606)
+++ channels/sig_analog.c	(working copy)
@@ -2053,9 +2053,13 @@
 			} else {
 				sleep(1);
 			}
-			res = ast_streamfile(chan, "ss-noservice", ast_channel_language(chan));
-			if (res >= 0) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<ss-noservice>");
+			} else {
+				res = ast_streamfile(chan, "ss-noservice", ast_channel_language(chan));
+				if (res >= 0) {
+					ast_waitstream(chan, "");
+				}
 			}
 			res = analog_play_tone(p, idx, ANALOG_TONE_CONGESTION);
 			ast_hangup(chan);
Index: apps/app_chanspy.c
===================================================================
--- apps/app_chanspy.c	(revision 404606)
+++ apps/app_chanspy.c	(working copy)
@@ -865,7 +865,7 @@
 		struct ast_channel *prev = NULL;
 
 		if (!ast_test_flag(flags, OPTION_QUIET) && num_spyed_upon) {
-			res = ast_streamfile(chan, "beep", ast_channel_language(chan));
+			res = ast_streamfile(chan, "beep", ast_channel_language(chan)); // no need to get ast_say_sentence for a beep
 			if (!res)
 				res = ast_waitstream(chan, "");
 			else if (res < 0) {
@@ -1013,46 +1013,126 @@
 			if (!ast_test_flag(flags, OPTION_QUIET)) {
 				char peer_name[AST_NAME_STRLEN + 5];
 				char *ptr, *s;
-
-				strcpy(peer_name, "spy-");
-				strncat(peer_name, ast_channel_name(autochan->chan), AST_NAME_STRLEN - 4 - 1);
-				if ((ptr = strchr(peer_name, '/'))) {
-					*ptr++ = '\0';
-					for (s = peer_name; s < ptr; s++) {
-						*s = tolower(*s);
+				if (ast_using_saysentence()) {
+					strcpy(peer_name, "spy-");
+					strcat(peer_name, ast_channel_name(autochan->chan));
+					if ((ptr = strchr(peer_name, '/'))) {
+						*ptr++ = '\0';
+						for (s = peer_name; s < ptr; s++) {
+							*s = tolower(*s);
+						}
+						if ((s = strchr(ptr, '-'))) {
+							*s = '\0';
+						}
 					}
-					if ((s = strchr(ptr, '-'))) {
-						*s = '\0';
+					if (ast_test_flag(flags, OPTION_NAME)) {
+						const char *local_context = S_OR(name_context, "default");
+						const char *local_mailbox = S_OR(mailbox, ptr);
+						if (local_mailbox) {
+							res = ast_app_sayname(chan, local_mailbox, local_context); // Sioce this isn't scriptable, we can skip using say_sentence
+						} else {
+							res = -1;
+						}
 					}
-				}
+					if (!ast_test_flag(flags, OPTION_NAME) || res < 0) {
+						int num;
+						if (!ast_test_flag(flags, OPTION_NOTECH)) {
+							if (ast_fileexists(peer_name, NULL, NULL) > 0) {
+								/* the object below is to always have string constants in the 
+									ast_sya_sentence calls. That way, we have the file names to 
+									play in the format string. We could have used %z, but then gathering the played
+									list of files is non-trivial */
+								if (!strcasecmp(peer_name, "spy-agent")) {
+									res = ast_say_sentence(chan, "", "<spy-agent>");
+								} else if (!strcasecmp(peer_name, "spy-console")) {
+									res = ast_say_sentence(chan, "", "<spy-console>");
+								} else if (!strcasecmp(peer_name, "spy-dahdi")) {
+									res = ast_say_sentence(chan, "", "<spy-dahdi>");
+								} else if (!strcasecmp(peer_name, "spy-h323")) {
+									res = ast_say_sentence(chan, "", "<spy-h323>");
+								} else if (!strcasecmp(peer_name, "spy-iax2")) {
+									res = ast_say_sentence(chan, "", "<spy-iax2>");
+								} else if (!strcasecmp(peer_name, "spy-iax")) {
+									res = ast_say_sentence(chan, "", "<spy-iax>");
+								} else if (!strcasecmp(peer_name, "spy-jingle")) {
+									res = ast_say_sentence(chan, "", "<spy-jingle>");
+								} else if (!strcasecmp(peer_name, "spy-local")) {
+									res = ast_say_sentence(chan, "", "<spy-local>");
+								} else if (!strcasecmp(peer_name, "spy-mgcp")) {
+									res = ast_say_sentence(chan, "", "<spy-mgcp>");
+								} else if (!strcasecmp(peer_name, "spy-misdn")) {
+									res = ast_say_sentence(chan, "", "<spy-misdn>");
+								} else if (!strcasecmp(peer_name, "spy-mobile")) {
+									res = ast_say_sentence(chan, "", "<spy-mobile>");
+								} else if (!strcasecmp(peer_name, "spy-nbs")) {
+									res = ast_say_sentence(chan, "", "<spy-nbs>");
+								} else if (!strcasecmp(peer_name, "spy-sip")) {
+									res = ast_say_sentence(chan, "", "<spy-sip>");
+								} else if (!strcasecmp(peer_name, "spy-pjsip")) {
+									res = ast_say_sentence(chan, "", "<spy-pjsip>");
+								} else if (!strcasecmp(peer_name, "spy-skinny")) {
+									res = ast_say_sentence(chan, "", "<spy-skinny>");
+								} else if (!strcasecmp(peer_name, "spy-unistim")) {
+									res = ast_say_sentence(chan, "", "<spy-unistim>");
+								} else if (!strcasecmp(peer_name, "spy-usbradio")) {
+									res = ast_say_sentence(chan, "", "<spy-usbradio>");
+								} else if (!strcasecmp(peer_name, "spy-zap")) {
+									res = ast_say_sentence(chan, "", "<spy-zap>");
+								}
+								
+								if (res) {
+									ast_autochan_destroy(autochan);
+									break;
+								}
+							} else {
+								res = ast_say_sentence(chan, "", "%c", peer_name);
+							}
+						}
+						if (ptr && (num = atoi(ptr))) {
+							ast_say_sentence(chan, "", "%n", num);
+						}
+					}
 
-				if (ast_test_flag(flags, OPTION_NAME)) {
-					const char *local_context = S_OR(name_context, "default");
-					const char *local_mailbox = S_OR(mailbox, ptr);
-					if (local_mailbox) {
-						res = ast_app_sayname(chan, local_mailbox, local_context);
-					} else {
-						res = -1;
+				} else {
+					strcpy(peer_name, "spy-");
+					strncat(peer_name, ast_channel_name(autochan->chan), AST_NAME_STRLEN - 4 - 1);
+					if ((ptr = strchr(peer_name, '/'))) { *ptr++ = '\0';
+						for (s = peer_name; s < ptr; s++) {
+							*s = tolower(*s);
+						}
+						if ((s = strchr(ptr, '-'))) {
+							*s = '\0';
+						}
 					}
-				}
-				if (!ast_test_flag(flags, OPTION_NAME) || res < 0) {
-					int num;
-					if (!ast_test_flag(flags, OPTION_NOTECH)) {
-						if (ast_fileexists(peer_name, NULL, NULL) > 0) {
-							res = ast_streamfile(chan, peer_name, ast_channel_language(chan));
-							if (!res) {
-								res = ast_waitstream(chan, "");
-							}
-							if (res) {
-								ast_autochan_destroy(autochan);
-								break;
-							}
+
+					if (ast_test_flag(flags, OPTION_NAME)) {
+						const char *local_context = S_OR(name_context, "default");
+						const char *local_mailbox = S_OR(mailbox, ptr);
+						if (local_mailbox) {
+							res = ast_app_sayname(chan, local_mailbox, local_context);
 						} else {
-							res = ast_say_character_str(chan, peer_name, "", ast_channel_language(chan), AST_SAY_CASE_NONE);
+							res = -1;
 						}
 					}
-					if (ptr && (num = atoi(ptr))) {
-						ast_say_digits(chan, num, "", ast_channel_language(chan));
+					if (!ast_test_flag(flags, OPTION_NAME) || res < 0) {
+						int num;
+						if (!ast_test_flag(flags, OPTION_NOTECH)) {
+							if (ast_fileexists(peer_name, NULL, NULL) > 0) {
+								res = ast_streamfile(chan, peer_name, ast_channel_language(chan));
+								if (!res) {
+									res = ast_waitstream(chan, "");
+								}
+								if (res) {
+									ast_autochan_destroy(autochan);
+									break;
+								}
+							} else {
+								res = ast_say_character_str(chan, peer_name, "", ast_channel_language(chan), AST_SAY_CASE_NONE);
+							}
+						}
+						if (ptr && (num = atoi(ptr))) {
+							ast_say_digits(chan, num, "", ast_channel_language(chan));
+						}
 					}
 				}
 			}
Index: apps/app_voicemail.c
===================================================================
--- apps/app_voicemail.c	(revision 404606)
+++ apps/app_voicemail.c	(working copy)
@@ -79,6 +79,7 @@
 </category>
 ***/
 
+
 #include "asterisk.h"
 
 #ifdef IMAP_STORAGE
@@ -573,7 +574,7 @@
  * mailcmd= command in voicemail.conf */
 #define SENDMAIL "/usr/sbin/sendmail -t"
 
-#define INTRO "vm-intro"
+/* Introducing an INTRO macro for playing the vm-intro sound file would be very BAD form! */
 
 #define MAXMSG 100
 #define MAXMSGLIMIT 9999
@@ -2509,7 +2510,11 @@
 	if (vms->quota_limit && vms->quota_usage >= vms->quota_limit) {
 		ast_debug(1, "*** QUOTA EXCEEDED!! %u >= %u\n", vms->quota_usage, vms->quota_limit);
 		if (chan) {
-			ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 		}
 		return -1;
 	}
@@ -2519,7 +2524,11 @@
 	if (msgnum >= vmu->maxmsg - inprocess_count(vmu->mailbox, vmu->context, +1)) {
 		ast_log(LOG_WARNING, "Unable to leave message since we will exceed the maximum number of messages allowed (%u >= %u)\n", msgnum, vmu->maxmsg);
 		if (chan) {
-			ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "FAILED");
 		}
 		return -1;
@@ -5494,23 +5503,47 @@
 	}
 
 	RETRIEVE(fn, -1, ext, context);
-	if (ast_fileexists(fn, NULL, NULL) > 0) {
-		res = ast_stream_and_wait(chan, fn, ecodes);
-		if (res) {
+	if (ast_using_saysentence()) {
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+
+			if (busy)
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-isonphone>", fn); /* this is a totally righteous use of %z */
+			else 
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-isunavail>", fn);
+			if (res) {
+				DISPOSE(fn, -1);
+				return res;
+			}
+		} else {
+			/* Dispose just in case */
 			DISPOSE(fn, -1);
-			return res;
+	
+			if (busy)
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-theperson>%i<vm-isonphone>", ext);
+			else 
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-theperson>%i<vm-isunavail>", ext);
+			if (res)
+				return res;
 		}
 	} else {
-		/* Dispose just in case */
-		DISPOSE(fn, -1);
-		res = ast_stream_and_wait(chan, "vm-theperson", ecodes);
-		if (res)
-			return res;
-		res = ast_say_digit_str(chan, ext, ecodes, ast_channel_language(chan));
-		if (res)
-			return res;
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+			res = ast_stream_and_wait(chan, fn, ecodes);
+			if (res) {
+				DISPOSE(fn, -1);
+				return res;
+			}
+		} else {
+			/* Dispose just in case */
+			DISPOSE(fn, -1);
+			res = ast_stream_and_wait(chan, "vm-theperson", ecodes);
+			if (res)
+				return res;
+			res = ast_say_digit_str(chan, ext, ecodes, ast_channel_language(chan));
+			if (res)
+				return res;
+		}
+		res = ast_stream_and_wait(chan, busy ? "vm-isonphone" : "vm-isunavail", ecodes);
 	}
-	res = ast_stream_and_wait(chan, busy ? "vm-isonphone" : "vm-isunavail", ecodes);
 	return res;
 }
 
@@ -6542,14 +6575,18 @@
 		goto leave_vm_out;
 	}
 	if (!res && !ast_test_flag(options, OPT_SILENT)) {
-		res = ast_stream_and_wait(chan, INTRO, ecodes);
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, ecodes, "<vm-intro>");
+		} else {
+			res = ast_stream_and_wait(chan, "vm-intro", ecodes);
+		}
 		if (res == '#') {
 			ast_set_flag(options, OPT_SILENT);
 			res = 0;
 		}
 	}
 	if (res > 0)
-		ast_stopstream(chan);
+		ast_stopstream(chan); /* if using saysentence, do I need to NOT say this? */
 	/* Check for a '*' here in case the caller wants to escape from voicemail to something
 	 other than the operator -- an automated attendant or mailbox login for example */
 	if (res == '*') {
@@ -6576,7 +6613,11 @@
 			} else if (ousemacro && !ast_strlen_zero(ast_channel_macrocontext(chan))) {
 				ast_channel_context_set(chan, ast_channel_macrocontext(chan));
 			}
-			ast_play_and_wait(chan, "transfer");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<transfer>");
+			} else {
+				ast_play_and_wait(chan, "transfer");
+			}
 			ast_channel_priority_set(chan, 0);
 			free_user(vmu);
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "USEREXIT");
@@ -6642,9 +6683,13 @@
 		}
 #else
 		if (count_messages(vmu, dir) >= vmu->maxmsg - inprocess_count(vmu->mailbox, vmu->context, +1)) {
-			res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, "", "<vm-mailboxfull>");
+			} else {
+				res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, "");
+			}
 			ast_log(AST_LOG_WARNING, "No more messages possible\n");
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "FAILED");
 			inprocess_count(vmu->mailbox, vmu->context, -1);
@@ -6656,9 +6701,13 @@
 		txtdes = mkstemp(tmptxtfile);
 		chmod(tmptxtfile, VOICEMAIL_FILE_MODE & ~my_umask);
 		if (txtdes < 0) {
-			res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, "", "<vm-mailboxfull>");
+			} else {
+				res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, "");
+			}
 			ast_log(AST_LOG_ERROR, "Unable to create message file: %s\n", strerror(errno));
 			pbx_builtin_setvar_helper(chan, "VMSTATUS", "FAILED");
 			inprocess_count(vmu->mailbox, vmu->context, -1);
@@ -7536,41 +7585,74 @@
 {
 	int x;
 	int d;
-	char fn[PATH_MAX];
-	d = ast_play_and_wait(chan, "vm-press");	/* "Press" */
-	if (d)
-		return d;
-	for (x = start; x < 5; x++) {	/* For all folders */
-		if ((d = ast_say_number(chan, x, AST_DIGIT_ANY, ast_channel_language(chan), NULL)))
-			return d;
-		d = ast_play_and_wait(chan, "vm-for");	/* "for" */
+	if (ast_using_saysentence()) {
+
+		for (x = start; x < 5; x++) {	/* For all folders */
+			switch (x) {
+			case 0:
+#ifdef IMAP_STORAGE
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press>%n<vm-for>%z.", "0", imapfolder);
+#else
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/0><vm-for><vm-INBOX>.", 0);
+#endif
+				break;
+			case 1:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/1><vm-for><vm-Old>.", 1);
+				break;
+			case 2:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/2><vm-for><vm-Work>.", 2);
+				break;
+			case 3:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/3><vm-for><vm-Family>.", 3);
+				break;
+			case 4:
+				d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-press><digits/4><vm-for><vm-Friends>.", 4);
+				break;
+			}
+			if (d)
+				return d;
+		}
+	} else {
+		char fn[PATH_MAX];
+		d = ast_play_and_wait(chan, "vm-press"); /* "Press" */
 		if (d)
 			return d;
-		snprintf(fn, sizeof(fn), "vm-%s", mbox(NULL, x));	/* Folder name */
-
-		/* The inbox folder can have its name changed under certain conditions
-		 * so this checks if the sound file exists for the inbox folder name and
-		 * if it doesn't, plays the default name instead. */
-		if (x == 0) {
-			if (ast_fileexists(fn, NULL, NULL)) {
+		for (x = start; x < 5; x++) {	/* For all folders */
+			if ((d = ast_say_number(chan, x, AST_DIGIT_ANY, ast_channel_language(chan), NULL)))
+				return d;
+			d = ast_play_and_wait(chan, "vm-for"); /* "for" */
+			if (d)
+				return d;
+			snprintf(fn, sizeof(fn), "vm-%s", mbox(NULL, x));	/* Folder name */
+	
+			/* The inbox folder can have its name changed under certain conditions
+			 * so this checks if the sound file exists for the inbox folder name and
+			 * if it doesn't, plays the default name instead. */
+			if (x == 0) {
+				if (ast_fileexists(fn, NULL, NULL)) {
+					d = vm_play_folder_name(chan, fn);
+				} else {
+					ast_verb(1, "failed to find %s\n", fn);
+					d = vm_play_folder_name(chan, "vm-INBOX");
+				}
+			} else {
+				ast_test_suite_event_notify("PLAYBACK", "Message: folder name %s", fn);
 				d = vm_play_folder_name(chan, fn);
-			} else {
-				ast_verb(1, "failed to find %s\n", fn);
-				d = vm_play_folder_name(chan, "vm-INBOX");
 			}
-		} else {
-			ast_test_suite_event_notify("PLAYBACK", "Message: folder name %s", fn);
-			d = vm_play_folder_name(chan, fn);
+
+			if (d)
+				return d;
 		}
-
-		if (d)
-			return d;
-		d = ast_waitfordigit(chan, 500);
-		if (d)
-			return d;
 	}
+	d = ast_waitfordigit(chan, 500);
+	if (d)
+		return d;
 
-	d = ast_play_and_wait(chan, "vm-tocancel"); /* "or pound to cancel" */
+	if (ast_using_saysentence()) {
+		d = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocancel>");
+	} else {
+		d = ast_play_and_wait(chan, "vm-tocancel");
+	} /* "or pound to cancel" */
 	if (d)
 		return d;
 	d = ast_waitfordigit(chan, 4000);
@@ -7595,6 +7677,7 @@
 	int loops = 0;
 
 	res = ast_play_and_wait(chan, fn);	/* Folder name */
+	
 	while (((res < '0') || (res > '9')) &&
 			(res != '#') && (res >= 0) &&
 			loops < 4) {
@@ -7671,8 +7754,12 @@
 			}
 			make_file(vms->introfn, sizeof(vms->introfn), curdir, curmsg);
 			strncat(vms->introfn, "intro", sizeof(vms->introfn));
-			ast_play_and_wait(chan, INTRO);
-			ast_play_and_wait(chan, "beep");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-intro><beep>");
+			} else {
+				ast_play_and_wait(chan, "vm-intro");
+				ast_play_and_wait(chan, "beep");
+			}
 			cmd = play_record_review(chan, NULL, vms->introfn, vmu->maxsecs, vm_fmts, 1, vmu, (int *) duration, NULL, NULL, record_gain, vms, flag, msg_id);
 			if (cmd == -1) {
 				break;
@@ -7753,10 +7840,18 @@
 			/* If time_out and return to menu, reset already_recorded */
 			already_recorded = 0;
 
-			cmd = ast_play_and_wait(chan, "vm-forwardoptions");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-forwardoptions>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-forwardoptions");
+			}
 				/* "Press 1 to prepend a message or 2 to forward the message without prepending" */
 			if (!cmd) {
-				cmd = ast_play_and_wait(chan, "vm-starmain");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-starmain>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-starmain");
+				}
 				/* "press star to return to the main menu" */
 			}
 			if (!cmd) {
@@ -7984,7 +8079,11 @@
 					break;
 				default: 
 					/* Press 1 to enter an extension press 2 to use the directory */
-					cmd = ast_play_and_wait(chan, "vm-forward");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-forward>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-forward");
+					}
 					if (!cmd) {
 						cmd = ast_waitfordigit(chan, 3000);
 					}
@@ -8058,14 +8157,22 @@
 				if (inboxcount(s, &newmsgs, &oldmsgs)) {
 					ast_log(LOG_ERROR, "Problem in calculating number of voicemail messages available for extension %s\n", s);
 					/* Shouldn't happen, but allow trying another extension if it does */
-					res = ast_play_and_wait(chan, "pbx-invalid");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<pbx-invalid>");
+					} else {
+						res = ast_play_and_wait(chan, "pbx-invalid");
+					}
 					valid_extensions = 0;
 					break;
 				}
 				capacity = receiver->maxmsg - inprocess_count(receiver->mailbox, receiver->context, +1);
 				if ((newmsgs + oldmsgs) >= capacity) {
 					ast_log(LOG_NOTICE, "Mailbox '%s' is full with capacity of %d, prompting for another extension.\n", s, capacity);
-					res = ast_play_and_wait(chan, "vm-mailboxfull");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-mailboxfull");
+					}
 					valid_extensions = 0;
 					while ((vmtmp = AST_LIST_REMOVE_HEAD(&extensions, list))) {
 						inprocess_count(vmtmp->mailbox, vmtmp->context, -1);
@@ -8086,7 +8193,11 @@
 				}
 				ast_log(LOG_NOTICE, "'%s' is not a valid mailbox\n", s);
 				/* "I am sorry, that's not a valid extension.  Please try again." */
-				res = ast_play_and_wait(chan, "pbx-invalid");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<pbx-invalid>");
+				} else {
+					res = ast_play_and_wait(chan, "pbx-invalid");
+				}
 				valid_extensions = 0;
 				break;
 			}
@@ -8095,13 +8206,21 @@
 			snprintf(fn, sizeof(fn), "%s%s/%s/greet", VM_SPOOL_DIR, receiver->context, s);
 			RETRIEVE(fn, -1, s, receiver->context);
 			if (ast_fileexists(fn, NULL, NULL) > 0) {
-				res = ast_stream_and_wait(chan, fn, ecodes);
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, ecodes, "%z", fn); /* a righteous usage, but pretty useless for translation */
+				} else {
+					res = ast_stream_and_wait(chan, fn, ecodes);
+				}
 				if (res) {
 					DISPOSE(fn, -1);
 					return res;
 				}
 			} else {
-				res = ast_say_digit_str(chan, s, ecodes, ast_channel_language(chan));
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, ecodes, "%i", s); /* not a very intelligible sentence, to be sure.*/
+				} else {
+					res = ast_say_digit_str(chan, s, ecodes, ast_channel_language(chan));
+				}
 			}
 			DISPOSE(fn, -1);
 
@@ -8195,21 +8314,41 @@
 				/* give confirmation that the message was saved */
 				/* commented out since we can't forward batches yet
 				if (saved_messages == 1)
-					res = ast_play_and_wait(chan, "vm-message");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-message>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-message");
+					}
 				else
-					res = ast_play_and_wait(chan, "vm-messages");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-messages>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-messages");
+					}
 				if (!res)
-					res = ast_play_and_wait(chan, "vm-saved"); */
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-saved>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-saved");
+					} */
 #ifdef IMAP_STORAGE
 				/* If forwarded with intro, DON'T PLAY THIS MESSAGE AGAIN! */
 				if (ast_strlen_zero(vmstmp.introfn))
 #endif
-				res = ast_play_and_wait(chan, "vm-msgforwarded");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgforwarded>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-msgforwarded");
+				}
 			}
 #ifndef IMAP_STORAGE
 			else {
 				/* with IMAP, mailbox full warning played by imap_check_limits */
-				res = ast_play_and_wait(chan, "vm-mailboxfull");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-mailboxfull");
+				}
 			}
 			/* Restore original message without prepended message if backup exists */
 			make_file(msgfile, sizeof(msgfile), dir, curmsg);
@@ -8246,6 +8385,7 @@
 	return res ? res : cmd;
 }
 
+
 static int wait_file2(struct ast_channel *chan, struct vm_state *vms, char *file)
 {
 	int res;
@@ -8258,15 +8398,19 @@
 {
 	ast_test_suite_event_notify("PLAYVOICE", "Message: Playing %s", file);
 	return ast_control_streamfile(chan, file, listen_control_forward_key, listen_control_reverse_key, listen_control_stop_key, listen_control_pause_key, listen_control_restart_key, skipms, NULL);
+	/*  my impression is that this will be used to play recorded files, and thus isn't in the realm of the asterisk sound files and their translation */
 }
 
 static int play_message_category(struct ast_channel *chan, const char *category)
 {
 	int res = 0;
+	if (ast_using_saysentence()) {
+		res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z", category);
+	} else {
+		if (!ast_strlen_zero(category))
+			res = ast_play_and_wait(chan, category);
+	}
 
-	if (!ast_strlen_zero(category))
-		res = ast_play_and_wait(chan, category);
-
 	if (res) {
 		ast_log(AST_LOG_WARNING, "No sound file for category '%s' was found.\n", category);
 		res = 0;
@@ -8316,30 +8460,43 @@
 
 	/* Can't think of how other diffs might be helpful, but I'm sure somebody will think of something. */
 #endif
-	if (the_zone) {
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), the_zone->msg_format, the_zone->timezone);
-	} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {     /* GERMAN syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {     /* GREEK syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q  H 'digits/kai' M ", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {     /* ITALIAN syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' 'digits/hours' k 'digits/e' M 'digits/minutes'", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {     /* DUTCH syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/nl-om' HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {     /* NORWEGIAN syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {     /* POLISH syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q HM", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* Brazillian PORTUGUESE syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Ad 'digits/pt-de' B 'digits/pt-de' Y 'digits/pt-as' HM ", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {     /* SWEDISH syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' dB 'digits/at' k 'and' M", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {     /* CHINESE (Taiwan) syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "qR 'vm-received'", NULL);
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {     /* VIETNAMESE syntax */
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' A 'digits/day' dB 'digits/year' Y 'digits/at' k 'hours' M 'minutes'", NULL);
+
+	if (ast_using_saysentence()) {
+		if (the_zone) {
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), the_zone->msg_format, the_zone->timezone); /* what else should I do? This format string
+																			 would have to be in say_sentence format;
+																			 and, maybe, it would be better to override it
+																			 in the translation file rather than the config file! */
+		} else {
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-recieved>%[q]d<digits/at>%[IMp]d", t, t);
+		}
+		/* All the languages are handled via entries in the translation file for the lang_LOCALE, a mapping for the above format */
 	} else {
-		res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' IMp", NULL);
+		if (the_zone) {
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), the_zone->msg_format, the_zone->timezone);
+		} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {     /* GERMAN syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {     /* GREEK syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q  H 'digits/kai' M ", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {     /* ITALIAN syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' 'digits/hours' k 'digits/e' M 'digits/minutes'", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {     /* DUTCH syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/nl-om' HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {     /* NORWEGIAN syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q 'digits/at' HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {     /* POLISH syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Q HM", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* Brazillian PORTUGUESE syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' Ad 'digits/pt-de' B 'digits/pt-de' Y 'digits/pt-as' HM ", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {     /* SWEDISH syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' dB 'digits/at' k 'and' M", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {     /* CHINESE (Taiwan) syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "qR 'vm-received'", NULL);
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {     /* VIETNAMESE syntax */
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' A 'digits/day' dB 'digits/year' Y 'digits/at' k 'hours' M 'minutes'", NULL);
+		} else {
+			res = ast_say_date_with_format(chan, t, AST_DIGIT_ANY, ast_channel_language(chan), "'vm-received' q 'digits/at' IMp", NULL);
+		}
 	}
 #if 0
 	pbx_builtin_setvar_helper(chan, "DIFF_DAY", NULL);
@@ -8385,15 +8542,31 @@
 					 * and if found, use that instead of saying number. */
 					if (ast_fileexists(prefile, NULL, NULL) > 0) {
 						ast_verb(3, "Playing envelope info: CID number '%s' matches mailbox number, playing recorded name\n", callerid);
-						if (!callback)
-							res = wait_file2(chan, vms, "vm-from");
-						res = ast_stream_and_wait(chan, prefile, "");
+						if (ast_using_saysentence()) {
+							if (!callback) {
+								res = ast_say_sentence(chan, "", "<vm-from>%z", prefile);
+							} else {
+								res = ast_say_sentence(chan, "", "%z", prefile);
+							}
+						} else {
+							if (!callback)
+								res = wait_file2(chan, vms, "vm-from");
+							res = ast_stream_and_wait(chan, prefile, "");
+						}
 					} else {
 						ast_verb(3, "Playing envelope info: message from '%s'\n", callerid);
 						/* Say "from extension" as one saying to sound smoother */
-						if (!callback)
-							res = wait_file2(chan, vms, "vm-from-extension");
-						res = ast_say_digit_str(chan, callerid, "", ast_channel_language(chan));
+						if (ast_using_saysentence()) {
+							if (!callback) {
+								res = ast_say_sentence(chan, "", "<vm-from-extension>%i", callerid);
+							} else {
+								res = ast_say_sentence(chan, "", "%i", callerid);
+							}
+						} else {
+							if (!callback)
+								res = wait_file2(chan, vms, "vm-from-extension");
+							res = ast_say_digit_str(chan, callerid, "", ast_channel_language(chan));
+						}
 					}
 				}
 			}
@@ -8405,23 +8578,40 @@
 				snprintf(prefile, sizeof(prefile), "%s/recordings/callerids/%s", ast_config_AST_SPOOL_DIR, callerid);
 				if (!saycidnumber && ast_fileexists(prefile, NULL, NULL) > 0) {
 					ast_verb(3, "Playing recorded name for CID number '%s' - '%s'\n", callerid,prefile);
-					wait_file2(chan, vms, "vm-from");
-					res = ast_stream_and_wait(chan, prefile, "");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, "", "<vm-from>%z", prefile);
+					} else {
+						wait_file2(chan, vms, "vm-from");
+						res = ast_stream_and_wait(chan, prefile, "");
+					}
 					ast_verb(3, "Played recorded name result '%d'\n", res);
 				} else {
 					/* Since this is all nicely figured out, why not say "from phone number" in this case" */
-					wait_file2(chan, vms, "vm-from-phonenumber");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-from-phonenumber>%i", callerid);
+					} else {
+						wait_file2(chan, vms, "vm-from-phonenumber");
+						res = ast_say_digit_str(chan, callerid, AST_DIGIT_ANY, ast_channel_language(chan));
+					}
+				}
+			} else {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "%i", callerid);
+				} else {
 					res = ast_say_digit_str(chan, callerid, AST_DIGIT_ANY, ast_channel_language(chan));
 				}
-			} else {
-				res = ast_say_digit_str(chan, callerid, AST_DIGIT_ANY, ast_channel_language(chan));
 			}
 		}
 	} else {
 		/* Number unknown */
 		ast_debug(1, "VM-CID: From an unknown number\n");
 		/* Say "from an unknown caller" as one phrase - it is already recorded by "the voice" anyhow */
-		res = wait_file2(chan, vms, "vm-unknown-caller");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-unknown-caller>");
+		} else {
+
+			res = wait_file2(chan, vms, "vm-unknown-caller");
+		}
 	}
 	return res;
 }
@@ -8442,35 +8632,40 @@
 	ast_debug(1, "VM-Duration: duration is: %d seconds converted to: %d minutes\n", durations, durationm);
 
 	if ((!res) && (durationm >= minduration)) {
-		res = wait_file2(chan, vms, "vm-duration");
 
 		/* POLISH syntax */
-		if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
-			div_t num = div(durationm, 10);
-
-			if (durationm == 1) {
-				res = ast_play_and_wait(chan, "digits/1z");
-				res = res ? res : ast_play_and_wait(chan, "vm-minute-ta");
-			} else if (num.rem > 1 && num.rem < 5 && num.quot != 1) {
-				if (num.rem == 2) {
-					if (!num.quot) {
-						res = ast_play_and_wait(chan, "digits/2-ie");
+		if (!ast_using_saysentence()) {
+			if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
+				div_t num = div(durationm, 10);
+	
+				res = wait_file2(chan, vms, "vm-duration");
+				if (durationm == 1) {
+					res = ast_play_and_wait(chan, "digits/1z");
+					res = res ? res : ast_play_and_wait(chan, "vm-minute-ta");
+				} else if (num.rem > 1 && num.rem < 5 && num.quot != 1) {
+					if (num.rem == 2) {
+						if (!num.quot) {
+							res = ast_play_and_wait(chan, "digits/2-ie");
+						} else {
+							res = say_and_wait(chan, durationm - 2 , ast_channel_language(chan));
+							res = res ? res : ast_play_and_wait(chan, "digits/2-ie");
+						}
 					} else {
-						res = say_and_wait(chan, durationm - 2 , ast_channel_language(chan));
-						res = res ? res : ast_play_and_wait(chan, "digits/2-ie");
+						res = say_and_wait(chan, durationm, ast_channel_language(chan));
 					}
+					res = res ? res : ast_play_and_wait(chan, "vm-minute-ty");
 				} else {
 					res = say_and_wait(chan, durationm, ast_channel_language(chan));
+					res = res ? res : ast_play_and_wait(chan, "vm-minute-t");
 				}
-				res = res ? res : ast_play_and_wait(chan, "vm-minute-ty");
+			/* DEFAULT syntax */
 			} else {
-				res = say_and_wait(chan, durationm, ast_channel_language(chan));
-				res = res ? res : ast_play_and_wait(chan, "vm-minute-t");
+				res = wait_file2(chan, vms, "vm-duration");
+				res = ast_say_number(chan, durationm, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
+				res = wait_file2(chan, vms, "vm-minutes");
 			}
-		/* DEFAULT syntax */
 		} else {
-			res = ast_say_number(chan, durationm, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
-			res = wait_file2(chan, vms, "vm-minutes");
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-duration>%n<vm-minutes>", durationm);
 		}
 	}
 	return res;
@@ -8487,11 +8682,6 @@
 	vms->starting = 0;
 	make_file(vms->fn, sizeof(vms->fn), vms->curdir, vms->curmsg);
 	adsi_message(chan, vms);
-	if (!vms->curmsg) {
-		res = wait_file2(chan, vms, "vm-first");	/* "First" */
-	} else if (vms->curmsg == vms->lastmsg) {
-		res = wait_file2(chan, vms, "vm-last");		/* "last" */
-	}
 
 	snprintf(filename, sizeof(filename), "%s.txt", vms->fn);
 	RETRIEVE(vms->curdir, vms->curmsg, vmu->mailbox, vmu->context);
@@ -8502,78 +8692,107 @@
 	}
 	flag = ast_variable_retrieve(msg_cfg, "message", "flag");
 
-	/* Play the word urgent if we are listening to urgent messages */
-	if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
-		res = wait_file2(chan, vms, "vm-Urgent");	/* "urgent" */
-	}
-
-	if (!res) {
-		/* XXX Why are we playing messages above, and then playing the same language-specific stuff here? */
-		/* POLISH syntax */
-		if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
-			if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
-				int ten, one;
-				char nextmsg[256];
-				ten = (vms->curmsg + 1) / 10;
-				one = (vms->curmsg + 1) % 10;
-
-				if (vms->curmsg < 20) {
-					snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", vms->curmsg + 1);
-					res = wait_file2(chan, vms, nextmsg);
-				} else {
-					snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", ten * 10);
-					res = wait_file2(chan, vms, nextmsg);
-					if (one > 0) {
-						if (!res) {
-							snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", one);
-							res = wait_file2(chan, vms, nextmsg);
-						}
-					}
-				}
-			}
-			if (!res)
-				res = wait_file2(chan, vms, "vm-message");
-		/* HEBREW syntax */
-		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {
-			if (!vms->curmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-first");
-			} else if (vms->curmsg == vms->lastmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-last");
+	if (ast_using_saysentence()) {
+		if (!vms->curmsg) {
+			if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-first><vm-Urgent><vm-message>");
 			} else {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-number");
-				res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-first><vm-message>");
 			}
-		/* VIETNAMESE syntax */
-		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
-			if (!vms->curmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-first");
-			} else if (vms->curmsg == vms->lastmsg) {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-last");
+		} else if (vms->curmsg == vms->lastmsg) {
+			if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-last><vm-Urgent><vm-message>");
 			} else {
-				res = wait_file2(chan, vms, "vm-message");
-				res = wait_file2(chan, vms, "vm-number");
-				res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-last><vm-message>");
 			}
+		
 		} else {
-			if (!strncasecmp(ast_channel_language(chan), "se", 2)) { /* SWEDISH syntax */
-				res = wait_file2(chan, vms, "vm-meddelandet");  /* "message" */
-			} else { /* DEFAULT syntax */
-				res = wait_file2(chan, vms, "vm-message");
+			if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-Urgent><vm-message>%n", vms->curmsg+1);
+			} else {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-message>%n", vms->curmsg+1);
 			}
-			if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
-				if (!res) {
-					ast_test_suite_event_notify("PLAYBACK", "Message: message number");
-					res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
+		}
+	} else {
+
+		if (!vms->curmsg) {
+			res = wait_file2(chan, vms, "vm-first");	/* "First" */
+		} else if (vms->curmsg == vms->lastmsg) {
+			res = wait_file2(chan, vms, "vm-last");		/* "last" */
+		}
+
+		/* Play the word urgent if we are listening to urgent messages */
+		if (!ast_strlen_zero(flag) && !strcmp(flag, "Urgent")) {
+			res = wait_file2(chan, vms, "vm-Urgent");	/* "urgent" */
+		}
+
+		if (!res) {
+			/* XXX Why are we playing messages above, and then playing the same language-specific stuff here? */
+			/* POLISH syntax */
+			if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
+				if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
+					int ten, one;
+					char nextmsg[256];
+					ten = (vms->curmsg + 1) / 10;
+					one = (vms->curmsg + 1) % 10;
+	
+					if (vms->curmsg < 20) {
+						snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", vms->curmsg + 1);
+						res = wait_file2(chan, vms, nextmsg);
+					} else {
+						snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", ten * 10);
+						res = wait_file2(chan, vms, nextmsg);
+						if (one > 0) {
+							if (!res) {
+								snprintf(nextmsg, sizeof(nextmsg), "digits/n-%d", one);
+								res = wait_file2(chan, vms, nextmsg);
+							}
+						}
+					}
 				}
+				if (!res)
+					res = wait_file2(chan, vms, "vm-message");
+			/* HEBREW syntax */
+			} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {
+				if (!vms->curmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-first");
+				} else if (vms->curmsg == vms->lastmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-last");
+				} else {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-number");
+					res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				}
+			/* VIETNAMESE syntax */
+			} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
+				if (!vms->curmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-first");
+				} else if (vms->curmsg == vms->lastmsg) {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-last");
+				} else {
+					res = wait_file2(chan, vms, "vm-message");
+					res = wait_file2(chan, vms, "vm-number");
+					res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), "f");
+				}
+			} else {
+				if (!strncasecmp(ast_channel_language(chan), "se", 2)) { /* SWEDISH syntax */
+					res = wait_file2(chan, vms, "vm-meddelandet");  /* "message" */
+				} else { /* DEFAULT syntax */
+					res = wait_file2(chan, vms, "vm-message");
+				}
+				if (vms->curmsg && (vms->curmsg != vms->lastmsg)) {
+					if (!res) {
+						ast_test_suite_event_notify("PLAYBACK", "Message: message number");
+						res = ast_say_number(chan, vms->curmsg + 1, AST_DIGIT_ANY, ast_channel_language(chan), NULL);
+					}
+				}
 			}
 		}
 	}
-
 	if (!valid_config(msg_cfg)) {
 		ast_log(AST_LOG_WARNING, "No message attribute file?!! (%s)\n", filename);
 		return 0;
@@ -8920,27 +9139,32 @@
 
 static int vm_play_folder_name(struct ast_channel *chan, char *box)
 {
-	int cmd;
-
-	if (  !strncasecmp(ast_channel_language(chan), "it", 2) ||
-		  !strncasecmp(ast_channel_language(chan), "es", 2) ||
-		  !strncasecmp(ast_channel_language(chan), "pt", 2)) { /* Italian, Spanish, or Portuguese syntax */
-		cmd = ast_play_and_wait(chan, "vm-messages"); /* "messages */
-		return cmd ? cmd : ast_play_and_wait(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {
-		return vm_play_folder_name_gr(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* Hebrew syntax */
-		return ast_play_and_wait(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
-		return vm_play_folder_name_pl(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* Ukrainian syntax */
-		return vm_play_folder_name_ua(chan, box);
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
-		return ast_play_and_wait(chan, box);
-	} else {  /* Default English */
-		cmd = ast_play_and_wait(chan, box);
-		return cmd ? cmd : ast_play_and_wait(chan, "vm-messages"); /* "messages */
+	int cmd=0;
+	
+	if (ast_using_saysentence()) {
+		cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-messages", box);
+	} else {
+		if (  !strncasecmp(ast_channel_language(chan), "it", 2) ||
+			  !strncasecmp(ast_channel_language(chan), "es", 2) ||
+			  !strncasecmp(ast_channel_language(chan), "pt", 2)) { /* Italian, Spanish, or Portuguese syntax */
+				cmd = ast_play_and_wait(chan, "vm-messages"); /* "messages */
+				return cmd ? cmd : ast_play_and_wait(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {
+			return vm_play_folder_name_gr(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* Hebrew syntax */
+			return ast_play_and_wait(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {
+			return vm_play_folder_name_pl(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* Ukrainian syntax */
+			return vm_play_folder_name_ua(chan, box);
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {
+			return ast_play_and_wait(chan, box);
+		} else {  /* Default English */
+			cmd = ast_play_and_wait(chan, box);
+			return cmd ? cmd : ast_play_and_wait(chan, "vm-messages"); /* "messages */
+		}
 	}
+	return cmd;
 }
 
 /* GREEK SYNTAX
@@ -8988,7 +9212,7 @@
 				res = ast_play_and_wait(chan, "vm-messages");
 		}
 	} else if (!vms->oldmessages && !vms->newmessages) 
-		res = ast_play_and_wait(chan, "vm-denExeteMynhmata"); 
+		res = ast_play_and_wait(chan, "vm-denExeteMynhmata");
 	return res;
 }
 
@@ -9154,59 +9378,91 @@
 	}
 	return res;
 }
-	
+
+
+
 /* Default English syntax */
 static int vm_intro_en(struct ast_channel *chan, struct vm_state *vms)
 {
 	int res;
-
 	/* Introduce messages they have */
-	res = ast_play_and_wait(chan, "vm-youhave");
-	if (!res) {
+	if (ast_using_saysentence()) {
+		int something_said=0;
 		if (vms->urgentmessages) {
-			res = say_and_wait(chan, vms->urgentmessages, ast_channel_language(chan));
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-Urgent");
-			if ((vms->oldmessages || vms->newmessages) && !res) {
-				res = ast_play_and_wait(chan, "vm-and");
-			} else if (!res) {
-				if ((vms->urgentmessages == 1))
-					res = ast_play_and_wait(chan, "vm-message");
-				else
-					res = ast_play_and_wait(chan, "vm-messages");
-			}
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave>%n<vm-Urgent><vm-messages>", vms->urgentmessages); /* now before you have a cow about the messages vs message issue, 
+																	let me tell you that the translation file should specify these
+																	kinds of variances. NOT the say_sentence call itself. */
+			something_said = 1;
 		}
+		if (res)
+			return res;
 		if (vms->newmessages) {
-			res = say_and_wait(chan, vms->newmessages, ast_channel_language(chan));
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-INBOX");
-			if (vms->oldmessages && !res)
-				res = ast_play_and_wait(chan, "vm-and");
-			else if (!res) {
-				if ((vms->newmessages == 1))
-					res = ast_play_and_wait(chan, "vm-message");
-				else
-					res = ast_play_and_wait(chan, "vm-messages");
+			if (something_said) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-and>%n<vm-INBOX><vm-messages>", vms->newmessages);
+			} else {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave>%n<vm-INBOX><vm-messages>", vms->newmessages);
 			}
-				
 		}
-		if (!res && vms->oldmessages) {
-			res = say_and_wait(chan, vms->oldmessages, ast_channel_language(chan));
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-Old");
-			if (!res) {
-				if (vms->oldmessages == 1)
-					res = ast_play_and_wait(chan, "vm-message");
-				else
-					res = ast_play_and_wait(chan, "vm-messages");
+		if (res)
+			return res;
+		if (vms->oldmessages) {
+			if (something_said) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-and>%n<vm-INBOX><vm-messages>", vms->oldmessages);
+			} else {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave>%n<vm-INBOX><vm-messages>", vms->oldmessages);
 			}
 		}
+		if (res)
+			return res;
+		res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-messages>");
+	} else {
+		res = ast_play_and_wait(chan, "vm-youhave");
 		if (!res) {
-			if (!vms->urgentmessages && !vms->oldmessages && !vms->newmessages) {
-				res = ast_play_and_wait(chan, "vm-no");
+			if (vms->urgentmessages) {
+				res = say_and_wait(chan, vms->urgentmessages, ast_channel_language(chan));
 				if (!res)
-					res = ast_play_and_wait(chan, "vm-messages");
+					res = ast_play_and_wait(chan, "vm-Urgent");
+				if ((vms->oldmessages || vms->newmessages) && !res) {
+					res = ast_play_and_wait(chan, "vm-and");
+				} else if (!res) {
+					if ((vms->urgentmessages == 1))
+						res = ast_play_and_wait(chan, "vm-message");
+					else
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
 			}
+			if (vms->newmessages) {
+				res = say_and_wait(chan, vms->newmessages, ast_channel_language(chan));
+				if (!res)
+					res = ast_play_and_wait(chan, "vm-INBOX");
+				if (vms->oldmessages && !res)
+					res = ast_play_and_wait(chan, "vm-and");
+				else if (!res) {
+					if ((vms->newmessages == 1))
+						res = ast_play_and_wait(chan, "vm-message");
+					else
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
+					
+			}
+			if (!res && vms->oldmessages) {
+				res = say_and_wait(chan, vms->oldmessages, ast_channel_language(chan));
+				if (!res)
+					res = ast_play_and_wait(chan, "vm-Old");
+				if (!res) {
+					if (vms->oldmessages == 1)
+						res = ast_play_and_wait(chan, "vm-message");
+					else
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
+			}
+			if (!res) {
+				if (!vms->urgentmessages && !vms->oldmessages && !vms->newmessages) {
+					res = ast_play_and_wait(chan, "vm-no");
+					if (!res)
+						res = ast_play_and_wait(chan, "vm-messages");
+				}
+			}
 		}
 	}
 	return res;
@@ -9221,7 +9477,7 @@
 		res =	ast_play_and_wait(chan, "vm-no") ||
 			ast_play_and_wait(chan, "vm-message");
 	else
-		res =	ast_play_and_wait(chan, "vm-youhave");
+		res = ast_play_and_wait(chan, "vm-youhave");
 	if (!res && vms->newmessages) {
 		res = (vms->newmessages == 1) ?
 			ast_play_and_wait(chan, "digits/un") ||
@@ -9232,7 +9488,7 @@
 			ast_play_and_wait(chan, "vm-nuovi") ||
 			ast_play_and_wait(chan, "vm-messages");
 		if (!res && vms->oldmessages)
-			res =	ast_play_and_wait(chan, "vm-and");
+			res = ast_play_and_wait(chan, "vm-and");
 	}
 	if (!res && vms->oldmessages) {
 		res = (vms->oldmessages == 1) ?
@@ -9828,7 +10084,7 @@
 		if (!res && vms->oldmessages) {
 			res = say_and_wait(chan, vms->oldmessages, ast_channel_language(chan));
 			if (!res)
-				res = ast_play_and_wait(chan, "vm-Old");			
+				res = ast_play_and_wait(chan, "vm-Old");
 		}
 		if (!res) {
 			if (!vms->oldmessages && !vms->newmessages) {
@@ -9841,6 +10097,11 @@
 	return res;
 }
 
+/*  ============ NOTICE ============================
+    This message, and all the avbove language-specific functions should be removed once say_sentence
+    is standard */
+
+
 static int vm_intro(struct ast_channel *chan, struct ast_vm_user *vmu, struct vm_state *vms)
 {
 	char prefile[256];
@@ -9850,55 +10111,63 @@
 	if (ast_test_flag(vmu, VM_TEMPGREETWARN)) {
 		RETRIEVE(prefile, -1, vmu->mailbox, vmu->context);
 		if (ast_fileexists(prefile, NULL, NULL) > 0) {
-			ast_play_and_wait(chan, "vm-tempgreetactive");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempgreetactive>");
+			} else {
+				ast_play_and_wait(chan, "vm-tempgreetactive");
+			}
 		}
 		DISPOSE(prefile, -1);
 	}
 
 	/* Play voicemail intro - syntax is different for different languages */
-	if (0) {
-		return 0;
-	} else if (!strncasecmp(ast_channel_language(chan), "cs", 2)) {  /* CZECH syntax */
-		return vm_intro_cs(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "cz", 2)) {  /* deprecated CZECH syntax */
-		static int deprecation_warning = 0;
-		if (deprecation_warning++ % 10 == 0) {
-			ast_log(LOG_WARNING, "cz is not a standard language code.  Please switch to using cs instead.\n");
+	if (!ast_using_saysentence()) {
+		if (0) {
+			return 0;
+		} else if (!strncasecmp(ast_channel_language(chan), "cs", 2)) {  /* CZECH syntax */
+			return vm_intro_cs(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "cz", 2)) {  /* deprecated CZECH syntax */
+			static int deprecation_warning = 0;
+			if (deprecation_warning++ % 10 == 0) {
+				ast_log(LOG_WARNING, "cz is not a standard language code.  Please switch to using cs instead.\n");
+			}
+			return vm_intro_cs(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {  /* GERMAN syntax */
+			return vm_intro_de(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "es", 2)) {  /* SPANISH syntax */
+			return vm_intro_es(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "fr", 2)) {  /* FRENCH syntax */
+			return vm_intro_fr(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK syntax */
+			return vm_intro_gr(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW syntax */
+			return vm_intro_he(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN syntax */
+			return vm_intro_it(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {  /* DUTCH syntax */
+			return vm_intro_nl(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {  /* NORWEGIAN syntax */
+			return vm_intro_no(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {  /* POLISH syntax */
+			return vm_intro_pl(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* BRAZILIAN PORTUGUESE syntax */
+			return vm_intro_pt_BR(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE syntax */
+			return vm_intro_pt(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "ru", 2)) {  /* RUSSIAN syntax */
+			return vm_intro_multilang(chan, vms, "n");
+		} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {  /* SWEDISH syntax */
+			return vm_intro_se(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* UKRAINIAN syntax */
+			return vm_intro_multilang(chan, vms, "n");
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) { /* VIETNAMESE syntax */
+			return vm_intro_vi(chan, vms);
+		} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
+			return vm_intro_zh(chan, vms);
+		} else {                                             /* Default to ENGLISH */
+			return vm_intro_en(chan, vms);
 		}
-		return vm_intro_cs(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "de", 2)) {  /* GERMAN syntax */
-		return vm_intro_de(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "es", 2)) {  /* SPANISH syntax */
-		return vm_intro_es(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "fr", 2)) {  /* FRENCH syntax */
-		return vm_intro_fr(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK syntax */
-		return vm_intro_gr(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW syntax */
-		return vm_intro_he(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN syntax */
-		return vm_intro_it(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "nl", 2)) {  /* DUTCH syntax */
-		return vm_intro_nl(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "no", 2)) {  /* NORWEGIAN syntax */
-		return vm_intro_no(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "pl", 2)) {  /* POLISH syntax */
-		return vm_intro_pl(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt_BR", 5)) {  /* BRAZILIAN PORTUGUESE syntax */
-		return vm_intro_pt_BR(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE syntax */
-		return vm_intro_pt(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "ru", 2)) {  /* RUSSIAN syntax */
-		return vm_intro_multilang(chan, vms, "n");
-	} else if (!strncasecmp(ast_channel_language(chan), "se", 2)) {  /* SWEDISH syntax */
-		return vm_intro_se(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "ua", 2)) {  /* UKRAINIAN syntax */
-		return vm_intro_multilang(chan, vms, "n");
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) { /* VIETNAMESE syntax */
-		return vm_intro_vi(chan, vms);
-	} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
-		return vm_intro_zh(chan, vms);
-	} else {                                             /* Default to ENGLISH */
+	} else {
 		return vm_intro_en(chan, vms);
 	}
 }
@@ -9908,77 +10177,143 @@
 	int res = 0;
 	/* Play instructions and wait for new command */
 	while (!res) {
-		if (vms->starting) {
-			if (vms->lastmsg > -1) {
-				if (skipadvanced)
-					res = ast_play_and_wait(chan, "vm-onefor-full");
-				else
-					res = ast_play_and_wait(chan, "vm-onefor");
+
+		if (ast_using_saysentence()) {
+			if (vms->starting) {
+				if (vms->lastmsg > -1) {
+					if (skipadvanced)
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor-full>%z.<vm-opts-full>.", vms->vmbox);
+					else
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor>%z.<vm-opts>.", vms->vmbox);
+				}
+			} else {
+				/* Added for additional help */
+				if (skipadvanced) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor-full>%z<vm-opts-full>.", vms->vmbox);
+				}
+				/* Logic:
+				 * If the current message is not the first OR
+				 * if we're listening to the first new message and there are
+				 * also urgent messages, then prompt for navigation to the
+				 * previous message
+				 */
+				if (vms->curmsg || (!in_urgent && vms->urgentmessages > 0) || (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0)) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-prev>");
+				}
+				if (!res && !skipadvanced)
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-advopts>");
 				if (!res)
-					res = vm_play_folder_name(chan, vms->vmbox);
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-repeat>"); /* I'm tired of changing these... I'll let the macro do the work for now */
+				/* Logic:
+				 * If we're not listening to the last message OR
+				 * we're listening to the last urgent message and there are
+				 * also new non-urgent messages, then prompt for navigation
+				 * to the next message
+				 */
+				if (!res && ((vms->curmsg != vms->lastmsg) || (in_urgent && vms->newmessages > 0) ||
+					(ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0) )) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-next>");
+				}
+				if (!res) {
+					int curmsg_deleted;
+#ifdef IMAP_STORAGE
+					ast_mutex_lock(&vms->lock);
+#endif
+					curmsg_deleted = vms->deleted[vms->curmsg];
+#ifdef IMAP_STORAGE
+					ast_mutex_unlock(&vms->lock);
+#endif
+					if (!curmsg_deleted) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-delete>");  /* all of these are standalone sentences */
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-undelete>");
+					}
+					if (!res) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-toforward>");
+					}
+					if (!res) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-savemessage>");
+					}
+				}
 			}
 			if (!res) {
-				if (skipadvanced)
-					res = ast_play_and_wait(chan, "vm-opts-full");
-				else
-					res = ast_play_and_wait(chan, "vm-opts");
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-helpexit>");
 			}
 		} else {
-			/* Added for additional help */
-			if (skipadvanced) {
-				res = ast_play_and_wait(chan, "vm-onefor-full");
+			if (vms->starting) {
+				if (vms->lastmsg > -1) {
+					if (skipadvanced)
+						res = ast_play_and_wait(chan, "vm-onefor-full");
+					else
+						res = ast_play_and_wait(chan, "vm-onefor");
+					if (!res)
+						res = vm_play_folder_name(chan, vms->vmbox);
+				}
+				if (!res) {
+					if (skipadvanced)
+						res = ast_play_and_wait(chan, "vm-opts-full");
+					else
+						res = ast_play_and_wait(chan, "vm-opts");
+				}
+			} else {
+				/* Added for additional help */
+				if (skipadvanced) {
+					res = ast_play_and_wait(chan, "vm-onefor-full");
+					if (!res)
+						res = vm_play_folder_name(chan, vms->vmbox);
+					res = ast_play_and_wait(chan, "vm-opts-full");
+				}
+				/* Logic:
+				 * If the current message is not the first OR
+				 * if we're listening to the first new message and there are
+				 * also urgent messages, then prompt for navigation to the
+				 * previous message
+				 */
+				if (vms->curmsg || (!in_urgent && vms->urgentmessages > 0) || (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0)) {
+					res = ast_play_and_wait(chan, "vm-prev");
+				}
+				if (!res && !skipadvanced)
+					res = ast_play_and_wait(chan, "vm-advopts");
 				if (!res)
-					res = vm_play_folder_name(chan, vms->vmbox);
-				res = ast_play_and_wait(chan, "vm-opts-full");
-			}
-			/* Logic:
-			 * If the current message is not the first OR
-			 * if we're listening to the first new message and there are
-			 * also urgent messages, then prompt for navigation to the
-			 * previous message
-			 */
-			if (vms->curmsg || (!in_urgent && vms->urgentmessages > 0) || (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0)) {
-				res = ast_play_and_wait(chan, "vm-prev");
-			}
-			if (!res && !skipadvanced)
-				res = ast_play_and_wait(chan, "vm-advopts");
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-repeat");
-			/* Logic:
-			 * If we're not listening to the last message OR
-			 * we're listening to the last urgent message and there are
-			 * also new non-urgent messages, then prompt for navigation
-			 * to the next message
-			 */
-			if (!res && ((vms->curmsg != vms->lastmsg) || (in_urgent && vms->newmessages > 0) ||
-				(ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0) )) {
-				res = ast_play_and_wait(chan, "vm-next");
-			}
-			if (!res) {
-				int curmsg_deleted;
-#ifdef IMAP_STORAGE
-				ast_mutex_lock(&vms->lock);
+					res = ast_play_and_wait(chan, "vm-repeat");
+				/* Logic:
+				 * If we're not listening to the last message OR
+				 * we're listening to the last urgent message and there are
+				 * also new non-urgent messages, then prompt for navigation
+				 * to the next message
+				 */
+				if (!res && ((vms->curmsg != vms->lastmsg) || (in_urgent && vms->newmessages > 0) ||
+					(ast_test_flag(vmu, VM_MESSAGEWRAP) && vms->lastmsg > 0) )) {
+					res = ast_play_and_wait(chan, "vm-next");
+				}
+				if (!res) {
+					int curmsg_deleted;
+#ifdef 	IMAP_STORAGE
+					ast_mutex_lock(&vms->lock);
 #endif
-				curmsg_deleted = vms->deleted[vms->curmsg];
+					curmsg_deleted = vms->deleted[vms->curmsg];
 #ifdef IMAP_STORAGE
-				ast_mutex_unlock(&vms->lock);
+					ast_mutex_unlock(&vms->lock);
 #endif
-				if (!curmsg_deleted) {
-					res = ast_play_and_wait(chan, "vm-delete");
-				} else {
-					res = ast_play_and_wait(chan, "vm-undelete");
+					if (!curmsg_deleted) {
+						res = ast_play_and_wait(chan, "vm-delete");
+					} else {
+						res = ast_play_and_wait(chan, "vm-undelete");
+					}
+					if (!res) {
+						res = ast_play_and_wait(chan, "vm-toforward");
+					}
+					if (!res) {
+						res = ast_play_and_wait(chan, "vm-savemessage");
+					}
 				}
-				if (!res) {
-					res = ast_play_and_wait(chan, "vm-toforward");
-				}
-				if (!res) {
-					res = ast_play_and_wait(chan, "vm-savemessage");
-				}
 			}
+	
+			if (!res) {
+				res = ast_play_and_wait(chan, "vm-helpexit");
+			}
 		}
-		if (!res) {
-			res = ast_play_and_wait(chan, "vm-helpexit");
-		}
+
 		if (!res)
 			res = ast_waitfordigit(chan, 6000);
 		if (!res) {
@@ -10017,10 +10352,14 @@
 
 static int vm_instructions(struct ast_channel *chan, struct ast_vm_user *vmu, struct vm_state *vms, int skipadvanced, int in_urgent)
 {
-	if (vms->starting && !strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
-		return vm_instructions_zh(chan, vmu, vms, skipadvanced, in_urgent);
-	} else {					/* Default to ENGLISH */
+	if (ast_using_saysentence()) {
 		return vm_instructions_en(chan, vmu, vms, skipadvanced, in_urgent);
+	} else {
+		if (vms->starting && !strncasecmp(ast_channel_language(chan), "zh", 2)) { /* CHINESE (Taiwan) syntax */
+			return vm_instructions_zh(chan, vmu, vms, skipadvanced, in_urgent);
+		} else {					/* Default to ENGLISH */
+			return vm_instructions_en(chan, vmu, vms, skipadvanced, in_urgent);
+		}
 	}
 }
 
@@ -10079,7 +10418,11 @@
 	 */
 	for (;;) {
 		newpassword[1] = '\0';
-		newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+		if (ast_using_saysentence()) {
+			newpassword[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-newpassword>");
+		} else {
+			newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+		}
 		if (cmd == '#')
 			newpassword[0] = '\0';
 		if (cmd < 0 || cmd == 't' || cmd == '#')
@@ -10090,10 +10433,18 @@
 		cmd = check_password(vmu, newpassword); /* perform password validation */
 		if (cmd != 0) {
 			ast_log(AST_LOG_NOTICE, "Invalid password for user %s (%s)\n", vms->username, newpassword);
-			cmd = ast_play_and_wait(chan, vm_invalid_password);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-invalid-password>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_invalid_password);
+			}
 		} else {
 			newpassword2[1] = '\0';
-			newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			if (ast_using_saysentence()) {
+				newpassword2[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm_reenterpassword>");
+			} else {
+				newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			}
 			if (cmd == '#')
 				newpassword2[0] = '\0';
 			if (cmd < 0 || cmd == 't' || cmd == '#')
@@ -10104,12 +10455,20 @@
 			if (!strcmp(newpassword, newpassword2))
 				break;
 			ast_log(AST_LOG_NOTICE, "Password mismatch for user %s (%s != %s)\n", vms->username, newpassword, newpassword2);
-			cmd = ast_play_and_wait(chan, vm_mismatch);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mismatch>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_mismatch);
+			}
 		}
 		if (++tries == 3)
 			return -1;
 		if (cmd != 0) {
-			cmd = ast_play_and_wait(chan, vm_pls_try_again);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-pls-try-again>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_pls_try_again);
+			}
 		}
 	}
 	if (pwdchange & PWDCHANGE_INTERNAL)
@@ -10118,7 +10477,11 @@
 		vm_change_password_shell(vmu, newpassword);
 
 	ast_debug(1, "User %s set password to %s of length %d\n", vms->username, newpassword, (int) strlen(newpassword));
-	cmd = ast_play_and_wait(chan, vm_passchanged);
+	if (ast_using_saysentence()) {
+		cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-passchanged>");
+	} else {
+		cmd = ast_play_and_wait(chan, vm_passchanged);
+	}
 
 	return cmd;
 }
@@ -10164,11 +10527,19 @@
 			break;
 		case '5': /* change password */
 			if (vmu->password[0] == '-') {
-				cmd = ast_play_and_wait(chan, "vm-no");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-no>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-no");
+				}
 				break;
 			}
 			newpassword[1] = '\0';
-			newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+			if (ast_using_saysentence()) {
+				newpassword[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-newpassword>");
+			} else {
+				newpassword[0] = cmd = ast_play_and_wait(chan, vm_newpassword);
+			}
 			if (cmd == '#')
 				newpassword[0] = '\0';
 			else {
@@ -10181,14 +10552,22 @@
 			cmd = check_password(vmu, newpassword); /* perform password validation */
 			if (cmd != 0) {
 				ast_log(AST_LOG_NOTICE, "Invalid password for user %s (%s)\n", vms->username, newpassword);
-				cmd = ast_play_and_wait(chan, vm_invalid_password);
-				if (!cmd) {
-					cmd = ast_play_and_wait(chan, vm_pls_try_again);
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-invalid-password><vm-pls-try-again>");
+				} else {
+					cmd = ast_play_and_wait(chan, vm_invalid_password);
+					if (!cmd) {
+						cmd = ast_play_and_wait(chan, vm_pls_try_again);
+					}
 				}
 				break;
 			}
 			newpassword2[1] = '\0';
-			newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			if (ast_using_saysentence()) {
+				newpassword[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-reenterpassword>");
+			} else {
+				newpassword2[0] = cmd = ast_play_and_wait(chan, vm_reenterpassword);
+			}
 			if (cmd == '#')
 				newpassword2[0] = '\0';
 			else {
@@ -10201,9 +10580,14 @@
 			}
 			if (strcmp(newpassword, newpassword2)) {
 				ast_log(AST_LOG_NOTICE, "Password mismatch for user %s (%s != %s)\n", vms->username, newpassword, newpassword2);
-				cmd = ast_play_and_wait(chan, vm_mismatch);
-				if (!cmd) {
-					cmd = ast_play_and_wait(chan, vm_pls_try_again);
+				
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mismatch><vm-pls-try-again>");
+				} else {
+					cmd = ast_play_and_wait(chan, vm_mismatch);
+					if (!cmd) {
+						cmd = ast_play_and_wait(chan, vm_pls_try_again);
+					}
 				}
 				break;
 			}
@@ -10217,7 +10601,11 @@
 
 			ast_debug(1, "User %s set password to %s of length %d\n",
 				vms->username, newpassword, (int) strlen(newpassword));
-			cmd = ast_play_and_wait(chan, vm_passchanged);
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-passchanged>");
+			} else {
+				cmd = ast_play_and_wait(chan, vm_passchanged);
+			}
 			break;
 		case '*':
 			cmd = 't';
@@ -10227,11 +10615,19 @@
 			snprintf(prefile, sizeof(prefile), "%s%s/%s/temp", VM_SPOOL_DIR, vmu->context, vms->username);
 			RETRIEVE(prefile, -1, vmu->mailbox, vmu->context);
 			if (ast_fileexists(prefile, NULL, NULL)) {
-				cmd = ast_play_and_wait(chan, "vm-tmpexists");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tmpexists>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-tmpexists");
+				}
 			}
 			DISPOSE(prefile, -1);
 			if (!cmd) {
-				cmd = ast_play_and_wait(chan, "vm-options");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-options>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-options");
+				}
 			}
 			if (!cmd) {
 				cmd = ast_waitfordigit(chan, 6000);
@@ -10303,16 +10699,28 @@
 				break;
 			case '2':
 				DELETE(prefile, -1, prefile, vmu);
-				ast_play_and_wait(chan, "vm-tempremoved");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempremoved>");
+				} else {
+					ast_play_and_wait(chan, "vm-tempremoved");
+				}
 				cmd = 't';	
 				break;
 			case '*': 
 				cmd = 't';
 				break;
 			default:
-				cmd = ast_play_and_wait(chan,
-					ast_fileexists(prefile, NULL, NULL) > 0 ? /* XXX always true ? */
-						"vm-tempgreeting2" : "vm-tempgreeting");
+				if (ast_using_saysentence()) {
+					if (ast_fileexists(prefile, NULL, NULL) > 0)
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempgreeting2>");
+					else
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tempgreeting>");
+	
+				} else {
+					cmd = ast_play_and_wait(chan,
+						ast_fileexists(prefile, NULL, NULL) > 0 ? /* XXX always true ? */
+							"vm-tempgreeting2" : "vm-tempgreeting");
+				}
 				if (!cmd) {
 					cmd = ast_waitfordigit(chan, 6000);
 				}
@@ -10332,6 +10740,57 @@
 	return cmd;
 }
 
+/*! 
+ * \brief Default English syntax for 'You have N messages' greeting.
+ * \param chan
+ * \param vms
+ * \param vmu
+ *
+ * \return zero on success, -1 on error.
+ */
+static int vm_browse_messages_en(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
+{
+	int cmd = 0;
+
+	if (vms->lastmsg > -1) {
+		cmd = play_message(chan, vmu, vms);
+	} else {
+		if (ast_using_saysentence()) {
+			if (!strcmp(vms->curbox, "INBOX"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-INBOX><vm-messages>");
+			else if (!strcmp(vms->curbox, "Old"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Old><vm-messages>");
+			else if (!strcmp(vms->curbox, "Urgent"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Urgent><vm-messages>");
+			else if (!strcmp(vms->curbox, "Work"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Work><vm-messages>");
+			else if (!strcmp(vms->curbox, "Friends"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Friends><vm-messages>");
+			else if (!strcmp(vms->curbox, "Family"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Family><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust1"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust1><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust2"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust2><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust3"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust3><vm-messages>");
+			else if (!strcmp(vms->curbox, "Cust4"))
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-youhave><vm-no><vm-Cust4><vm-messages>");
+		} else {
+			cmd = ast_play_and_wait(chan, "vm-youhave");
+			if (!cmd) 
+				cmd = ast_play_and_wait(chan, "vm-no");
+			if (!cmd) {
+				snprintf(vms->fn, sizeof(vms->fn), "vm-%s", vms->curbox);
+				cmd = ast_play_and_wait(chan, vms->fn);
+			}
+			if (!cmd)
+				cmd = ast_play_and_wait(chan, "vm-messages");
+		}
+	}
+	return cmd;
+}
+
 /*!
  * \brief Greek syntax for 'You have N messages' greeting.
  * \param chan
@@ -10340,6 +10799,7 @@
  *
  * \return zero on success, -1 on error.
  */	
+
 static int vm_browse_messages_gr(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
 {
 	int cmd = 0;
@@ -10384,34 +10844,7 @@
 	return cmd;
 }
 
-/*! 
- * \brief Default English syntax for 'You have N messages' greeting.
- * \param chan
- * \param vms
- * \param vmu
- *
- * \return zero on success, -1 on error.
- */
-static int vm_browse_messages_en(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
-{
-	int cmd = 0;
 
-	if (vms->lastmsg > -1) {
-		cmd = play_message(chan, vmu, vms);
-	} else {
-		cmd = ast_play_and_wait(chan, "vm-youhave");
-		if (!cmd) 
-			cmd = ast_play_and_wait(chan, "vm-no");
-		if (!cmd) {
-			snprintf(vms->fn, sizeof(vms->fn), "vm-%s", vms->curbox);
-			cmd = ast_play_and_wait(chan, vms->fn);
-		}
-		if (!cmd)
-			cmd = ast_play_and_wait(chan, "vm-messages");
-	}
-	return cmd;
-}
-
 /*! 
  *\brief Italian syntax for 'You have N messages' greeting.
  * \param chan
@@ -10555,21 +10988,25 @@
  */
 static int vm_browse_messages(struct ast_channel *chan, struct vm_state *vms, struct ast_vm_user *vmu)
 {
-	if (!strncasecmp(ast_channel_language(chan), "es", 2)) {         /* SPANISH */
-		return vm_browse_messages_es(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK */
-		return vm_browse_messages_gr(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW */
-		return vm_browse_messages_he(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN */
-		return vm_browse_messages_it(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE */
-		return vm_browse_messages_pt(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {  /* VIETNAMESE */
-		return vm_browse_messages_vi(chan, vms, vmu);
-	} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {  /* CHINESE (Taiwan) */
-		return vm_browse_messages_zh(chan, vms, vmu);
-	} else {                                             /* Default to English syntax */
+	if (!ast_using_saysentence()) {
+		if (!strncasecmp(ast_channel_language(chan), "es", 2)) {         /* SPANISH */
+			return vm_browse_messages_es(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "gr", 2)) {  /* GREEK */
+			return vm_browse_messages_gr(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "he", 2)) {  /* HEBREW */
+			return vm_browse_messages_he(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "it", 2)) {  /* ITALIAN */
+			return vm_browse_messages_it(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "pt", 2)) {  /* PORTUGUESE */
+			return vm_browse_messages_pt(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "vi", 2)) {  /* VIETNAMESE */
+			return vm_browse_messages_vi(chan, vms, vmu);
+		} else if (!strncasecmp(ast_channel_language(chan), "zh", 2)) {  /* CHINESE (Taiwan) */
+			return vm_browse_messages_zh(chan, vms, vmu);
+		} else {                                             /* Default to English syntax */
+			return vm_browse_messages_en(chan, vms, vmu);
+		}
+	} else {
 		return vm_browse_messages_en(chan, vms, vmu);
 	}
 }
@@ -10587,9 +11024,16 @@
 	if (!skipuser && useadsi)
 		adsi_login(chan);
 	ast_test_suite_event_notify("PLAYBACK", "Message: vm-login");
-	if (!silent && !skipuser && ast_streamfile(chan, "vm-login", ast_channel_language(chan))) {
-		ast_log(AST_LOG_WARNING, "Couldn't stream login file\n");
-		return -1;
+	if (ast_using_saysentence()) {
+		if (!silent && !skipuser && ast_say_sentence(chan, "", "<vm-login>")) {
+			ast_log(AST_LOG_WARNING, "Couldn't stream login file\n");
+			return -1;
+		}
+	} else {
+		if (!silent && !skipuser && ast_streamfile(chan, "vm-login", ast_channel_language(chan))) {
+			ast_log(AST_LOG_WARNING, "Couldn't stream login file\n");
+			return -1;
+		}
 	}
 
 	/* Authenticate them and get their mailbox/password */
@@ -10635,9 +11079,16 @@
 			password[0] = '\0';
 		} else {
 			ast_test_suite_event_notify("PLAYBACK", "Message: %s", vm_password);
-			if (ast_streamfile(chan, vm_password, ast_channel_language(chan))) {
-				ast_log(AST_LOG_WARNING, "Unable to stream password file\n");
-				return -1;
+			if (ast_using_saysentence()) {
+				if (ast_say_sentence(chan,"", "<vm-password>")) {	
+					ast_log(AST_LOG_WARNING, "Unable to stream password file\n");
+					return -1;
+				}
+			} else {
+				if (ast_streamfile(chan, vm_password, ast_channel_language(chan))) {
+					ast_log(AST_LOG_WARNING, "Unable to stream password file\n");
+					return -1;
+				}
 			}
 			if (ast_readstring(chan, password, sizeof(password) - 1, 2000, 10000, "#") < 0) {
 				ast_log(AST_LOG_WARNING, "Unable to read password\n");
@@ -10672,26 +11123,47 @@
 		if (!valid) {
 			if (skipuser || logretries >= max_logins) {
 				ast_test_suite_event_notify("PLAYBACK", "Message: vm-incorrect");
-				if (ast_streamfile(chan, "vm-incorrect", ast_channel_language(chan))) {
-					ast_log(AST_LOG_WARNING, "Unable to stream incorrect message\n");
-					return -1;
+				if (ast_using_saysentence()) {
+					if ( (ast_say_sentence(chan, "", "<vm-incorrect>")) < 0 ) {
+						ast_log(AST_LOG_WARNING, "Unable to stream vm-incorrect message\n");
+						return -1;
+					}
+				} else {
+					if (ast_streamfile(chan, "vm-incorrect", ast_channel_language(chan))) {
+						ast_log(AST_LOG_WARNING, "Unable to stream vm-incorrect message\n");
+						return -1;
+					}
 				}
 			} else {
 				ast_test_suite_event_notify("PLAYBACK", "Message: vm-incorrect-mailbox");
 				if (useadsi)
 					adsi_login(chan);
-				if (ast_streamfile(chan, "vm-incorrect-mailbox", ast_channel_language(chan))) {
-					ast_log(AST_LOG_WARNING, "Unable to stream incorrect mailbox message\n");
-					return -1;
+
+				if (ast_using_saysentence()) {
+					if ( ast_say_sentence(chan, "", "<vm-incorrect-mailbox>") < 0) {
+						ast_log(AST_LOG_WARNING, "Unable to stream incorrect mailbox message\n");
+						return -1;
+					}
+				} else {
+					if (ast_streamfile(chan, "vm-incorrect-mailbox", ast_channel_language(chan))) {
+						ast_log(AST_LOG_WARNING, "Unable to stream incorrect mailbox message\n");
+						return -1;
+					}
 				}
 			}
-			if (ast_waitstream(chan, ""))	/* Channel is hung up */
-				return -1;
+			if (!ast_using_saysentence()) {
+				if (ast_waitstream(chan, ""))	/* Channel is hung up */
+					return -1;
+				ast_stopstream(chan);
+			}
 		}
 	}
 	if (!valid && (logretries >= max_logins)) {
-		ast_stopstream(chan);
-		ast_play_and_wait(chan, "vm-goodbye");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
 		return -1;
 	}
 	if (vmu && !skipuser) {
@@ -11075,7 +11547,12 @@
 	/* Check to see if this is a new user */
 	if (!strcasecmp(vmu->mailbox, vmu->password) && 
 		(ast_test_flag(vmu, VM_FORCENAME | VM_FORCEGREET))) {
-		if (ast_play_and_wait(chan, "vm-newuser") == -1)
+		if (ast_using_saysentence()) {
+			cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-newuser>");
+		} else {
+			cmd = ast_play_and_wait(chan, "vm-newuser");
+		}
+		if (cmd == -1)
 			ast_log(AST_LOG_WARNING, "Couldn't stream new user file\n");
 		cmd = vm_newuser(chan, vmu, &vms, vmfmts, record_gain);
 		if ((cmd == 't') || (cmd == '#')) {
@@ -11094,12 +11571,20 @@
 		ast_debug(3, "Checking quotas: comparing %u to %u\n", vms.quota_usage, vms.quota_limit);
 		if (vms.quota_limit && vms.quota_usage >= vms.quota_limit) {
 			ast_debug(1, "*** QUOTA EXCEEDED!!\n");
-			cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 		}
 		ast_debug(3, "Checking quotas: User has %d messages and limit is %d.\n", (vms.newmessages + vms.oldmessages), vmu->maxmsg);
 		if ((vms.newmessages + vms.oldmessages) >= vmu->maxmsg) {
 			ast_log(AST_LOG_WARNING, "No more messages possible.  User has %d messages and limit is %d.\n", (vms.newmessages + vms.oldmessages), vmu->maxmsg);
-			cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+			}
 		}
 #endif
 
@@ -11169,7 +11654,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11186,7 +11675,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11198,7 +11691,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11210,7 +11707,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11223,7 +11724,11 @@
 							goto out;
 						}
 					} else {
-						cmd = ast_play_and_wait(chan, "vm-sorry");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-sorry");
+						}
 					}
 					cmd = 't';
 					break;
@@ -11235,22 +11740,46 @@
 				default:
 					cmd = 0;
 					if (!vms.starting) {
-						cmd = ast_play_and_wait(chan, "vm-toreply");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-toreply>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-toreply");
+						}
 					}
 					if (!ast_strlen_zero(vmu->callback) && !vms.starting && !cmd) {
-						cmd = ast_play_and_wait(chan, "vm-tocallback");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocallback>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-tocallback");
+						}
 					}
 					if (!cmd && !vms.starting) {
-						cmd = ast_play_and_wait(chan, "vm-tohearenv");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tohearenv>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-tohearenv");
+						}
 					}
 					if (!ast_strlen_zero(vmu->dialout) && !cmd) {
-						cmd = ast_play_and_wait(chan, "vm-tomakecall");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tomakecall>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-tomakecall");
+						}
 					}
 					if (ast_test_flag(vmu, VM_SVMAIL) && !cmd) {
-						cmd = ast_play_and_wait(chan, "vm-leavemsg");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-leavemsg>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-leavemsg");
+						}
 					}
 					if (!cmd) {
-						cmd = ast_play_and_wait(chan, "vm-starmain");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-starmain>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-starmain");
+						}
 					}
 					if (!cmd) {
 						cmd = ast_waitfordigit(chan, 6000);
@@ -11291,13 +11820,21 @@
 					ast_debug(1, "No more new messages, opened INBOX and got %d Urgent messages\n", vms.lastmsg + 1);
 					vms.curmsg = vms.lastmsg;
 					if (vms.lastmsg < 0) {
-						cmd = ast_play_and_wait(chan, "vm-nomore");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-nomore");
+						}
 					}
 				} else if (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms.lastmsg > 0) {
 					vms.curmsg = vms.lastmsg;
 					cmd = play_message(chan, vmu, &vms);
 				} else {
-					cmd = ast_play_and_wait(chan, "vm-nomore");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-nomore");
+					}
 				}
 			}
 			break;
@@ -11322,13 +11859,21 @@
 					ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 					vms.curmsg = -1;
 					if (vms.lastmsg < 0) {
-						cmd = ast_play_and_wait(chan, "vm-nomore");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-nomore");
+						}
 					}
 				} else if (ast_test_flag(vmu, VM_MESSAGEWRAP) && vms.lastmsg > 0) {
 					vms.curmsg = 0;
 					cmd = play_message(chan, vmu, &vms);
 				} else {
-					cmd = ast_play_and_wait(chan, "vm-nomore");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-nomore");
+					}
 				}
 			}
 			break;
@@ -11347,7 +11892,11 @@
 					}
 					else if (play_folder == 1)
 						vms.oldmessages--;
-					cmd = ast_play_and_wait(chan, "vm-deleted");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-deleted");
+					}
 				} else {
 					if (play_folder == 0) {
 						if (in_urgent) {
@@ -11358,7 +11907,11 @@
 					}
 					else if (play_folder == 1)
 						vms.oldmessages++;
-					cmd = ast_play_and_wait(chan, "vm-undeleted");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-undeleted>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-undeleted");
+					}
 				}
 				if (ast_test_flag(vmu, VM_SKIPAFTERCMD)) {
 					if (vms.curmsg < vms.lastmsg) {
@@ -11384,10 +11937,18 @@
 							ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 							vms.curmsg = -1;
 							if (vms.lastmsg < 0) {
+								if (ast_using_saysentence()) {
+									cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+								} else {
+									cmd = ast_play_and_wait(chan, "vm-nomore");
+								}
+							}
+						} else {
+							if (ast_using_saysentence()) {
+								cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+							} else {
 								cmd = ast_play_and_wait(chan, "vm-nomore");
 							}
-						} else {
-							cmd = ast_play_and_wait(chan, "vm-nomore");
 						}
 					}
 				}
@@ -11422,10 +11983,18 @@
 					ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 					vms.curmsg = -1;
 					if (vms.lastmsg < 0) {
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-nomore");
+						}
+					}
+				} else {
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+					} else {
 						cmd = ast_play_and_wait(chan, "vm-nomore");
 					}
-				} else {
-					cmd = ast_play_and_wait(chan, "vm-nomore");
 				}
 			}
 			break;
@@ -11464,15 +12033,28 @@
 				adsi_message(chan, &vms);
 			snprintf(vms.fn, sizeof(vms.fn), "vm-%s", mbox(vmu, box));
 			if (!cmd) {
-				cmd = ast_play_and_wait(chan, "vm-message");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-message>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-message");
+				}
 				if (!cmd) 
 					cmd = say_and_wait(chan, vms.curmsg + 1, ast_channel_language(chan));
+				if (!cmd) {
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-savedto>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-savedto");
+					}
+				}
 				if (!cmd)
-					cmd = ast_play_and_wait(chan, "vm-savedto");
-				if (!cmd)
 					cmd = vm_play_folder_name(chan, vms.fn);
 			} else {
-				cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-mailboxfull>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-mailboxfull");
+				}
 			}
 			if (ast_test_flag((&globalflags), VM_SKIPAFTERCMD)) {
 				if (vms.curmsg < vms.lastmsg) {
@@ -11498,25 +12080,46 @@
 						ast_debug(1, "No more urgent messages, opened INBOX and got %d new messages\n", vms.lastmsg + 1);
 						vms.curmsg = -1;
 						if (vms.lastmsg < 0) {
+							if (ast_using_saysentence()) {
+								cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+							} else {
+								cmd = ast_play_and_wait(chan, "vm-nomore");
+							}
+						}
+					} else {
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nomore>");
+						} else {
 							cmd = ast_play_and_wait(chan, "vm-nomore");
 						}
-					} else {
-						cmd = ast_play_and_wait(chan, "vm-nomore");
 					}
 				}
 			}
 			break;
 		case '*': /* Help */
 			if (!vms.starting) {
-				cmd = ast_play_and_wait(chan, "vm-onefor");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-onefor>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-onefor");
+				}
 				if (!strncasecmp(ast_channel_language(chan), "he", 2)) {
-					cmd = ast_play_and_wait(chan, "vm-for");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-for>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-for");
+					}
 				}
 				if (!cmd)
 					cmd = vm_play_folder_name(chan, vms.vmbox);
+				if (!cmd) {
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-opts>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-opts");
+					}
+				}
 				if (!cmd)
-					cmd = ast_play_and_wait(chan, "vm-opts");
-				if (!cmd)
 					cmd = vm_instructions(chan, vmu, &vms, 1, in_urgent);
 			} else
 				cmd = 0;
@@ -11545,10 +12148,19 @@
 		ast_stopstream(chan);
 		adsi_goodbye(chan);
 		if (valid && res != OPERATOR_EXIT) {
-			if (silentexit)
-				res = ast_play_and_wait(chan, "vm-dialout");
-			else 
-				res = ast_play_and_wait(chan, "vm-goodbye");
+			if (silentexit) {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-dialout>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-dialout");
+				}
+			} else {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-goodbye");
+				}
+			}
 		}
 		if ((valid && res > 0) || res == OPERATOR_EXIT) {
 			res = 0;
@@ -11635,7 +12247,26 @@
 		}
 	} else {
 		char temp[256];
-		res = ast_app_getdata(chan, "vm-whichbox", temp, sizeof(temp) - 1, 0);
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "#", "<vm-whichbox>");
+			if (res == '#' || res < 0) {
+				temp[0] = 0;
+			} else if (res == 0) {  /* played out and no input still */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+	
+				res = ast_readstring(chan, temp, sizeof(temp) - 1, to, fto, "#");
+	
+			} else { /* input other than # */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+				temp[0] = res;
+				temp[1] = 0;
+				res = ast_readstring(chan, temp+1, sizeof(temp) - 2, to, fto, "#");
+			}
+		} else {
+			res = ast_app_getdata(chan, "vm-whichbox", temp, sizeof(temp) - 1, 0);
+		}
 		if (res < 0)
 			return res;
 		if (ast_strlen_zero(temp))
@@ -11645,7 +12276,11 @@
 
 	res = leave_voicemail(chan, args.argv0, &leave_options);
 	if (res == 't') {
-		ast_play_and_wait(chan, "vm-goodbye");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
 		res = 0;
 	}
 
@@ -12156,7 +12791,11 @@
 	if (!vm_authenticate(chan, mailbox, sizeof(mailbox), &vmus, context, NULL, skipuser, 3, silent)) {
 		pbx_builtin_setvar_helper(chan, "AUTH_MAILBOX", mailbox);
 		pbx_builtin_setvar_helper(chan, "AUTH_CONTEXT", vmus.context);
-		ast_play_and_wait(chan, "auth-thankyou");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<auth-thankyou>");
+		} else {
+			ast_play_and_wait(chan, "auth-thankyou");
+		}
 		res = 0;
 	} else if (mailbox[0] == '*') {
 		/* user entered '*' */
@@ -14416,11 +15055,15 @@
 		ast_verb(3, "Destination number will be entered manually\n");
 		while (retries < 3 && cmd != 't') {
 			destination[1] = '\0';
-			destination[0] = cmd = ast_play_and_wait(chan, "vm-enter-num-to-call");
-			if (!cmd)
-				destination[0] = cmd = ast_play_and_wait(chan, "vm-then-pound");
-			if (!cmd)
-				destination[0] = cmd = ast_play_and_wait(chan, "vm-star-cancel");
+			if (ast_using_saysentence()) {
+				destination[0] = cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-enter-num-to-call><vm-then-pound><vm-star-cancel>");
+			} else {
+				destination[0] = cmd = ast_play_and_wait(chan, "vm-enter-num-to-call");
+				if (!cmd)
+					destination[0] = cmd = ast_play_and_wait(chan, "vm-then-pound");
+				if (!cmd)
+					destination[0] = cmd = ast_play_and_wait(chan, "vm-star-cancel");
+			}
 			if (!cmd) {
 				cmd = ast_waitfordigit(chan, 6000);
 				if (cmd)
@@ -14555,7 +15198,11 @@
 					}
 				} else {
 					ast_verb(3, "Caller can not specify callback number - no dialout context available\n");
-					res = ast_play_and_wait(chan, "vm-sorry");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-sorry");
+					}
 				}
 				ast_config_destroy(msg_cfg);
 				return res;
@@ -14571,31 +15218,62 @@
 			case '9':
 			case '0':
 
-				res = ast_play_and_wait(chan, "vm-sorry");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-sorry");
+				}
 				retries++;
 				break;
 			default:
 				if (num) {
 					ast_verb(3, "Confirm CID number '%s' is number to use for callback\n", num);
-					res = ast_play_and_wait(chan, "vm-num-i-have");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-num-i-have>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-num-i-have");
+					}
 					if (!res)
 						res = play_message_callerid(chan, vms, num, vmu->context, 1, 1);
-					if (!res)
-						res = ast_play_and_wait(chan, "vm-tocallnum");
+					if (!res) {
+						if (ast_using_saysentence()) {
+							res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocallnum>");
+						} else {
+							res = ast_play_and_wait(chan, "vm-tocallnum");
+						}
+					}
 					/* Only prompt for a caller-specified number if there is a dialout context specified */
 					if (!ast_strlen_zero(vmu->dialout)) {
-						if (!res)
-							res = ast_play_and_wait(chan, "vm-calldiffnum");
+						if (!res) {
+							if (ast_using_saysentence()) {
+								res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-calldiffnum>");
+							} else {
+								res = ast_play_and_wait(chan, "vm-calldiffnum");
+							}
+						}
 					}
 				} else {
-					res = ast_play_and_wait(chan, "vm-nonumber");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nonumber>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-nonumber");
+					}
 					if (!ast_strlen_zero(vmu->dialout)) {
-						if (!res)
-							res = ast_play_and_wait(chan, "vm-toenternumber");
+						if (!res) {
+							if (ast_using_saysentence()) {
+								res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-toenternumber>");
+							} else {
+								res = ast_play_and_wait(chan, "vm-toenternumber");
+							}
+						}
 					}
 				}
 				if (!res) {
-					res = ast_play_and_wait(chan, "vm-star-cancel");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-star-cancel>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-star-cancel");
+					}
 				}
 				if (!res) {
 					res = ast_waitfordigit(chan, 6000);
@@ -14625,8 +15303,13 @@
 		ast_callerid_parse(cid, &name, &num);
 		if (!num) {
 			ast_verb(3, "No CID number available, no reply sent\n");
-			if (!res)
-				res = ast_play_and_wait(chan, "vm-nonumber");
+			if (!res) {
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nonumber>");
+				} else {
+					res = ast_play_and_wait(chan, "vm-nonumber");
+				}
+			}
 			ast_config_destroy(msg_cfg);
 			return res;
 		} else {
@@ -14648,7 +15331,11 @@
 			} else {
 				/* Sender has no mailbox, can't reply */
 				ast_verb(3, "No mailbox number '%s' in context '%s', no reply sent\n", num, vmu->context);
-				ast_play_and_wait(chan, "vm-nobox");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nobox>");
+				} else {
+					ast_play_and_wait(chan, "vm-nobox");
+				}
 				res = 't';
 				ast_config_destroy(msg_cfg);
 				return res;
@@ -14738,11 +15425,16 @@
 				ast_verb(3, "Recording the message\n");
 			
 			if (recorded && outsidecaller) {
-				cmd = ast_play_and_wait(chan, INTRO);
-				cmd = ast_play_and_wait(chan, "beep");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-intro><beep>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-intro");
+					if (!cmd)
+						cmd = ast_play_and_wait(chan, "beep");
+				}
 			}
 			recorded = 1;
-			/* After an attempt has been made to record message, we have to take care of INTRO and beep for incoming messages, but not for greetings */
+			/* After an attempt has been made to record message, we have to take care of vm-intro and beep for incoming messages, but not for greetings */
 			if (record_gain)
 				ast_channel_setoption(chan, AST_OPTION_RXGAIN, &record_gain, sizeof(record_gain), 0);
 			if (ast_test_flag(vmu, VM_OPERATOR))
@@ -14770,16 +15462,28 @@
 			} else if (vmu->review && sound_duration && (*sound_duration < 5)) {
 				/* Message is too short */
 				ast_verb(3, "Message too short\n");
-				cmd = ast_play_and_wait(chan, "vm-tooshort");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tooshort>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-tooshort");
+				}
 				cmd = ast_filedelete(tempfile, NULL);
 				break;
 			} else if (vmu->review && (cmd == 2 && sound_duration && *sound_duration < (maxsilence + 3))) {
 				/* Message is all silence */
 				ast_verb(3, "Nothing recorded\n");
 				cmd = ast_filedelete(tempfile, NULL);
-				cmd = ast_play_and_wait(chan, "vm-nothingrecorded");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-nothingrecorded>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-nothingrecorded");
+				}
 				if (!cmd)
-					cmd = ast_play_and_wait(chan, "vm-speakup");
+					if (ast_using_saysentence()) {
+						cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-speakup>");
+					} else {
+						cmd = ast_play_and_wait(chan, "vm-speakup");
+					}
 				break;
 #endif
 			} else {
@@ -14793,18 +15497,34 @@
 				/* Mark Urgent */
 				if ((flag && ast_strlen_zero(flag)) || (!ast_strlen_zero(flag) && strcmp(flag, "Urgent"))) {
 					ast_verb(3, "marking message as Urgent\n");
-					res = ast_play_and_wait(chan, "vm-marked-urgent");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-marked-urgent>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-marked-urgent");
+					}
 					strcpy(flag, "Urgent");
 				} else if (flag) {
 					ast_verb(3, "UNmarking message as Urgent\n");
-					res = ast_play_and_wait(chan, "vm-marked-nonurgent");
+					if (ast_using_saysentence()) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-marked-nonurgent>");
+					} else {
+						res = ast_play_and_wait(chan, "vm-marked-nonurgent");
+					}
 					strcpy(flag, "");
 				} else {
-					ast_play_and_wait(chan, "vm-sorry");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+					} else {
+						ast_play_and_wait(chan, "vm-sorry");
+					}
 				}
 				cmd = 0;
 			} else {
-				cmd = ast_play_and_wait(chan, "vm-sorry");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-sorry");
+				}
 			}
 			break;
 		case '5':
@@ -14814,14 +15534,22 @@
 		case '9':
 		case '*':
 		case '#':
-			cmd = ast_play_and_wait(chan, "vm-sorry");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-sorry");
+			}
 			break;
 #if 0 
 /*  XXX Commented out for the moment because of the dangers of deleting
     a message while recording (can put the message numbers out of sync) */
 		case '*':
 			/* Cancel recording, delete message, offer to take another message*/
-			cmd = ast_play_and_wait(chan, "vm-deleted");
+			if (ast_using_saysentence()) {
+				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+			} else {
+				cmd = ast_play_and_wait(chan, "vm-deleted");
+			}
 			cmd = ast_filedelete(tempfile, NULL);
 			if (outsidecaller) {
 				res = vm_exec(chan, NULL);
@@ -14832,26 +15560,50 @@
 #endif
 		case '0':
 			if (!ast_test_flag(vmu, VM_OPERATOR) || (!canceleddtmf && !outsidecaller)) {
-				cmd = ast_play_and_wait(chan, "vm-sorry");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-sorry");
+				}
 				break;
 			}
 			if (msg_exists || recorded) {
-				cmd = ast_play_and_wait(chan, "vm-saveoper");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-saveoper>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-saveoper");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 3000);
 				if (cmd == '1') {
 					ast_filerename(tempfile, recordfile, NULL);
-					ast_play_and_wait(chan, "vm-msgsaved");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgsaved>");
+					} else {
+						ast_play_and_wait(chan, "vm-msgsaved");
+					}
 					cmd = '0';
 				} else if (cmd == '4') {
 					if (flag) {
-						ast_play_and_wait(chan, "vm-marked-urgent");
+						if (ast_using_saysentence()) {
+							ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-marked-urgent>");
+						} else {
+							ast_play_and_wait(chan, "vm-marked-urgent");
+						}
 						strcpy(flag, "Urgent");
 					}
-					ast_play_and_wait(chan, "vm-msgsaved");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgsaved>");
+					} else {
+						ast_play_and_wait(chan, "vm-msgsaved");
+					}
 					cmd = '0';
 				} else {
-					ast_play_and_wait(chan, "vm-deleted");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+					} else {
+						ast_play_and_wait(chan, "vm-deleted");
+					}
 					DELETE(tempfile, -1, tempfile, vmu);
 					cmd = '0';
 				}
@@ -14864,28 +15616,52 @@
 			if (outsidecaller && !ast_test_flag(vmu, VM_REVIEW))
 				return cmd;
 			if (msg_exists) {
-				cmd = ast_play_and_wait(chan, "vm-review");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-review");
+				}
 				if (!cmd && outsidecaller) {
 					if ((flag && ast_strlen_zero(flag)) || (!ast_strlen_zero(flag) && strcmp(flag, "Urgent"))) {
-						cmd = ast_play_and_wait(chan, "vm-review-urgent");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review-urgent>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-review-urgent");
+						}
 					} else if (flag) {
-						cmd = ast_play_and_wait(chan, "vm-review-nonurgent");
+						if (ast_using_saysentence()) {
+							cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review-nonurgent>");
+						} else {
+							cmd = ast_play_and_wait(chan, "vm-review-nonurgent");
+						}
 					}
 				}
 			} else {
-				cmd = ast_play_and_wait(chan, "vm-torerecord");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-torerecord>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-torerecord");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 600);
 			}
 			
 			if (!cmd && outsidecaller && ast_test_flag(vmu, VM_OPERATOR)) {
-				cmd = ast_play_and_wait(chan, "vm-reachoper");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-reachoper>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-reachoper");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 600);
 			}
 #if 0
 			if (!cmd)
-				cmd = ast_play_and_wait(chan, "vm-tocancelmsg");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-tocancelmsg>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-tocancelmsg");
+				}
 #endif
 			if (!cmd)
 				cmd = ast_waitfordigit(chan, 6000);
@@ -14902,9 +15678,13 @@
 		ast_filedelete(tempfile, NULL);
 	}
 
-	if (cmd != 't' && outsidecaller)
-		ast_play_and_wait(chan, "vm-goodbye");
-
+	if (cmd != 't' && outsidecaller) {
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
+	}
 	return cmd;
 }
 
Index: apps/app_confbridge.c
===================================================================
--- apps/app_confbridge.c	(revision 404606)
+++ apps/app_confbridge.c	(working copy)
@@ -1,4 +1,5 @@
 /*
+
  * Asterisk -- An open source telephony toolkit.
  *
  * Copyright (C) 2007-2008, Digium, Inc.
@@ -319,6 +320,9 @@
 	CONF_RECORD_STOP,
 };
 
+static int play_sound_pre(struct confbridge_conference *conference);
+static int play_sound_post(struct confbridge_conference *conference);
+
 /*! \brief Container to hold all conference bridges in progress */
 struct ao2_container *conference_bridges;
 
@@ -766,34 +770,58 @@
 	} else if (conference->activeusers == 2) {
 		if (user) {
 			/* Eep, there is one other person */
-			if (ast_stream_and_wait(user->chan,
-				only_one,
-				"")) {
-				return -1;
+			if (ast_using_saysentence()) {
+				if (ast_say_sentence(user->chan, "", "<conf-onlyone>")) {
+					return -1;
+				}
+			} else {
+				if (ast_stream_and_wait(user->chan,
+					only_one,
+					"")) {
+					return -1;
+				}
 			}
 		} else {
-			play_sound_file(conference, only_one);
+			if (ast_using_saysentence()) {
+				play_sound_pre(conference);
+				ast_say_sentence(conference->playback_chan, "", "<conf-onlyone>");
+				play_sound_post(conference);
+			} else {
+				play_sound_file(conference, only_one);
+			}
 		}
 	} else {
 		/* Alas multiple others in here */
 		if (user) {
-			if (ast_stream_and_wait(user->chan,
-				there_are,
-				"")) {
-				return -1;
+			if (ast_using_saysentence()) {
+				if (ast_say_sentence(user->chan, "", "<conf-thereare>%n<conf-otherinparty>", conference->activeusers - 1)) {
+					return -1;
+				}
+			} else {
+				if (ast_stream_and_wait(user->chan,
+					there_are,
+					"")) {
+					return -1;
+				}
+				if (ast_say_number(user->chan, conference->activeusers - 1, "", ast_channel_language(user->chan), NULL)) {
+					return -1;
+				}
+				if (ast_stream_and_wait(user->chan,
+					other_in_party,
+					"")) {
+					return -1;
+				}
 			}
-			if (ast_say_number(user->chan, conference->activeusers - 1, "", ast_channel_language(user->chan), NULL)) {
-				return -1;
+		} else if (sound_file_exists(there_are) && sound_file_exists(other_in_party)) {
+			if (ast_using_saysentence()) {
+				play_sound_pre(conference);
+				ast_say_sentence(conference->playback_chan, "", "<conf-thereare>%n<conf-otherinparty>", conference->activeusers - 1);
+				play_sound_post(conference);
+			} else {
+				play_sound_file(conference, there_are);
+				play_sound_number(conference, conference->activeusers - 1);
+				play_sound_file(conference, other_in_party);
 			}
-			if (ast_stream_and_wait(user->chan,
-				other_in_party,
-				"")) {
-				return -1;
-			}
-		} else if (sound_file_exists(there_are) && sound_file_exists(other_in_party)) {
-			play_sound_file(conference, there_are);
-			play_sound_number(conference, conference->activeusers - 1);
-			play_sound_file(conference, other_in_party);
 		}
 	}
 	return 0;
@@ -1388,6 +1416,31 @@
 	return 0;
 }
 
+static int play_sound_pre(struct confbridge_conference *conference)
+{
+	ast_mutex_lock(&conference->playback_lock);
+	if (!conference->playback_chan && alloc_playback_chan(conference)) {
+		ast_mutex_unlock(&conference->playback_lock);
+		return -1;
+	}
+	if (conf_announce_channel_push(conference->playback_chan)) {
+		ast_mutex_unlock(&conference->playback_lock);
+		return -1;
+	}
+	return 0;
+}
+
+static int play_sound_post(struct confbridge_conference *conference)
+{
+	ast_debug(1, "Departing announcer channel '%s' from conference bridge '%s'\n",
+		ast_channel_name(conference->playback_chan), conference->name);
+	conf_announce_channel_depart(conference->playback_chan);
+
+	ast_mutex_unlock(&conference->playback_lock);
+
+	return 0;
+}
+
 static int play_sound_helper(struct confbridge_conference *conference, const char *filename, int say_number)
 {
 	/* Do not waste resources trying to play files that do not exist */
@@ -1485,10 +1538,14 @@
 				return 0;
 			}
 		}
-		ast_streamfile(chan,
-			conf_get_sound(CONF_SOUND_INVALID_PIN, user->b_profile.sounds),
-			ast_channel_language(chan));
-		res = ast_waitstream(chan, AST_DIGIT_ANY);
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-invalid-pin>");
+		} else {
+			ast_streamfile(chan,
+				conf_get_sound(CONF_SOUND_INVALID_PIN, user->b_profile.sounds),
+				ast_channel_language(chan));
+			res = ast_waitstream(chan, AST_DIGIT_ANY);
+		}
 		if (res > 0) {
 			/* Account for digit already read during ivalid pin playback
 			 * resetting pin buf. */
@@ -1724,20 +1781,35 @@
 	/* if this user has a intro, play it before entering */
 	if (!ast_strlen_zero(user.name_rec_location)) {
 		ast_autoservice_start(chan);
-		play_sound_file(conference, user.name_rec_location);
-		play_sound_file(conference,
-			conf_get_sound(CONF_SOUND_HAS_JOINED, user.b_profile.sounds));
+		if (ast_using_saysentence()) {
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "%z<conf-hasjoin>", user.name_rec_location);
+			play_sound_post(conference);
+		} else {
+			play_sound_file(conference, user.name_rec_location);
+			play_sound_file(conference,
+				conf_get_sound(CONF_SOUND_HAS_JOINED, user.b_profile.sounds));
+		}
 		ast_autoservice_stop(chan);
 	}
 
 	/* Play the Join sound to both the conference and the user entering. */
 	if (!quiet) {
-		const char *join_sound = conf_get_sound(CONF_SOUND_JOIN, user.b_profile.sounds);
-
-		ast_stream_and_wait(chan, join_sound, "");
-		ast_autoservice_start(chan);
-		play_sound_file(conference, join_sound);
-		ast_autoservice_stop(chan);
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<confbridge-join>");
+			ast_autoservice_start(chan);
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<confbridge-join>");
+			play_sound_post(conference);
+			ast_autoservice_stop(chan);
+		} else {
+			const char *join_sound = conf_get_sound(CONF_SOUND_JOIN, user.b_profile.sounds);
+	
+			ast_stream_and_wait(chan, join_sound, "");
+			ast_autoservice_start(chan);
+			play_sound_file(conference, join_sound);
+			ast_autoservice_stop(chan);
+		}
 	}
 
 	/* See if we need to automatically set this user as a video source or not */
@@ -1773,17 +1845,29 @@
 	/* if this user has a intro, play it when leaving */
 	if (!quiet && !ast_strlen_zero(user.name_rec_location)) {
 		ast_autoservice_start(chan);
-		play_sound_file(conference, user.name_rec_location);
-		play_sound_file(conference,
-			conf_get_sound(CONF_SOUND_HAS_LEFT, user.b_profile.sounds));
+		if (ast_using_saysentence()) {
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "%z<conf-hasleft>", user.name_rec_location);
+			play_sound_post(conference);
+		} else {
+			play_sound_file(conference, user.name_rec_location);
+			play_sound_file(conference,
+				conf_get_sound(CONF_SOUND_HAS_LEFT, user.b_profile.sounds));
+		}
 		ast_autoservice_stop(chan);
 	}
 
 	/* play the leave sound */
 	if (!quiet) {
-		const char *leave_sound = conf_get_sound(CONF_SOUND_LEAVE, user.b_profile.sounds);
 		ast_autoservice_start(chan);
-		play_sound_file(conference, leave_sound);
+		if (ast_using_saysentence()) {
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<confbridge-leave>");
+			play_sound_post(conference);
+		} else {
+			const char *leave_sound = conf_get_sound(CONF_SOUND_LEAVE, user.b_profile.sounds);
+			play_sound_file(conference, leave_sound);
+		}
 		ast_autoservice_stop(chan);
 	}
 
@@ -1793,9 +1877,13 @@
 
 	/* If the user was kicked from the conference play back the audio prompt for it */
 	if (!quiet && user.kicked) {
-		res = ast_stream_and_wait(chan,
-			conf_get_sound(CONF_SOUND_KICKED, user.b_profile.sounds),
-			"");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-kicked>");
+		} else {
+			res = ast_stream_and_wait(chan,
+				conf_get_sound(CONF_SOUND_KICKED, user.b_profile.sounds),
+				"");
+		}
 	}
 
 	/* Restore volume adjustments to previous values in case they were changed */
@@ -1869,17 +1957,36 @@
 
 	ao2_unlock(conference);
 
-	sound_to_play = conf_get_sound((mute ? CONF_SOUND_PARTICIPANTS_MUTED : CONF_SOUND_PARTICIPANTS_UNMUTED),
-		user->b_profile.sounds);
-
 	/* The host needs to hear it seperately, as they don't get the audio from play_sound_helper */
-	ast_stream_and_wait(user->chan, sound_to_play, "");
+	if (ast_using_saysentence()) {
+		if (mute) {
+			ast_say_sentence(user->chan, "", "<conf-now-muted>");
+			/* Announce to the group that all participants are muted */
+			ast_autoservice_start(user->chan);
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<conf-now-muted>");
+			play_sound_post(conference);
+			ast_autoservice_stop(user->chan);
+		} else {
+			ast_say_sentence(user->chan, "", "<conf-now-unmuted>");
+			/* Announce to the group that all participants are muted */
+			ast_autoservice_start(user->chan);
+			play_sound_pre(conference);
+			ast_say_sentence(conference->playback_chan, "", "<conf-now-muted>");
+			play_sound_post(conference);
+			ast_autoservice_stop(user->chan);
+		}
+	} else {
+		sound_to_play = conf_get_sound((mute ? CONF_SOUND_PARTICIPANTS_MUTED : CONF_SOUND_PARTICIPANTS_UNMUTED),
+			user->b_profile.sounds);
+	
+		ast_stream_and_wait(user->chan, sound_to_play, "");
+		/* Announce to the group that all participants are muted */
+		ast_autoservice_start(user->chan);
+		play_sound_helper(conference, sound_to_play, 0);
+		ast_autoservice_stop(user->chan);
+	}
 
-	/* Announce to the group that all participants are muted */
-	ast_autoservice_start(user->chan);
-	play_sound_helper(conference, sound_to_play, 0);
-	ast_autoservice_stop(user->chan);
-
 	return 0;
 }
 
@@ -1889,9 +1996,22 @@
 	char *file = NULL;
 
 	while ((file = strsep(&file_copy, "&"))) {
-		if (ast_stream_and_wait(bridge_channel->chan, file, "")) {
-			ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
-			return -1;
+		if (ast_using_saysentence()) {
+			ast_say_sentence(bridge_channel->chan, "", "%z", file); /* This comes in from the config file and is embedded in the menu parsed stuff. Ugh! */
+										/* The reason I say UGH is because this kind of configurable menu requires fixed sound
+										  files to tell the user what to press;  Otherwise, the options have to be published to users;
+										  since the options are a restricted set anyway, why play around? Just implement them all anyway,
+										  and fix them in place, and  let the user use the documentation. The only place I can imagine this
+										  such configurable menus useful is the case where you have some old conference system you want
+										  to replace, and not have to teach users a new menu structure.... I say, let them relearn */
+										  /* SO, Now, unless some other application uses this file in an ast_say_sentence() call, the
+										     utterance will not be picked up scans for inclusion in translation templates. They will have
+   										     to be hand entered. */
+		} else {
+			if (ast_stream_and_wait(bridge_channel->chan, file, "")) {
+				ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
+				return -1;
+			}
 		}
 	}
 	return 0;
@@ -1913,13 +2033,18 @@
 	char *file = NULL;
 
 	while ((file = strsep(&file_copy, "&"))) {
-		if (ast_streamfile(bridge_channel->chan, file, ast_channel_language(bridge_channel->chan))) {
-			ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
-			return -1;
+		if (ast_using_saysentence()) {
+			digit = ast_say_sentence(bridge_channel->chan, AST_DIGIT_ANY, "%z", file);
+		} else {
+			if (ast_streamfile(bridge_channel->chan, file, ast_channel_language(bridge_channel->chan))) {
+				ast_log(LOG_WARNING, "Failed to playback file %s to channel\n", file);
+				return -1;
+			}
+			digit = ast_waitstream(bridge_channel->chan, AST_DIGIT_ANY);
 		}
 
 		/* now wait for more digits. */
-		if (!(digit = ast_waitstream(bridge_channel->chan, AST_DIGIT_ANY))) {
+		if (!digit) {
 			/* streaming finished and no DTMF was entered */
 			continue;
 		} else if (digit == -1) {
@@ -1933,7 +2058,8 @@
 		/* streaming finished on all files and no DTMF was entered */
 		return -1;
 	}
-	ast_stopstream(bridge_channel->chan);
+	if (!ast_using_saysentence())
+		ast_stopstream(bridge_channel->chan);
 
 	/* If we get here, then DTMF has been entered, This means no
 	 * additional prompts should be played for this menu entry */
Index: apps/app_queue.c
===================================================================
--- apps/app_queue.c	(revision 404606)
+++ apps/app_queue.c	(working copy)
@@ -1,4 +1,4 @@
-/*
+/* // leave this one be, or use %z; these files are not supplied in the Asterisk Distribution
  * Asterisk -- An open source telephony toolkit.
  *
  * Copyright (C) 1999 - 2006, Digium, Inc.
@@ -3565,7 +3565,11 @@
 	if (announceposition == 1) {
 		/* Say we're next, if we are */
 		if (qe->pos == 1) {
-			res = play_file(qe->chan, qe->parent->sound_next);
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-youarenext>");
+			} else {
+				res = play_file(qe->chan, qe->parent->sound_next);
+			}
 			if (res) {
 				goto playout;
 			}
@@ -3573,37 +3577,41 @@
 		} else {
 			if (qe->parent->announceposition == ANNOUNCEPOSITION_MORE_THAN && qe->pos > qe->parent->announcepositionlimit){
 				/* More than Case*/
-				res = play_file(qe->chan, qe->parent->queue_quantity1);
-				if (res) {
-					goto playout;
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-quantity1>%n<queue-quantity2>", qe->parent->announcepositionlimit);
+				} else {
+					res = play_file(qe->chan, qe->parent->queue_quantity1);
+					if (res) {
+						goto playout;
+					}
+					res = ast_say_number(qe->chan, qe->parent->announcepositionlimit, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL); /* Needs gender */
+					if (res) {
+						goto playout;
+					}
+					res = play_file(qe->chan, qe->parent->queue_quantity2);
 				}
-				res = ast_say_number(qe->chan, qe->parent->announcepositionlimit, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL); /* Needs gender */
 				if (res) {
 					goto playout;
 				}
 			} else {
 				/* Normal Case */
-				res = play_file(qe->chan, qe->parent->sound_thereare);
-				if (res) {
-					goto playout;
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-thereare>%n<queue-callswaiting>", qe->pos);
+				} else {
+					res = play_file(qe->chan, qe->parent->sound_thereare);
+					if (res) {
+						goto playout;
+					}
+					res = ast_say_number(qe->chan, qe->pos, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL); /* Needs gender */
+					if (res) {
+						goto playout;
+					}
+					res = play_file(qe->chan, qe->parent->sound_calls);
 				}
-				res = ast_say_number(qe->chan, qe->pos, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL); /* Needs gender */
 				if (res) {
 					goto playout;
 				}
 			}
-			if (qe->parent->announceposition == ANNOUNCEPOSITION_MORE_THAN && qe->pos > qe->parent->announcepositionlimit){
-				/* More than Case*/
-				res = play_file(qe->chan, qe->parent->queue_quantity2);
-				if (res) {
-					goto playout;
-				}
-			} else {
-				res = play_file(qe->chan, qe->parent->sound_calls);
-				if (res) {
-					goto playout;
-				}
-			}
 		}
 	}
 	/* Round hold time to nearest minute */
@@ -3624,40 +3632,51 @@
     if ((avgholdmins+avgholdsecs) > 0 && qe->parent->announceholdtime &&
         ((qe->parent->announceholdtime == ANNOUNCEHOLDTIME_ONCE && !qe->last_pos) ||
         !(qe->parent->announceholdtime == ANNOUNCEHOLDTIME_ONCE))) {
-		res = play_file(qe->chan, qe->parent->sound_holdtime);
-		if (res) {
-			goto playout;
-		}
-
-		if (avgholdmins >= 1) {
-			res = ast_say_number(qe->chan, avgholdmins, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL);
+		if (ast_using_saysentence()) {
+			if (avgholdmins >= 1 && avgholdsecs >= 1) {
+				res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-holdtime>%n<queue-minutes>%n<queue-seconds>", avgholdmins, avgholdsecs);
+			} else if (avgholdmins >= 1) {
+				res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-holdtime>%n<queue-minutes>", avgholdmins);
+			} else {
+				res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-holdtime>%n<queue-seconds>", avgholdsecs);
+			}
+	
+		} else {
+			res = play_file(qe->chan, qe->parent->sound_holdtime);
 			if (res) {
 				goto playout;
 			}
 
-			if (avgholdmins == 1) {
-				res = play_file(qe->chan, qe->parent->sound_minute);
+			if (avgholdmins >= 1) {
+				res = ast_say_number(qe->chan, avgholdmins, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL);
 				if (res) {
 					goto playout;
 				}
-			} else {
-				res = play_file(qe->chan, qe->parent->sound_minutes);
+	
+				if (avgholdmins == 1) {
+					res = play_file(qe->chan, qe->parent->sound_minute);
+					if (res) {
+						goto playout;
+					}
+				} else {
+					res = play_file(qe->chan, qe->parent->sound_minutes);
+					if (res) {
+						goto playout;
+					}
+				}
+			}
+			if (avgholdsecs >= 1) {
+				res = ast_say_number(qe->chan, avgholdsecs, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL);
 				if (res) {
 					goto playout;
 				}
+	
+				res = play_file(qe->chan, qe->parent->sound_seconds);
+				if (res) {
+					goto playout;
+				}
 			}
 		}
-		if (avgholdsecs >= 1) {
-			res = ast_say_number(qe->chan, avgholdsecs, AST_DIGIT_ANY, ast_channel_language(qe->chan), NULL);
-			if (res) {
-				goto playout;
-			}
-
-			res = play_file(qe->chan, qe->parent->sound_seconds);
-			if (res) {
-				goto playout;
-			}
-		}
 	} else if (qe->parent->announceholdtime && !qe->parent->announceposition) {
 		say_thanks = 0;
 	}
@@ -3668,7 +3687,11 @@
 			ast_channel_name(qe->chan), qe->parent->name, qe->pos);
 	}
 	if (say_thanks) {
-		res = play_file(qe->chan, qe->parent->sound_thanks);
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-thankyou>");
+		} else {
+			res = play_file(qe->chan, qe->parent->sound_thanks);
+		}
 	}
 playout:
 
@@ -4295,7 +4318,7 @@
 	}
 
 	/* play the announcement */
-	res = play_file(qe->chan, ast_str_buffer(qe->parent->sound_periodicannounce[qe->last_periodic_announce_sound]));
+	res = play_file(qe->chan, ast_str_buffer(qe->parent->sound_periodicannounce[qe->last_periodic_announce_sound])); // leave this one be, or use %z; these files are not supplied in the Asterisk Distribution
 
 	if (res > 0 && !valid_exit(qe, res)) {
 		res = 0;
@@ -6437,28 +6460,49 @@
 					res2 = ast_safe_sleep(peer, qe->parent->memberdelay * 1000);
 				}
 				if (!res2 && announce) {
-					if (play_file(peer, announce) < 0) {
-						ast_log(LOG_ERROR, "play_file failed for '%s' on %s\n", announce, ast_channel_name(peer));
+					if (ast_using_saysentence()) {
+						if (ast_say_sentence(peer, AST_DIGIT_ANY, "%z", announce) < 0) {
+							ast_log(LOG_ERROR, "play failed for '%s' on %s\n", announce, ast_channel_name(peer));
+						}
+					} else {
+						if (play_file(peer, announce) < 0) {
+							ast_log(LOG_ERROR, "play_file failed for '%s' on %s\n", announce, ast_channel_name(peer));
+						}
 					}
 				}
 				if (!res2 && qe->parent->reportholdtime) {
-					if (!play_file(peer, qe->parent->sound_reporthold)) {
+					if (ast_using_saysentence()) {
 						int holdtime, holdtimesecs;
 
 						time(&now);
 						holdtime = abs((now - qe->start) / 60);
 						holdtimesecs = abs((now - qe->start) % 60);
-						if (holdtime > 0) {
-							ast_say_number(peer, holdtime, AST_DIGIT_ANY, ast_channel_language(peer), NULL);
-							if (play_file(peer, qe->parent->sound_minutes) < 0) {
-								ast_log(LOG_ERROR, "play_file failed for '%s' on %s\n", qe->parent->sound_minutes, ast_channel_name(peer));
-							}
+						if (holdtime > 0 && holdtimesecs > 1) {
+							res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-reporthold>%n<queue-minutes>%n<queue-seconds>", holdtime, holdtimesecs);
+						} else if (holdtime > 0) {
+							res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-reporthold>%n<queue-minutes>", holdtime);
+						} else {
+							res = ast_say_sentence(qe->chan, AST_DIGIT_ANY, "<queue-reporthold>%n<queue-seconds>", holdtimesecs);
 						}
-						if (holdtimesecs > 1) {
-							ast_say_number(peer, holdtimesecs, AST_DIGIT_ANY, ast_channel_language(peer), NULL);
-							if (play_file(peer, qe->parent->sound_seconds) < 0) {
-								ast_log(LOG_ERROR, "play_file failed for '%s' on %s\n", qe->parent->sound_seconds, ast_channel_name(peer));
+					} else {
+						if (!play_file(peer, qe->parent->sound_reporthold)) {
+							int holdtime, holdtimesecs;
+	
+							time(&now);
+							holdtime = abs((now - qe->start) / 60);
+							holdtimesecs = abs((now - qe->start) % 60);
+							if (holdtime > 0) {
+								ast_say_number(peer, holdtime, AST_DIGIT_ANY, ast_channel_language(peer), NULL);
+								if (play_file(peer, qe->parent->sound_minutes) < 0) {
+									ast_log(LOG_ERROR, "play_file failed for '%s' on %s\n", qe->parent->sound_minutes, ast_channel_name(peer));
+								}
 							}
+							if (holdtimesecs > 1) {
+								ast_say_number(peer, holdtimesecs, AST_DIGIT_ANY, ast_channel_language(peer), NULL);
+								if (play_file(peer, qe->parent->sound_seconds) < 0) {
+									ast_log(LOG_ERROR, "play_file failed for '%s' on %s\n", qe->parent->sound_seconds, ast_channel_name(peer));
+								}
+							}
 						}
 					}
 				}
@@ -6510,7 +6554,7 @@
 		}
 
 		/* Play announcement to the caller telling it's his turn if defined */
-		if (!ast_strlen_zero(qe->parent->sound_callerannounce)) {
+		if (!ast_strlen_zero(qe->parent->sound_callerannounce)) {  // Since this sound file must be supplied by user, no need to use say_sentence (but if you really do, you can use %z 
 			if (play_file(qe->chan, qe->parent->sound_callerannounce)) {
 				ast_log(LOG_WARNING, "Announcement file '%s' is unavailable, continuing anyway...\n", qe->parent->sound_callerannounce);
 			}
Index: apps/app_meetme.c
===================================================================
--- apps/app_meetme.c	(revision 404606)
+++ apps/app_meetme.c	(working copy)
@@ -2769,12 +2769,20 @@
 
 		/* they can't override the admin mute state */
 		if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {
-			if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-muted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
-			if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-unmuted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2786,8 +2794,12 @@
 		}
 
 		if (user->adminflags & ADMINFLAG_T_REQUEST) {
-			if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<beep>");
+			} else {
+				if (!ast_streamfile(chan, "beep", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2821,8 +2833,12 @@
 
 	default:
 		*menu_mode = MENU_DISABLED;
-		if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-errormenu>");
+		} else {
+			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 		break;
 	}
@@ -2851,12 +2867,20 @@
 		}
 
 		if (ast_test_flag64(confflags, CONFFLAG_MONITOR) || (user->adminflags & (ADMINFLAG_MUTED | ADMINFLAG_SELFMUTED))) {
-			if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-muted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-muted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
-			if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-unmuted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-unmuted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2865,13 +2889,21 @@
 		*menu_mode = MENU_DISABLED;
 		if (conf->locked) {
 			conf->locked = 0;
-			if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-unlockednow>");
+			} else {
+				if (!ast_streamfile(chan, "conf-unlockednow", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			conf->locked = 1;
-			if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-lockednow>");
+			} else {
+				if (!ast_streamfile(chan, "conf-lockednow", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		break;
@@ -2884,8 +2916,12 @@
 		*menu_mode = MENU_DISABLED;
 		usr = ao2_find(conf->usercontainer, &max_no, 0);
 		if ((ast_channel_name(usr->chan) == ast_channel_name(chan)) || ast_test_flag64(&usr->userflags, CONFFLAG_ADMIN)) {
-			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-errormenu>");
+			} else {
+				if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			usr->adminflags |= ADMINFLAG_KICKME;
@@ -2903,12 +2939,20 @@
 		/* Extend RT conference */
 		if (rt_schedule) {
 			if (!rt_extend_conf(conf->confno)) {
-				if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {
-					ast_waitstream(chan, "");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, "", "<conf-errormenu>");
+				} else {
+					if (!ast_streamfile(chan, "conf-extended", ast_channel_language(chan))) {
+						ast_waitstream(chan, "");
+					}
 				}
 			} else {
-				if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {
-					ast_waitstream(chan, "");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, "", "<conf-errormenu>");
+				} else {
+					if (!ast_streamfile(chan, "conf-nonextended", ast_channel_language(chan))) {
+						ast_waitstream(chan, "");
+					}
 				}
 			}
 			ast_stopstream(chan);
@@ -2925,10 +2969,14 @@
 		break;
 
 	case '8':
-		if (!ast_streamfile(chan, "conf-adminmenu-menu8", ast_channel_language(chan))) {
-			/* If the user provides DTMF while playing the sound, we want to drop right into the extended menu function with new DTMF once we get out of here. */
-			*dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
-			ast_stopstream(chan);
+		if (ast_using_saysentence()) {
+			*dtmf = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-adminmenu-menu8>");
+		} else {
+			if (!ast_streamfile(chan, "conf-adminmenu-menu8", ast_channel_language(chan))) {
+				/* If the user provides DTMF while playing the sound, we want to drop right into the extended menu function with new DTMF once we get out of here. */
+				*dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
+				ast_stopstream(chan);
+			}
 		}
 		*menu_mode = MENU_ADMIN_EXTENDED;
 		break;
@@ -2939,8 +2987,12 @@
 	default:
 		menu_mode = MENU_DISABLED;
 		/* Play an error message! */
-		if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-errormenu>");
+		} else {
+			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 		break;
 	}
@@ -2972,65 +3024,110 @@
 		keepplaying = 1;
 		playednamerec = 0;
 		if (conf->users == 1) {
-			if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			if (ast_using_saysentence()) {
+				if (keepplaying) {
+					res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-onlyperson>");
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
+			} else {
+				if (keepplaying && !ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
+				}
 			}
 		} else if (conf->users == 2) {
-			if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			if (ast_using_saysentence()) {
+				if (keepplaying) {
+					res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-onlyone>");
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
+			} else {
+				if (keepplaying && !ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
+				}
 			}
 		} else {
-			if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			if (ast_using_saysentence()) {
+				if (keepplaying) {
+					res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-thereare>%n<conf-otherinparty>", conf->users - 1);
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
-			}
-			if (keepplaying) {
-				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+			} else {
+				if (keepplaying && !ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
-			}
-			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0) {
-					keepplaying = 0;
+				if (keepplaying) {
+					res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
 				}
+				if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0) {
+						keepplaying = 0;
+					}
+				}
 			}
 		}
 		user_iter = ao2_iterator_init(conf->usercontainer, 0);
 		while((usr = ao2_iterator_next(&user_iter))) {
 			if (ast_fileexists(usr->namerecloc, NULL, NULL)) {
-				if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {
-					res = ast_waitstream(chan, AST_DIGIT_ANY);
-					ast_stopstream(chan);
-					if (res > 0) {
-						keepplaying = 0;
+				if (ast_using_saysentence()) {
+					if (keepplaying) {
+						res=ast_say_sentence(chan, AST_DIGIT_ANY, "%z", usr->namerecloc); /* Play a recorded username */
+						if (res > 0) {
+							keepplaying = 0;
+						}
 					}
+				} else {
+					if (keepplaying && !ast_streamfile(chan, usr->namerecloc, ast_channel_language(chan))) {
+						res = ast_waitstream(chan, AST_DIGIT_ANY);
+						ast_stopstream(chan);
+						if (res > 0) {
+							keepplaying = 0;
+						}
+					}
 				}
 				playednamerec = 1;
 			}
 			ao2_ref(usr, -1);
 		}
 		ao2_iterator_destroy(&user_iter);
-		if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {
-			res = ast_waitstream(chan, AST_DIGIT_ANY);
-			ast_stopstream(chan);
-			if (res > 0) {
-				keepplaying = 0;
+		if (ast_using_saysentence()) {
+			if (keepplaying && playednamerec) {
+				res=ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-roll-callcomplete>");
+				if (res > 0) {
+					keepplaying = 0;
+				}
 			}
+		} else {
+			if (keepplaying && playednamerec && !ast_streamfile(chan, "conf-roll-callcomplete", ast_channel_language(chan))) {
+				res = ast_waitstream(chan, AST_DIGIT_ANY);
+				ast_stopstream(chan);
+				if (res > 0) {
+					keepplaying = 0;
+				}
+			}
 		}
 
 		*menu_mode = MENU_DISABLED;
@@ -3038,8 +3135,12 @@
 
 	case '2': /* *82 Eject all non-admins */
 		if (conf->users == 1) {
-			if(!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-errormenu>");
+			} else {
+				if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_kickme_cb, &conf);
@@ -3052,14 +3153,22 @@
 		if(conf->gmuted) {
 			conf->gmuted = 0;
 			ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_unmuted_cb, &conf);
-			if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-now-unmuted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-now-unmuted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		} else {
 			conf->gmuted = 1;
 			ao2_callback(conf->usercontainer, OBJ_NODATA, user_set_muted_cb, &conf);
-			if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-now-muted>");
+			} else {
+				if (!ast_streamfile(chan, "conf-now-muted", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 		ast_stopstream(chan);
@@ -3106,8 +3215,12 @@
 				}
 			}
 			ast_mutex_unlock(&conf->recordthreadlock);
-			if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-now-recording>");
+			} else {
+				if (!ast_streamfile(chan, "conf-now-recording", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 		}
 
@@ -3121,8 +3234,12 @@
 		break;
 
 	default:
-		if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-errormenu>");
+		} else {
+			if (!ast_streamfile(chan, "conf-errormenu", ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 		ast_stopstream(chan);
 		*menu_mode = MENU_DISABLED;
@@ -3394,8 +3511,12 @@
 
 	if (conf->locked && (!ast_test_flag64(confflags, CONFFLAG_ADMIN))) {
 		/* Sorry, but this conference is locked! */	
-		if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "<conf-locked>");
+		} else {
+			if (!ast_streamfile(chan, "conf-locked", ast_channel_language(chan)))
+				ast_waitstream(chan, "");
+		}
 		goto outrun;
 	}
 
@@ -3404,8 +3525,12 @@
 	if (rt_schedule && conf->maxusers) {
 		if (conf->users >= conf->maxusers) {
 			/* Sorry, but this confernce has reached the participant limit! */	
-			if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-full>");
+			} else {
+				if (!ast_streamfile(chan, "conf-full", ast_channel_language(chan)))
+					ast_waitstream(chan, "");
+			}
 			ast_mutex_unlock(&conf->playlock);
 			goto outrun;
 		}
@@ -3515,56 +3640,88 @@
 	/* Play an arbitrary intro message */
 	if (ast_test_flag64(confflags, CONFFLAG_INTROMSG) &&
 			!ast_strlen_zero(optargs[OPT_ARG_INTROMSG])) {
-		if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {
-			ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, "", "%z", optargs[OPT_ARG_INTROMSG]);  /* look this up and replace it! */
+		} else {
+			if (!ast_streamfile(chan, optargs[OPT_ARG_INTROMSG], ast_channel_language(chan))) {
+				ast_waitstream(chan, "");
+			}
 		}
 	}
 
 	if (!ast_test_flag64(confflags, (CONFFLAG_QUIET | CONFFLAG_NOONLYPERSON))) {
-		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED))
-			if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan)))
-				ast_waitstream(chan, "");
-		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0)
-			if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan)))
-				ast_waitstream(chan, "");
+		if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_WAITMARKED)) {
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-onlyperson>");
+			} else {
+				if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
+			}
+		}
+		if (ast_test_flag64(confflags, CONFFLAG_WAITMARKED) && conf->markedusers == 0) {
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-waitforleader>");
+			} else {
+				if (!ast_streamfile(chan, "conf-waitforleader", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
+			}
+		}
 	}
 
 	if (ast_test_flag64(confflags, CONFFLAG_ANNOUNCEUSERCOUNT) && conf->users > 1) {
 		int keepplaying = 1;
 
 		if (conf->users == 2) { 
-			if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-onlyone>");
 				if (res > 0)
 					keepplaying = 0;
 				else if (res == -1)
 					goto outrun;
+			} else {
+				if (!ast_streamfile(chan, "conf-onlyone", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1)
+						goto outrun;
+				}
 			}
 		} else { 
-			if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-thereare>%n<conf-otherinparty>", conf->users - 1);
 				if (res > 0)
 					keepplaying = 0;
 				else if (res == -1)
 					goto outrun;
+			} else {
+				if (!ast_streamfile(chan, "conf-thereare", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1)
+						goto outrun;
+				}
+				if (keepplaying) {
+					res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1)
+						goto outrun;
+				}
+				if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+					ast_stopstream(chan);
+					if (res > 0)
+						keepplaying = 0;
+					else if (res == -1) 
+						goto outrun;
+				}
 			}
-			if (keepplaying) {
-				res = ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
-				if (res > 0)
-					keepplaying = 0;
-				else if (res == -1)
-					goto outrun;
-			}
-			if (keepplaying && !ast_streamfile(chan, "conf-otherinparty", ast_channel_language(chan))) {
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-				ast_stopstream(chan);
-				if (res > 0)
-					keepplaying = 0;
-				else if (res == -1) 
-					goto outrun;
-			}
 		}
 	}
 
@@ -3799,11 +3956,15 @@
 
 						if (!announcement_played && conf->endalert) {
 							if (now.tv_sec + conf->endalert >= conf->endtime) {
-								if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))
-									ast_waitstream(chan, "");
-								ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));
-								if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))
-									ast_waitstream(chan, "");
+								if (ast_using_saysentence()) {
+									ast_say_sentence(chan, "", "<conf-will-end-in>%n<minutes>", (conf->endtime - now.tv_sec) / 60);
+								} else {
+									if (!ast_streamfile(chan, "conf-will-end-in", ast_channel_language(chan)))
+										ast_waitstream(chan, "");
+									ast_say_digits(chan, (conf->endtime - now.tv_sec) / 60, "", ast_channel_language(chan));
+									if (!ast_streamfile(chan, "minutes", ast_channel_language(chan)))
+										ast_waitstream(chan, "");
+								}
 								if (musiconhold) {
 									conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
 								}
@@ -3845,9 +4006,13 @@
 				}
  	
  				if (time_left_ms <= 0) {
- 					if (user->end_sound) {						
- 						res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan));
- 						res = ast_waitstream(chan, "");
+ 					if (user->end_sound) {
+						if (ast_using_saysentence()) {
+							res = ast_say_sentence(chan, "", "%z", user->end_sound); /* Get rid of the variable */
+						} else {
+ 							res = ast_streamfile(chan, user->end_sound, ast_channel_language(chan));
+ 							res = ast_waitstream(chan, "");
+						}
  					}
 					if (ast_test_flag64(confflags, CONFFLAG_KICK_CONTINUE)) {
 						ret = 0;
@@ -3871,22 +4036,36 @@
  						/* force the time left to round up if appropriate */
  						if (user->warning_sound && user->play_warning) {
  							if (!strcmp(user->warning_sound, "timeleft")) {
- 								
- 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan));
- 								res = ast_waitstream(chan, "");
- 								if (minutes) {
- 									res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
- 									res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan));
+ 								if (ast_using_saysentence()) {
+									if (minutes && seconds) {
+										res = ast_say_sentence(chan, "", "<vm-youhave>%n<queue-minutes><vm-and>%n<queue-seconds>", minutes, seconds);
+									} else if (minutes && !seconds) {
+										res = ast_say_sentence(chan, "", "<vm-youhave>%n<queue-minutes>", minutes);
+									} else if (!minutes && seconds) {
+										res = ast_say_sentence(chan, "", "<vm-youhave>%n<queue-seconds>", seconds);
+									}
+								} else {
+	 								res = ast_streamfile(chan, "vm-youhave", ast_channel_language(chan));
  									res = ast_waitstream(chan, "");
- 								}
- 								if (seconds) {
- 									res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
- 									res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan));
+ 									if (minutes) {
+ 										res = ast_say_number(chan, minutes, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+ 										res = ast_streamfile(chan, "queue-minutes", ast_channel_language(chan));
+ 										res = ast_waitstream(chan, "");
+ 									}
+ 									if (seconds) {
+ 										res = ast_say_number(chan, seconds, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+ 										res = ast_streamfile(chan, "queue-seconds", ast_channel_language(chan));
+ 										res = ast_waitstream(chan, "");
+ 									}
+								}
+ 							} else {
+								
+ 								if (ast_using_saysentence()) {
+									res = ast_say_sentence(chan, "", "%z", user->warning_sound);
+								} else {
+ 									res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan));
  									res = ast_waitstream(chan, "");
- 								}
- 							} else {
- 								res = ast_streamfile(chan, user->warning_sound, ast_channel_language(chan));
- 								res = ast_waitstream(chan, "");
+								}
  							}
 							if (musiconhold) {
 								conf_start_moh(chan, optargs[OPT_ARG_MOH_CLASS]);
@@ -3926,20 +4105,28 @@
 			    ast_test_flag64(confflags, CONFFLAG_WAITMARKED) &&
 			    lastmarked == 0) {
 				if (currentmarked == 1 && conf->users > 1) {
-					ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
-					if (conf->users - 1 == 1) {
-						if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {
-							ast_waitstream(chan, "");
-						}
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "%n<conf-userswilljoin>", conf->users - 1); /* the plural/singular is handled in the translation file */
 					} else {
-						if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {
-							ast_waitstream(chan, "");
+						ast_say_number(chan, conf->users - 1, AST_DIGIT_ANY, ast_channel_language(chan), (char *) NULL);
+						if (conf->users - 1 == 1) {
+							if (!ast_streamfile(chan, "conf-userwilljoin", ast_channel_language(chan))) {
+								ast_waitstream(chan, "");
+							}
+						} else {
+							if (!ast_streamfile(chan, "conf-userswilljoin", ast_channel_language(chan))) {
+								ast_waitstream(chan, "");
+							}
 						}
 					}
 				}
 				if (conf->users == 1 && !ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {
-					if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
-						ast_waitstream(chan, "");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "<conf-onlyperson>");
+					} else {
+						if (!ast_streamfile(chan, "conf-onlyperson", ast_channel_language(chan))) {
+							ast_waitstream(chan, "");
+						}
 					}
 				}
 			}
@@ -3951,8 +4138,12 @@
 				if (currentmarked == 0) {
 					if (lastmarked != 0) {
 						if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {
-							if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {
-								ast_waitstream(chan, "");
+							if (ast_using_saysentence()) {
+								ast_say_sentence(chan, "", "<conf-leaderhasleft>");
+							} else {
+								if (!ast_streamfile(chan, "conf-leaderhasleft", ast_channel_language(chan))) {
+									ast_waitstream(chan, "");
+								}
 							}
 						}
 						if (ast_test_flag64(confflags, CONFFLAG_MARKEDEXIT)) {
@@ -3994,8 +4185,12 @@
 					}
 					if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && 
 						!ast_test_flag64(confflags, CONFFLAG_MARKEDUSER)) {
-						if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {
-							ast_waitstream(chan, "");
+						if (ast_using_saysentence()) {
+							ast_say_sentence(chan, "", "<conf-placeintoconf>");
+						} else {
+							if (!ast_streamfile(chan, "conf-placeintoconf", ast_channel_language(chan))) {
+								ast_waitstream(chan, "");
+							}
 						}
 						conf_play(chan, conf, ENTER);
 					}
@@ -4090,9 +4285,14 @@
 			/* If I have been kicked, exit the conference */
 			if (user->adminflags & ADMINFLAG_KICKME) {
 				/* You have been kicked. */
-				if (!ast_test_flag64(confflags, CONFFLAG_QUIET) && 
-					!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {
-					ast_waitstream(chan, "");
+				if (!ast_test_flag64(confflags, CONFFLAG_QUIET)) {
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "<conf-kicked>");
+					} else {
+						if (!ast_streamfile(chan, "conf-kicked", ast_channel_language(chan))) {
+							ast_waitstream(chan, "");
+						}
+					}
 				}
 				ret = 0;
 				break;
@@ -4192,17 +4392,26 @@
 						char *menu_to_play;
 						if (ast_test_flag64(confflags, CONFFLAG_ADMIN)) {
 							menu_mode = MENU_ADMIN;
-							menu_to_play = "conf-adminmenu-18";
+							if (ast_using_saysentence()) {
+								dtmf = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-adminmenu-18>");
+							} else {
+								menu_to_play = "conf-adminmenu-18";
+							}
 						} else {
 							menu_mode = MENU_NORMAL;
-							menu_to_play = "conf-usermenu-162";
+							if (ast_using_saysentence()) {
+								dtmf = ast_say_sentence(chan, AST_DIGIT_ANY, "<conf-usermenu-162>");
+							} else {
+								menu_to_play = "conf-usermenu-162";
+							}
 						}
-
-						if (!ast_streamfile(chan, menu_to_play, ast_channel_language(chan))) {
-							dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
-							ast_stopstream(chan);
-						} else {
-							dtmf = 0;
+						if (!ast_using_saysentence()) {
+							if (!ast_streamfile(chan, menu_to_play, ast_channel_language(chan))) {
+								dtmf = ast_waitstream(chan, AST_DIGIT_ANY);
+								ast_stopstream(chan);
+							} else {
+								dtmf = 0;
+							}
 						}
 					} else {
 						dtmf = f->subclass.integer;
@@ -4564,8 +4773,12 @@
 
 		if (rt_schedule && *too_early) {
 			/* Announce that the caller is early and exit */
-			if (!ast_streamfile(chan, "conf-has-not-started", ast_channel_language(chan))) {
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<conf-has-not-started>");
+			} else {
+				if (!ast_streamfile(chan, "conf-has-not-started", ast_channel_language(chan))) {
+					ast_waitstream(chan, "");
+				}
 			}
 			ast_variables_destroy(var);
 			return NULL;
@@ -4977,17 +5190,25 @@
 
 			/* Not found? */
 			if (ast_strlen_zero(confno)) {
-				res = ast_streamfile(chan, "conf-noempty", ast_channel_language(chan));
 				ast_test_suite_event_notify("PLAYBACK", "Message: conf-noempty");
-				if (!res)
-					ast_waitstream(chan, "");
+				if (ast_using_saysentence()) {
+					ast_say_sentence(chan, "", "<conf-noempty>");
+				} else {
+					res = ast_streamfile(chan, "conf-noempty", ast_channel_language(chan));
+					if (!res)
+						ast_waitstream(chan, "");
+				}
 			} else {
 				if (sscanf(confno, "%30d", &confno_int) == 1) {
 					if (!ast_test_flag64(&confflags, CONFFLAG_QUIET)) {
-						res = ast_streamfile(chan, "conf-enteringno", ast_channel_language(chan));
-						if (!res) {
-							ast_waitstream(chan, "");
-							res = ast_say_digits(chan, confno_int, "", ast_channel_language(chan));
+						if (ast_using_saysentence()) {
+							ast_say_sentence(chan, "", "<conf-enteringno>%n", confno_int);
+						} else {
+							res = ast_streamfile(chan, "conf-enteringno", ast_channel_language(chan));
+							if (!res) {
+								ast_waitstream(chan, "");
+								res = ast_say_digits(chan, confno_int, "", ast_channel_language(chan));
+							}
 						}
 					}
 				} else {
@@ -5022,9 +5243,13 @@
 			if (!cnf) {
 				if (allowretry) {
 					confno[0] = '\0';
-					res = ast_streamfile(chan, "conf-invalid", ast_channel_language(chan));
-					if (!res)
-						ast_waitstream(chan, "");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, "", "<conf-invalid>");
+					} else {
+						res = ast_streamfile(chan, "conf-invalid", ast_channel_language(chan));
+						if (!res)
+							ast_waitstream(chan, "");
+					}
 					res = -1;
 				}
 			} else {
@@ -5089,12 +5314,16 @@
 								break;
 							} else {
 								/* Pin invalid */
-								if (!ast_streamfile(chan, "conf-invalidpin", ast_channel_language(chan))) {
-									res = ast_waitstream(chan, AST_DIGIT_ANY);
-									ast_stopstream(chan);
+								if (ast_using_saysentence()) {
+									res = ast_say_sentence(chan, "", "<conf-invalidpin>");
 								} else {
-									ast_log(LOG_WARNING, "Couldn't play invalid pin msg!\n");
-									break;
+									if (!ast_streamfile(chan, "conf-invalidpin", ast_channel_language(chan))) {
+										res = ast_waitstream(chan, AST_DIGIT_ANY);
+										ast_stopstream(chan);
+									} else {
+										ast_log(LOG_WARNING, "Couldn't play invalid pin msg!\n");
+										break;
+									}
 								}
 								if (res < 0)
 									break;
Index: apps/app_agent_pool.c
===================================================================
--- apps/app_agent_pool.c	(revision 404606)
+++ apps/app_agent_pool.c	(working copy)
@@ -1722,7 +1722,7 @@
 	agent_lock(agent);
 	playfile = ast_strdupa(agent->cfg->beep_sound);
 	agent_unlock(agent);
-	ast_stream_and_wait(bridge_channel->chan, playfile, AST_DIGIT_NONE);
+	ast_stream_and_wait(bridge_channel->chan, playfile, AST_DIGIT_NONE); // If this is only a beep, no need for say_sentence
 
 	agent_lock(agent);
 	switch (agent->state) {
@@ -2040,9 +2040,15 @@
 
 	agent_login_channel_config(agent, chan);
 
-	if (!ast_test_flag(&opts, OPT_SILENT)
-		&& !ast_streamfile(chan, "agent-loginok", ast_channel_language(chan))) {
-		ast_waitstream(chan, "");
+	if (ast_using_saysentence()) {
+		if (!ast_test_flag(&opts, OPT_SILENT)) {
+			ast_say_sentence(chan, "", "<agent-loginok>");
+		}
+	} else {
+		if (!ast_test_flag(&opts, OPT_SILENT)
+			&& !ast_streamfile(chan, "agent-loginok", ast_channel_language(chan))) {
+			ast_waitstream(chan, "");
+		}
 	}
 
 	ast_verb(2, "Agent '%s' logged in (format %s/%s)\n", agent->username,
Index: apps/app_authenticate.c
===================================================================
--- apps/app_authenticate.c	(revision 404606)
+++ apps/app_authenticate.c	(working copy)
@@ -161,8 +161,35 @@
    
 	/* Start asking for password */
 	for (retries = 0; retries < 3; retries++) {
-		if ((res = ast_app_getdata(chan, prompt, passwd, maxdigits, 0)) < 0)
-			break;
+		if (ast_using_saysentence()) {
+			char temp[40];
+			if (!strcmp(prompt,"agent-pass")) {
+				res = ast_say_sentence(chan, "#", "<agent-pass>.");
+			} else if (!strcmp(prompt, "auth-incorrect")) { 
+				res = ast_say_sentence(chan, "#", "<auth-incorrect>.");
+			} else {
+				res = ast_say_sentence(chan, "#", "%z.", prompt);
+			}
+			
+			if (res == '#' || res < 0) {
+				temp[0] = 0;
+			} else if (res == 0) {  /* played out and no input still */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+	
+				res = ast_readstring(chan, temp, sizeof(temp) - 1, to, fto, "#");
+	
+			} else { /* input other than # */
+				int fto = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->rtimeoutms : 6000;
+				int to = ast_channel_pbx(chan) ? ast_channel_pbx(chan)->dtimeoutms : 2000;
+				temp[0] = res;
+				temp[1] = 0;
+				res = ast_readstring(chan, temp+1, sizeof(temp) - 2, to, fto, "#");
+			}
+		} else {
+			if ((res = ast_app_getdata(chan, prompt, passwd, maxdigits, 0)) < 0)
+				break;
+		}
 
 		res = 0;
 
@@ -253,11 +280,19 @@
 			ast_channel_accountcode_set(chan, passwd);
 			ast_channel_unlock(chan);
 		}
-		if (!(res = ast_streamfile(chan, "auth-thankyou", ast_channel_language(chan))))
-			res = ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<auth-thankyou>.");
+		} else {
+			if (!(res = ast_streamfile(chan, "auth-thankyou", ast_channel_language(chan))))
+				res = ast_waitstream(chan, "");
+		}
 	} else {
-		if (!ast_streamfile(chan, "vm-goodbye", ast_channel_language(chan)))
-			res = ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<vm-goodbye>.");
+		} else {
+			if (!ast_streamfile(chan, "vm-goodbye", ast_channel_language(chan)))
+				res = ast_waitstream(chan, "");
+		}
 		res = -1;
 	}
 
Index: apps/app_minivm.c
===================================================================
--- apps/app_minivm.c	(revision 404606)
+++ apps/app_minivm.c	(working copy)
@@ -1561,49 +1561,85 @@
 
 	snprintf(fn, sizeof(fn), "%s%s/%s/greet", MVM_SPOOL_DIR, domain, username);
 
-	if (ast_fileexists(fn, NULL, NULL) > 0) {
-		res = ast_streamfile(chan, fn, ast_channel_language(chan));
-		if (res) 
-			return -1;
-		res = ast_waitstream(chan, ecodes);
-		if (res) 
-			return res;
-	} else {
-		int numericusername = 1;
-		char *i = username;
-
-		ast_debug(2, "No personal prompts. Using default prompt set for language\n");
-
-		while (*i)  {
-			ast_debug(2, "Numeric? Checking %c\n", *i);
-			if (!isdigit(*i)) {
-				numericusername = FALSE;
-				break;
+	if (ast_using_saysentence()) {
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+			if (busy)
+				res = ast_say_sentence(chan, ecodes, "%z<vm-isonphone>.", fn);
+			else
+				res = ast_say_sentence(chan, ecodes, "%z<vm-isunavail>.", fn);
+		} else {
+			int numericusername = 1;
+			char *i = username;
+	
+			ast_debug(2, "No personal prompts. Using default prompt set for language\n");
+	
+			while (*i)  {
+				ast_debug(2, "Numeric? Checking %c\n", *i);
+				if (!isdigit(*i)) {
+					numericusername = FALSE;
+					break;
+				}
+				i++;
 			}
-			i++;
+	
+			if (numericusername) {
+				if (busy)
+					res = ast_say_sentence(chan, ecodes, "<vm-theperson>%i<vm-isonphone>.", username);
+				else
+					res = ast_say_sentence(chan, ecodes, "<vm-theperson>%i<vm-isunavail>.", username);
+			} else {
+				if (busy)
+					res = ast_say_sentence(chan, ecodes, "<vm-theextensionis><vm-isonphone>.");
+				else
+					res = ast_say_sentence(chan, ecodes, "<vm-theextensionis><vm-isunavail>.");
+			}
 		}
+	} else {
 
-		if (numericusername) {
-			if (ast_streamfile(chan, "vm-theperson", ast_channel_language(chan)))
+		if (ast_fileexists(fn, NULL, NULL) > 0) {
+			res = ast_streamfile(chan, fn, ast_channel_language(chan));
+			if (res) 
 				return -1;
-			if ((res = ast_waitstream(chan, ecodes)))
+			res = ast_waitstream(chan, ecodes);
+			if (res) 
 				return res;
-
-			res = ast_say_digit_str(chan, username, ecodes, ast_channel_language(chan));
-			if (res)
-				return res;
 		} else {
-			if (ast_streamfile(chan, "vm-theextensionis", ast_channel_language(chan)))
-				return -1;
-			if ((res = ast_waitstream(chan, ecodes)))
-				return res;
+			int numericusername = 1;
+			char *i = username;
+	
+			ast_debug(2, "No personal prompts. Using default prompt set for language\n");
+	
+			while (*i)  {
+				ast_debug(2, "Numeric? Checking %c\n", *i);
+				if (!isdigit(*i)) {
+					numericusername = FALSE;
+					break;
+				}
+				i++;
+			}
+	
+			if (numericusername) {
+				if (ast_streamfile(chan, "vm-theperson", ast_channel_language(chan)))
+					return -1;
+				if ((res = ast_waitstream(chan, ecodes)))
+					return res;
+	
+				res = ast_say_digit_str(chan, username, ecodes, ast_channel_language(chan));
+				if (res)
+					return res;
+			} else {
+				if (ast_streamfile(chan, "vm-theextensionis", ast_channel_language(chan)))
+					return -1;
+				if ((res = ast_waitstream(chan, ecodes)))
+					return res;
+			}
 		}
+	
+		res = ast_streamfile(chan, busy ? "vm-isonphone" : "vm-isunavail", ast_channel_language(chan));
+		if (res)
+			return -1;
+		res = ast_waitstream(chan, ecodes);
 	}
-
-	res = ast_streamfile(chan, busy ? "vm-isonphone" : "vm-isunavail", ast_channel_language(chan));
-	if (res)
-		return -1;
-	res = ast_waitstream(chan, ecodes);
 	return res;
 }
 
@@ -1666,8 +1702,13 @@
 				ast_verb(3, "Re-recording the message\n");
 			else
 				ast_verb(3, "Recording the message\n");
-			if (recorded && outsidecaller) 
-				cmd = ast_play_and_wait(chan, "beep");
+			if (recorded && outsidecaller) {
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<beep>");
+				} else {
+					cmd = ast_play_and_wait(chan, "beep");
+				}
+			}
 			recorded = 1;
 			/* After an attempt has been made to record message, we have to take care of INTRO and beep for incoming messages, but not for greetings */
 			if (record_gain)
@@ -1697,22 +1738,42 @@
  		case '9':
 		case '*':
 		case '#':
- 			cmd = ast_play_and_wait(chan, "vm-sorry");
+ 			if (ast_using_saysentence()) {
+ 				cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+ 			} else {
+ 				cmd = ast_play_and_wait(chan, "vm-sorry");
+ 			}
  			break;
  		case '0':
 			if(!ast_test_flag(vmu, MVM_OPERATOR)) {
- 				cmd = ast_play_and_wait(chan, "vm-sorry");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-sorry>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-sorry");
+ 				}
  				break;
 			}
 			if (message_exists || recorded) {
-				cmd = ast_play_and_wait(chan, "vm-saveoper");
+				if (ast_using_saysentence()) {
+					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-saveoper>");
+				} else {
+					cmd = ast_play_and_wait(chan, "vm-saveoper");
+				}
 				if (!cmd)
 					cmd = ast_waitfordigit(chan, 3000);
 				if (cmd == '1') {
-					ast_play_and_wait(chan, "vm-msgsaved");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-msgsaved>");
+					} else {
+						ast_play_and_wait(chan, "vm-msgsaved");
+					}
 					cmd = '0';
 				} else {
-					ast_play_and_wait(chan, "vm-deleted");
+					if (ast_using_saysentence()) {
+						ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-deleted>");
+					} else {
+						ast_play_and_wait(chan, "vm-deleted");
+					}
 					vm_delete(recordfile);
 					cmd = '0';
 				}
@@ -1725,15 +1786,27 @@
 			if (outsidecaller && !ast_test_flag(vmu, MVM_REVIEW))
 				return cmd;
  			if (message_exists) {
- 				cmd = ast_play_and_wait(chan, "vm-review");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-review>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-review");
+ 				}
  			} else {
- 				cmd = ast_play_and_wait(chan, "vm-torerecord");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-torerecord>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-torerecord");
+ 				}
  				if (!cmd)
  					cmd = ast_waitfordigit(chan, 600);
  			}
 
  			if (!cmd && outsidecaller && ast_test_flag(vmu, MVM_OPERATOR)) {
- 				cmd = ast_play_and_wait(chan, "vm-reachoper");
+ 				if (ast_using_saysentence()) {
+ 					cmd = ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-reachoper>");
+ 				} else {
+ 					cmd = ast_play_and_wait(chan, "vm-reachoper");
+ 				}
  				if (!cmd)
  					cmd = ast_waitfordigit(chan, 600);
  			}
@@ -1747,8 +1820,13 @@
  			}
  		}
  	}
-	if (outsidecaller)
-		ast_play_and_wait(chan, "vm-goodbye");
+	if (outsidecaller) {
+		if (ast_using_saysentence()) {
+			ast_say_sentence(chan, AST_DIGIT_ANY, "<vm-goodbye>");
+		} else {
+			ast_play_and_wait(chan, "vm-goodbye");
+		}
+	}
  	if (cmd == 't')
  		cmd = 0;
  	return cmd;
@@ -1942,9 +2020,13 @@
 	txtdes = mkstemp(tmptxtfile);
 	if (txtdes < 0) {
 		ast_log(LOG_ERROR, "Unable to create message file %s: %s\n", tmptxtfile, strerror(errno));
-		res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
-		if (!res)
-			res = ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<vm-mailboxfull>.");
+		} else {
+			res = ast_streamfile(chan, "vm-mailboxfull", ast_channel_language(chan));
+			if (!res)
+				res = ast_waitstream(chan, "");
+		}
 		pbx_builtin_setvar_helper(chan, "MVM_RECORD_STATUS", "FAILED");
 		return res;
 	}
@@ -2371,12 +2453,16 @@
 		res = 0;
 	}
 	if (!res && !ast_test_flag(&leave_options, OPT_SILENT)) {
-		res = ast_streamfile(chan, SOUND_INTRO, ast_channel_language(chan));
-		if (!res)
-			res = ast_waitstream(chan, ecodes);
-		if (res == '#') {
-			ast_set_flag(&leave_options, OPT_SILENT);
-			res = 0;
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, ecodes, "<vm-intro>.");
+		} else {
+			res = ast_streamfile(chan, SOUND_INTRO, ast_channel_language(chan));
+			if (!res)
+				res = ast_waitstream(chan, ecodes);
+			}
+			if (res == '#') {
+				ast_set_flag(&leave_options, OPT_SILENT);
+				res = 0;
 		}
 	}
 	if (res > 0)
@@ -2401,7 +2487,11 @@
 			} else if (ousemacro && !ast_strlen_zero(ast_channel_macrocontext(chan))) {
 				ast_channel_context_set(chan, ast_channel_macrocontext(chan));
 			}
-			ast_play_and_wait(chan, "transfer");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, AST_DIGIT_ANY, "<transfer>");
+			} else {
+				ast_play_and_wait(chan, "transfer");
+			}
 			ast_channel_priority_set(chan, 0);
 			pbx_builtin_setvar_helper(chan, "MVM_GREET_STATUS", "USEREXIT");
 		}
Index: apps/app_dial.c
===================================================================
--- apps/app_dial.c	(revision 404606)
+++ apps/app_dial.c	(working copy)
@@ -1749,8 +1749,13 @@
 	for (loopcount = 0; loopcount < 3; loopcount++) {
 		if (res2 && loopcount == 0) /* error in ast_autoservice_start() */
 			break;
-		if (!res2) /* on timeout, play the message again */
-			res2 = ast_play_and_wait(peer, "priv-callpending");
+		if (!res2) { /* on timeout, play the message again */
+			if (ast_using_saysentence()) {
+				res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<priv-callpending>");
+			} else {
+				res2 = ast_play_and_wait(peer, "priv-callpending");
+			}
+		}
 		if (!valid_priv_reply(opts, res2))
 			res2 = 0;
 		/* priv-callpending script:
@@ -1763,10 +1768,20 @@
 		/* now get input from the called party, as to their choice */
 		if (!res2) {
 			/* XXX can we have both, or they are mutually exclusive ? */
-			if (ast_test_flag64(opts, OPT_PRIVACY))
-				res2 = ast_play_and_wait(peer, "priv-callee-options");
-			if (ast_test_flag64(opts, OPT_SCREENING))
-				res2 = ast_play_and_wait(peer, "screen-callee-options");
+			if (ast_test_flag64(opts, OPT_PRIVACY)) {
+				if (ast_using_saysentence()) {
+					res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<priv-callee-options>");
+				} else {
+					res2 = ast_play_and_wait(peer, "priv-callee-options");
+				}
+			}
+			if (ast_test_flag64(opts, OPT_SCREENING)) {
+				if (ast_using_saysentence()) {
+					res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<screen-callee-options>");
+				} else {
+					res2 = ast_play_and_wait(peer, "screen-callee-options");
+				}
+			}
 		}
 
 		/*! \page DialPrivacy Dial Privacy scripts
@@ -1788,7 +1803,11 @@
 		if (valid_priv_reply(opts, res2))
 			break;
 		/* invalid option */
-		res2 = ast_play_and_wait(peer, "vm-sorry");
+		if (ast_using_saysentence()) {
+			res2 = ast_say_sentence(peer, AST_DIGIT_ANY, "<vm-sorry>");
+		} else {
+			res2 = ast_play_and_wait(peer, "vm-sorry");
+		}
 	}
 
 	if (ast_test_flag64(opts, OPT_MUSICBACK)) {
@@ -1948,8 +1967,12 @@
 					ast_verb(3, "Successfully deleted %s intro file\n", pa->privintro);
 				return -1;
 			}
-			if (!ast_streamfile(chan, "vm-dialout", ast_channel_language(chan)) )
-				ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<vm-dialout>");
+			} else {
+				if (!ast_streamfile(chan, "vm-dialout", ast_channel_language(chan)) )
+					ast_waitstream(chan, "");
+			}
 		}
 	}
 	return 1; /* success */
Index: apps/app_page.c
===================================================================
--- apps/app_page.c	(revision 404606)
+++ apps/app_page.c	(working copy)
@@ -384,9 +384,13 @@
 	}
 
 	if (!ast_test_flag(&options.flags, PAGE_QUIET)) {
-		res = ast_streamfile(chan, "beep", ast_channel_language(chan));
-		if (!res)
-			res = ast_waitstream(chan, "");
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<beep>");
+		} else {
+			res = ast_streamfile(chan, "beep", ast_channel_language(chan));
+			if (!res)
+				res = ast_waitstream(chan, "");
+		}
 	}
 
 	if (!res) {
Index: apps/app_dictate.c
===================================================================
--- apps/app_dictate.c	(revision 404606)
+++ apps/app_dictate.c	(working copy)
@@ -162,7 +162,11 @@
 		mode = DMODE_PLAY;
 		memset(&flags, 0, sizeof(flags));
 		ast_set_flag(&flags, DFLAG_PAUSE);
-		digit = play_and_wait(chan, "dictate/forhelp", AST_DIGIT_ANY);
+		if (ast_using_saysentence()) {
+			digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/forhelp>");
+		} else {
+			digit = play_and_wait(chan, "dictate/forhelp", AST_DIGIT_ANY);
+		}
 		done = 0;
 		speed = 1;
 		res = 0;
@@ -231,25 +235,52 @@
 						break;
 					case '*':
 						ast_toggle_flag(&flags, DFLAG_PAUSE);
-						if (ast_test_flag(&flags, DFLAG_PAUSE)) {
-							digit = play_and_wait(chan, "dictate/pause", AST_DIGIT_ANY);
+						if (ast_using_saysentence()) {
+							if (ast_test_flag(&flags, DFLAG_PAUSE)) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/pause>");
+							} else {
+								if (mode == DMODE_PLAY)
+									digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/playback>");
+								else
+									digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/record>");
+							}
 						} else {
-							digit = play_and_wait(chan, mode == DMODE_PLAY ? "dictate/playback" : "dictate/record", AST_DIGIT_ANY);
+							if (ast_test_flag(&flags, DFLAG_PAUSE)) {
+								digit = play_and_wait(chan, "dictate/pause", AST_DIGIT_ANY);
+							} else {
+								digit = play_and_wait(chan, mode == DMODE_PLAY ? "dictate/playback" : "dictate/record", AST_DIGIT_ANY);
+							}
 						}
 						break;
 					case '0':
 						ast_set_flag(&flags, DFLAG_PAUSE);
-						digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/paused>");
+							} else {
+								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							}
 						switch(mode) {
 						case DMODE_PLAY:
-							digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/play_help>");
+							} else {
+								digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							}
 							break;
 						case DMODE_RECORD:
-							digit = play_and_wait(chan, "dictate/record_help", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/record_help>");
+							} else {
+								digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							}
 							break;
 						}
 						if (digit == 0) {
-							digit = play_and_wait(chan, "dictate/both_help", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/both_help>");
+							} else {
+								digit = play_and_wait(chan, "dictate/play_help", AST_DIGIT_ANY);
+							}
 						} else if (digit < 0) {
 							done = 1;
 							break;
@@ -265,9 +296,17 @@
 				case DMODE_PLAY:
 					if (lastop != DMODE_PLAY) {
 						if (ast_test_flag(&flags, DFLAG_PAUSE)) {
-							digit = play_and_wait(chan, "dictate/playback_mode", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = play_and_wait(chan, "dictate/playback_mode", AST_DIGIT_ANY);
+							} else {
+								digit = play_and_wait(chan, "dictate/playback_mode", AST_DIGIT_ANY);
+							}
 							if (digit == 0) {
+							if (ast_using_saysentence()) {
 								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							} else {
+								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+							}
 							} else if (digit < 0) {
 								break;
 							}
@@ -301,9 +340,17 @@
 					if (lastop != DMODE_RECORD) {
 						int oflags = O_CREAT | O_WRONLY;
 						if (ast_test_flag(&flags, DFLAG_PAUSE)) {
-							digit = play_and_wait(chan, "dictate/record_mode", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/record_mode>");
+							} else {
+								digit = play_and_wait(chan, "dictate/record_mode", AST_DIGIT_ANY);
+							}
 							if (digit == 0) {
-								digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+								if (ast_using_saysentence()) {
+									digit = play_and_wait(chan, AST_DIGIT_ANY, "<dictate/paused>");
+								} else {
+									digit = play_and_wait(chan, "dictate/paused", AST_DIGIT_ANY);
+								}
 							} else if (digit < 0) {
 								break;
 							}
@@ -312,7 +359,11 @@
 						ast_closestream(fs);
 						if ( ast_test_flag(&flags, DFLAG_TRUNC)) {
 							oflags |= O_TRUNC;
-							digit = play_and_wait(chan, "dictate/truncating_audio", AST_DIGIT_ANY);
+							if (ast_using_saysentence()) {
+								digit = ast_say_sentence(chan, AST_DIGIT_ANY, "<dictate/truncating_audio>");
+							} else {
+								digit = play_and_wait(chan, "dictate/truncating_audio", AST_DIGIT_ANY);
+							}
 						} else {
 							oflags |= O_APPEND;
 						}
Index: apps/app_followme.c
===================================================================
--- apps/app_followme.c	(revision 404606)
+++ apps/app_followme.c	(working copy)
@@ -651,22 +651,43 @@
 				if (!ast_strlen_zero(tpargs->namerecloc)) {
 					tmpuser->state = 1;
 					tmpuser->digts = 0;
-					if (!ast_streamfile(tmpuser->ochan, callfromname, ast_channel_language(tmpuser->ochan))) {
-						ast_sched_runq(ast_channel_sched(tmpuser->ochan));
+					
+					if (ast_using_saysentence()) {
+						if (!ast_say_sentence_nowait(tmpuser->ochan, "", "<followme/call-from>")) {
+							ast_sched_runq(ast_channel_sched(tmpuser->ochan));
+						} else {
+							ast_log(LOG_WARNING, "Unable to playback %s.\n", callfromname);
+							clear_caller(tmpuser);
+							continue;
+						}
 					} else {
-						ast_log(LOG_WARNING, "Unable to playback %s.\n", callfromname);
-						clear_caller(tmpuser);
-						continue;
+						if (!ast_streamfile(tmpuser->ochan, callfromname, ast_channel_language(tmpuser->ochan))) {
+							ast_sched_runq(ast_channel_sched(tmpuser->ochan));
+						} else {
+							ast_log(LOG_WARNING, "Unable to playback %s.\n", callfromname);
+							clear_caller(tmpuser);
+							continue;
+						}
 					}
 				} else {
 					tmpuser->state = 2;
 					tmpuser->digts = 0;
-					if (!ast_streamfile(tmpuser->ochan, tpargs->norecordingprompt, ast_channel_language(tmpuser->ochan)))
-						ast_sched_runq(ast_channel_sched(tmpuser->ochan));
-					else {
-						ast_log(LOG_WARNING, "Unable to playback %s.\n", tpargs->norecordingprompt);
-						clear_caller(tmpuser);
-						continue;
+					if (ast_using_saysentence()) {
+						if (!ast_say_sentence_nowait(tmpuser->ochan, "", "<followme/no-recording>"))
+							ast_sched_runq(ast_channel_sched(tmpuser->ochan));
+						else {
+							ast_log(LOG_WARNING, "Unable to playback %s.\n", tpargs->norecordingprompt);
+							clear_caller(tmpuser);
+							continue;
+						}
+					} else {
+						if (!ast_streamfile(tmpuser->ochan, tpargs->norecordingprompt, ast_channel_language(tmpuser->ochan)))
+							ast_sched_runq(ast_channel_sched(tmpuser->ochan));
+						else {
+							ast_log(LOG_WARNING, "Unable to playback %s.\n", tpargs->norecordingprompt);
+							clear_caller(tmpuser);
+							continue;
+						}
 					}
 				}
 			}
@@ -681,19 +702,29 @@
 					case 1:
 						ast_verb(3, "<%s> Playback of the call-from file appears to be done.\n",
 							ast_channel_name(tmpuser->ochan));
-						if (!ast_streamfile(tmpuser->ochan, tpargs->namerecloc, ast_channel_language(tmpuser->ochan))) {
+						if (!ast_streamfile(tmpuser->ochan, tpargs->namerecloc, ast_channel_language(tmpuser->ochan))) { // a user-recorded file, no need for say_sentence
 							tmpuser->state = 2;
 						} else {
 							ast_log(LOG_NOTICE, "<%s> Unable to playback %s. Maybe the caller didn't record their name?\n",
 								ast_channel_name(tmpuser->ochan), tpargs->namerecloc);
 							memset(tmpuser->yn, 0, sizeof(tmpuser->yn));
 							tmpuser->ynidx = 0;
-							if (!ast_streamfile(tmpuser->ochan, pressbuttonname, ast_channel_language(tmpuser->ochan)))
-								tmpuser->state = 3;
-							else {
-								ast_log(LOG_WARNING, "Unable to playback %s.\n", pressbuttonname);
-								clear_caller(tmpuser);
-								continue;
+							if (ast_using_saysentence()) {
+								if (!ast_say_sentence_nowait(tmpuser->ochan, "", "<followme/options>"))
+									tmpuser->state = 3;
+								else {
+									ast_log(LOG_WARNING, "Unable to playback %s.\n", pressbuttonname);
+									clear_caller(tmpuser);
+									continue;
+								}
+							} else {
+								if (!ast_streamfile(tmpuser->ochan, pressbuttonname, ast_channel_language(tmpuser->ochan)))
+									tmpuser->state = 3;
+								else {
+									ast_log(LOG_WARNING, "Unable to playback %s.\n", pressbuttonname);
+									clear_caller(tmpuser);
+									continue;
+								}
 							}
 						}
 						break;
@@ -702,11 +733,20 @@
 							ast_channel_name(tmpuser->ochan));
 						memset(tmpuser->yn, 0, sizeof(tmpuser->yn));
 						tmpuser->ynidx = 0;
-						if (!ast_streamfile(tmpuser->ochan, pressbuttonname, ast_channel_language(tmpuser->ochan))) {
-							tmpuser->state = 3;
+						if (ast_using_saysentence()) {
+							if (!ast_say_sentence_nowait(tmpuser->ochan, "", "<followme/options>")) {
+								tmpuser->state = 3;
+							} else {
+								clear_caller(tmpuser);
+								continue;
+							}
 						} else {
-							clear_caller(tmpuser);
-							continue;
+							if (!ast_streamfile(tmpuser->ochan, pressbuttonname, ast_channel_language(tmpuser->ochan))) {
+								tmpuser->state = 3;
+							} else {
+								clear_caller(tmpuser);
+								continue;
+							}
 						}
 						break;
 					case 3:
@@ -786,20 +826,39 @@
 						ast_channel_hangupcause_set(caller, AST_CAUSE_NORMAL_CLEARING);
 						ast_verb(3, "Starting playback of %s\n", callfromname);
 						if (!ast_strlen_zero(tpargs->namerecloc)) {
-							if (!ast_streamfile(winner, callfromname, ast_channel_language(winner))) {
-								ast_sched_runq(ast_channel_sched(winner));
-								tmpuser->state = 1;
+							if (ast_using_saysentence()) {
+								if (!ast_say_sentence_nowait(winner, "", "<followme/call-from>")) {
+									ast_sched_runq(ast_channel_sched(winner));
+									tmpuser->state = 1;
+								} else {
+									ast_log(LOG_WARNING, "Unable to playback followme/call-from\n");
+									clear_caller(tmpuser);
+								}
 							} else {
-								ast_log(LOG_WARNING, "Unable to playback %s.\n", callfromname);
-								clear_caller(tmpuser);
+								if (!ast_streamfile(winner, callfromname, ast_channel_language(winner))) {
+									ast_sched_runq(ast_channel_sched(winner));
+									tmpuser->state = 1;
+								} else {
+									ast_log(LOG_WARNING, "Unable to playback %s.\n", callfromname);
+									clear_caller(tmpuser);
+								}
 							}
 						} else {
 							tmpuser->state = 2;
-							if (!ast_streamfile(tmpuser->ochan, tpargs->norecordingprompt, ast_channel_language(tmpuser->ochan)))
-								ast_sched_runq(ast_channel_sched(tmpuser->ochan));
-							else {
-								ast_log(LOG_WARNING, "Unable to playback %s.\n", tpargs->norecordingprompt);
-								clear_caller(tmpuser);
+							if (ast_using_saysentence()) {
+								if (!ast_say_sentence_nowait(tmpuser->ochan, "", "followme/no-recording"))
+									ast_sched_runq(ast_channel_sched(tmpuser->ochan));
+								else {
+									ast_log(LOG_WARNING, "Unable to playback %s.\n", tpargs->norecordingprompt);
+									clear_caller(tmpuser);
+								}
+							} else {
+								if (!ast_streamfile(tmpuser->ochan, tpargs->norecordingprompt, ast_channel_language(tmpuser->ochan)))
+									ast_sched_runq(ast_channel_sched(tmpuser->ochan));
+								else {
+									ast_log(LOG_WARNING, "Unable to playback %s.\n", tpargs->norecordingprompt);
+									clear_caller(tmpuser);
+								}
 							}
 						}
 						break;
@@ -1400,7 +1459,11 @@
 		}
 
 		if (ast_test_flag(&targs->followmeflags, FOLLOWMEFLAG_STATUSMSG)) {
-			ast_stream_and_wait(chan, targs->statusprompt, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<followme/status>");
+			} else {
+				ast_stream_and_wait(chan, targs->statusprompt, "");
+			}
 		}
 
 		if (ast_test_flag(&targs->followmeflags, FOLLOWMEFLAG_RECORDNAME)) {
@@ -1418,12 +1481,17 @@
 		}
 
 		if (!ast_test_flag(&targs->followmeflags, FOLLOWMEFLAG_DISABLEHOLDPROMPT)) {
-			if (ast_streamfile(chan, targs->plsholdprompt, ast_channel_language(chan))) {
-				goto outrun;
+			if (ast_using_saysentence()) {
+				if (ast_say_sentence(chan, "", "<followme/pls-hold-while-try>"))
+					goto outrun;
+			} else {
+				if (ast_streamfile(chan, targs->plsholdprompt, ast_channel_language(chan))) {
+					goto outrun;
+				}
+				if (ast_waitstream(chan, "") < 0)
+					goto outrun;
+				}
 			}
-			if (ast_waitstream(chan, "") < 0)
-				goto outrun;
-		}
 		ast_moh_start(chan, targs->mohclass, NULL);
 	}
 
@@ -1442,7 +1510,11 @@
 		}
 
 		if (ast_test_flag(&targs->followmeflags, FOLLOWMEFLAG_UNREACHABLEMSG)) {
-			ast_stream_and_wait(chan, targs->sorryprompt, "");
+			if (ast_using_saysentence()) {
+				ast_say_sentence(chan, "", "<followme/sorry>");
+			} else {
+				ast_stream_and_wait(chan, targs->sorryprompt, "");
+			}
 		}
 		res = 0;
 	} else {
Index: apps/app_directory.c
===================================================================
--- apps/app_directory.c	(revision 404606)
+++ apps/app_directory.c	(working copy)
@@ -286,11 +286,24 @@
  *           '1' for selected entry from directory
  *           '*' for skipped entry from directory
  */
+
+static int dir_sayname(struct ast_channel *chan, const char *mailbox, const char *context, char *path, int pathlen)
+{
+        int res = -1;
+        snprintf(path, pathlen, "%s/voicemail/%s/%s/greet", ast_config_AST_SPOOL_DIR, context, mailbox);
+        if (ast_fileexists(path, NULL, NULL)) {
+		res = 0;
+        }
+        return res;
+}
+
 static int play_mailbox_owner(struct ast_channel *chan, const char *context,
 	const char *ext, const char *name, struct ast_flags *flags)
 {
 	int res = 0;
-	if ((res = ast_app_sayname(chan, ext, context)) >= 0) {
+	char dir[PATH_MAX];
+
+	if ((res = dir_sayname(chan, ext, context, dir, sizeof(dir))) >= 0) {
 		ast_stopstream(chan);
 		/* If Option 'e' was specified, also read the extension number with the name */
 		if (ast_test_flag(flags, OPT_SAYEXTENSION)) {
@@ -354,11 +367,30 @@
 		item = *ptr;
 
 		for (loop = 3 ; loop > 0; loop--) {
+			if (ast_using_saysentence()) {
+				char path[PATH_MAX];
+				int res2 = dir_sayname(chan, item->exten, item->context, path, sizeof(path));
+				if (res2 < 0)  {/* if there is NO greeting file */
+					if (!ast_strlen_zero(path) && ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%c<vm-extension>%c<dir-instr>.", S_OR(item->name, item->exten), item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%c<dir-instr>.", S_OR(item->name, item->exten));
+					}
+				} else {
+					if (ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<vm-extension>%c<dir-instr>.", path, item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "%z<dir-instr>.", path);
+					}
+				}
+			} else {
+	
+				if (!res)
+					res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
+				if (!res)
+					res = ast_stream_and_wait(chan, "dir-instr", AST_DIGIT_ANY);
+			}
 			if (!res)
-				res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
-			if (!res)
-				res = ast_stream_and_wait(chan, "dir-instr", AST_DIGIT_ANY);
-			if (!res)
 				res = ast_waitfordigit(chan, 3000);
 			ast_stopstream(chan);
 	
@@ -405,33 +437,54 @@
 
 		for (i = 0; i < limit && !res; i++) {
 			item = block[i];
-
-			snprintf(buf, sizeof(buf), "digits/%d", i + 1);
-			/* Press <num> for <name>, [ extension <ext> ] */
-			res = ast_streamfile(chan, "dir-multi1", ast_channel_language(chan));
+			if (ast_using_saysentence()) {
+				char path[PATH_MAX];
+				int res2 = dir_sayname(chan, item->exten, item->context, path, sizeof(path));
+				if (res2 < 0)  {/* if there is NO greeting file */
+					if (!ast_strlen_zero(item->name) && ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%c<vm-extension>%c", i+1, S_OR(item->name, item->exten), item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%c", i+1, S_OR(item->name, item->exten));
+					}
+				} else {
+					if (ast_test_flag(flags, OPT_SAYEXTENSION)) {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%z<vm-extension>%c", i+1, path, item->exten);
+					} else {
+						res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi1>%n<dir-multi2>%z", i+1, path);
+					}
+				}
+			} else {
+				snprintf(buf, sizeof(buf), "digits/%d", i + 1);
+				/* Press <num> for <name>, [ extension <ext> ] */
+				res = ast_streamfile(chan, "dir-multi1", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+				if (!res)
+					res = ast_streamfile(chan, buf, ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+				if (!res)
+					res = ast_streamfile(chan, "dir-multi2", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+				if (!res)
+					res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+			}
 			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
-				res = ast_streamfile(chan, buf, ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
-				res = ast_streamfile(chan, "dir-multi2", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
-				res = play_mailbox_owner(chan, item->context, item->exten, item->name, flags);
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
-			if (!res)
 				res = ast_waitfordigit(chan, 800);
 		}
 
 		/* Press "9" for more names. */
 		if (!res && count > limit) {
-			res = ast_streamfile(chan, "dir-multi9", ast_channel_language(chan));
-			if (!res)
-				res = ast_waitstream(chan, AST_DIGIT_ANY);
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, AST_DIGIT_ANY, "<dir-multi9>.");
+			} else {
+				res = ast_streamfile(chan, "dir-multi9", ast_channel_language(chan));
+				if (!res)
+					res = ast_waitstream(chan, AST_DIGIT_ANY);
+			}
 		}
 
 		if (!res) {
@@ -783,7 +836,11 @@
 	}
 
 	if (count < 1) {
-		res = ast_streamfile(chan, "dir-nomatch", ast_channel_language(chan));
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<dir-nomatch>.");
+		} else {
+			res = ast_streamfile(chan, "dir-nomatch", ast_channel_language(chan));
+		}
 		goto exit;
 	}
 
@@ -815,7 +872,11 @@
 	}
 
 	if (!res) {
-		res = ast_streamfile(chan, "dir-nomore", ast_channel_language(chan));
+		if (ast_using_saysentence()) {
+			res = ast_say_sentence(chan, "", "<dir-nomore>.");
+		} else {
+			res = ast_streamfile(chan, "dir-nomore", ast_channel_language(chan));
+		}
 	}
 
 exit:
Index: apps/app_privacy.c
===================================================================
--- apps/app_privacy.c	(revision 404606)
+++ apps/app_privacy.c	(working copy)
@@ -135,22 +135,34 @@
 
 		/* Play unidentified call */
 		res = ast_safe_sleep(chan, 1000);
-		if (!res) {
-			res = ast_streamfile(chan, "privacy-unident", ast_channel_language(chan));
-		}
-		if (!res) {
-			res = ast_waitstream(chan, "");
-		}
-
-		/* Ask for 10 digit number, give 3 attempts */
-		for (retries = 0; retries < maxretries; retries++) {
+		if (ast_using_saysentence()) {
 			if (!res) {
-				res = ast_streamfile(chan, "privacy-prompt", ast_channel_language(chan));
+				res = ast_say_sentence(chan, "", "<privacy-unident>");
 			}
+		} else {
 			if (!res) {
+				res = ast_streamfile(chan, "privacy-unident", ast_channel_language(chan));
+			}
+			if (!res) {
 				res = ast_waitstream(chan, "");
 			}
+		}
 
+		/* Ask for 10 digit number, give 3 attempts */
+		for (retries = 0; retries < maxretries; retries++) {
+			if (ast_using_saysentence()) {
+				if (!res) {
+					res = ast_say_sentence(chan, "", "<privacy-prompt>");
+				}
+			} else {
+				if (!res) {
+					res = ast_streamfile(chan, "privacy-prompt", ast_channel_language(chan));
+				}
+				if (!res) {
+					res = ast_waitstream(chan, "");
+				}
+			}
+
 			if (!res) {
 				res = ast_readstring(chan, phone, sizeof(phone) - 1, /* digit timeout ms */ 3200, /* first digit timeout */ 5000, "#");
 			}
@@ -164,9 +176,13 @@
 				/* if we have a checkcontext argument, do pattern matching */
 				if (!ast_strlen_zero(args.checkcontext)) {
 					if (!ast_exists_extension(NULL, args.checkcontext, phone, 1, NULL)) {
-						res = ast_streamfile(chan, "privacy-incorrect", ast_channel_language(chan));
-						if (!res) {
-							res = ast_waitstream(chan, "");
+						if (ast_using_saysentence()) {
+							res = ast_say_sentence(chan, "", "<privacy-incorrect>");
+						} else {
+							res = ast_streamfile(chan, "privacy-incorrect", ast_channel_language(chan));
+							if (!res) {
+								res = ast_waitstream(chan, "");
+							}
 						}
 					} else {
 						break;
@@ -175,18 +191,26 @@
 					break;
 				}
 			} else {
-				res = ast_streamfile(chan, "privacy-incorrect", ast_channel_language(chan));
-				if (!res) {
-					res = ast_waitstream(chan, "");
+				if (ast_using_saysentence()) {
+					res = ast_say_sentence(chan, "", "<privacy-incorrect>");
+				} else {
+					res = ast_streamfile(chan, "privacy-incorrect", ast_channel_language(chan));
+					if (!res) {
+						res = ast_waitstream(chan, "");
+					}
 				}
 			}
 		}
 
 		/* Got a number, play sounds and send them on their way */
 		if ((retries < maxretries) && res >= 0) {
-			res = ast_streamfile(chan, "privacy-thankyou", ast_channel_language(chan));
-			if (!res) {
-				res = ast_waitstream(chan, "");
+			if (ast_using_saysentence()) {
+				res = ast_say_sentence(chan, "", "<privacy-thankyou>");
+			} else {
+				res = ast_streamfile(chan, "privacy-thankyou", ast_channel_language(chan));
+				if (!res) {
+					res = ast_waitstream(chan, "");
+				}
 			}
 
 			/*
