1 Jan 2014

Update on the SaySentence project:

I have made several updates to the SaySentence/SayScript code
based on criticisms made over the last couple months.

One of the first issues brought forward was that of possible DOS
attacks against asterisk by introducing infinite loops into 
the SayScripts. I have solved this in two possible scenarios:
a. infinite looping. I count the number of cycles that occur
   without any state changes, and terminate the script after
   5 non-advancing cycles. I also abort the script if no
   pattern matches the input string.
b. infinite recursion. I don't allow the script to use more
   than 150 levels of recursion. Java can handle ~1500 levels
   before running out of memory. 150 seems more than adequate.
   I suspect that the say.conf code might not catch this.

The next criticism usually follows this sort of line:
"We have say.conf, so why do we need your stuff?".
This is actually a very good question. But I have a few
answers:
a. Portable code. My first goal is that this software
   be portable and usable in and with other phone 
   software and applications. I am hoping to make sound packs
   an industry-wide standard. I may have spent as
   much or more time studying the say.conf
   related code as anyone else on the planet. It has a
   number of nice features. But portability to other
   software systems is not on the list. Firstly, the code
   is under the GPL, as is most of Asterisk, and commercial
   users may find this a major stumbling block. SaySentence
   and SayScripts are under the LGPL, which seems compatible
   with Asterisk.

   Next, say.conf depends on all of the features of the config file parsing
   code, the dialplan pattern matching code, the $[] expression
   parsing code, and the ${} variable set/lookup code from Asterisk.
   While it is fantastic at using all the resources in Asterisk it
   can, this makes it extremely difficult to extract the code necessary
   for running it outside of Asterisk. 

b. The say.conf code does not include the language mapping
   features equivalent to the GNU gettext PO files. Because
   of that, you have to hard code different outputs for one vs. many.
   And, you may have to rewrite your IVR for those languages where 
   word order becomes too severe an issue for file substitution to handle.

c. Say.conf doesn't handle parameterizing the script
   to handle things like gender. I guess you could get around
   this by writing a "female" number generator, and a "male"
   version, and a "neuter" version, etc. But it seems
   a better approach to allow them to be mixed together into a single script.

d. Asterisk does not use the say.conf stuff internally. So, converting the
   internal Asterisk code to go thru the say.conf stuff would be no less
   work to incorporate than the saySentence stuff was.

e. The current say.conf mechanism is made for dialplan operation. It could
   be used for IVR design, and be really neat. But think about it. If you
   code up a dialplan app in several languages, and the order of the sentence
   parts and variables is substantially different between languages, you'll 
   have to code up the two different format strings and choose them at run
   time based on the channel language/locale variable. Thus, your IVR app
   may have to include several different Playback strings to handle the different
   languages. With the SaySentence base, you tuck all those mappings into the
   translation/<lang/locale> file, separating "data" from "code".

I have been told that a lot of graduating software engineers have
a problem with writing recursive code, so I emphasized the linear
coding capabilities of SayScript. But, after generating some example
scripts, and then comparing them to the examples in say.conf, I have
to admit that recursive SayScripts are easier to read and write, more compact,
and easier to understand. However, looking at the C code in main/say.c, (which is also recursive!),
I shake my head. Expecting novice programmers to write this kind of C code
for their language is a bit... unrealistic?
Because of this, I rewrote the English number, enum and money scripts to use
the recursive method. I directly transliterated, using sed scripts, the
say.conf entries for the several languages there, into SayScripts, and 
touched them up a bit.

I then tried reading the main/say.c code for Danish, and upgraded it a bit
to handle the "and" and gender issues that the say.c code handled.

I noted that the files referenced by the say.conf scripts are not always what the
main/say.c file references. I guess it would be best to use the files in say.c?

I have also written a script to gather the ast_say_sentence() format strings
from the Asterisk source code, which sorts and "uniq"-ify's the format strings
for you, to prepare the equivalent of a gettext PO file. The current Asterisk
template has 196 entries (from 289 converted places in the code where sound files 
are played). Each time I attack the Asterisk source, the number grows. I believe I'm
past the half-way mark! I keep these in the file, en.template, in the top level git
repository.

I have also "pretty much" finished my first pass on the Asterisk trunk code base,
to convert it to use ast_say_sentence() and its variants, internally.

The goal is to make all speech sound files run thru the SaySentence mapping mechanism,
so if you need to, in your language, you can rearrange the order of the sentence parts
and variables without modifying any Asterisk source code.



==============================================================================
EXAMPLES of current SayScripts:
==============================================================================

Here is the newest version of the number reading script in the "en" language 
file:

[number]

ATBEGIN,GREATER  999999999999        -                             -         RANGE_ERROR
ATBEGIN,LESS     0         digits/minus                            -          NEGATE  ;; turn the num positive and say "minus"

PATTERN  "^0[0-9]"                 -                               -          CUT(1)  ;; get rid of leading zeroes!


PATTERN "^[0-9]$"                    digits/{num}                                        - DONE
PATTERN "^1[0-9]$"                   digits/{num}                                        - DONE
PATTERN "^[2-9]0$"                   digits/{num}                                        - DONE
PATTERN "^[2-9][1-9]$"               digits/{num[0:0]}0,digits/{num[1:1]}                - DONE
PATTERN "^[1-9]00$"                  digits/{num[0:0]},digits/hundred                    - DONE
PATTERN "^[1-9][0-9][0-9]$"          digits/{num[0:0]},digits/hundred,<<number:{num[1]}>>  - DONE

PATTERN "^[1-9]000$"                         digits/{num[0:0]},digits/thousand                            - DONE
PATTERN "^[1-9][0-9][0-9][0-9]$"             digits/{num[0:0]},digits/thousand,<<number:{num[1]}>>        - DONE
PATTERN "^[1-9][0-9]000$"                    <<number:{num[0:1]}>>,digits/thousand                        - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9]$"        <<number:{num[0:1]}>>,digits/thousand,<<number:{num[2]}>>    - DONE
PATTERN "^[1-9][0-9][0-9]000$"               <<number:{num[0:2]}>>,digits/thousand                        - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9][0-9]$"   <<number:{num[0:2]}>>,digits/thousand,<<number:{num[3]}>>    - DONE

PATTERN "^[1-9]000000$"                                     digits/{num[0:0]},digits/million                           - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9][0-9][0-9]$"             digits/{num[0:0]},digits/million,<<number:{num[1]}>>       - DONE 
PATTERN "^[1-9][0-9]000000$"                                <<number:{num[0:1]}>>,digits/million                       - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"        <<number:{num[0:1]}>>,digits/million,<<number:{num[2]}>>   - DONE
PATTERN "^[1-9][0-9][0-9]000000$"                           <<number:{num[0:2]}>>,digits/million                       - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"   <<number:{num[0:2]}>>,digits/million,<<number:{num[3]}>>   - DONE

PATTERN "^[1-9]000000000$"                                                digits/{num[0:0]},digits/billion                         - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"            digits/{num[0:0]},digits/billion,<<number:{num[1]}>>     - DONE
PATTERN "^[1-9][0-9]000000000$"                                           <<number:{num[0:1]}>>,digits/billion                     - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"       <<number:{num[0:1]}>>,digits/billion,<<number:{num[2]}>> - DONE
PATTERN "^[1-9][0-9][0-9]000000000$"                                      <<number:{num[0:2]}>>,digits/billion                     - DONE
PATTERN "^[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"  <<number:{num[0:2]}>>,digits/billion,<<number:{num[3]}>> - DONE


NOTES:

The ATBEGIN lines execute at the beginning of the script, and in the above case generate an error if the number is out
of bounds (a common feature of the say.c code, but not in the say.conf code). It also will start with "minus" being played,
if the number is negative, and it turns it positive for the rest of the algorithm.

I also use a a rule to remove the leading zeroes, in this case iteratively, as opposed to the recursive way it is done
in say.conf. I could as easily have done it recursively, but, well, I felt like doing it iteratively at the time.

As you see above, if more than one pattern might match the same string, SayScripts go down the list, and choose the first matching
pattern. This is slightly different than dial plan code. If more than one pattern matches in the dialplan, the highest scoring, most
specific pattern will be chosen irregardless of order. For this purpose, I went with the simpler methodology. It's easier to
understand, and shouldn't have any nasty surprising behavior.

The patterns in double quotes are general regex's. The ^ matches beginning of line, and $ matches end. No
nice N,X,Z patterns built in like dial plan matching. Sorry! For the moment, we have to use [0-9], [1-9], or [2-9],
instead of X, Z, or N.



==============================================================================
Here is the money script for the en_US locale:

[money]
;; the string fed to say_money should be in the format xxxx.xx   -- always!
;; for the sake of RANGE, the .xx is removed before calculation.
;; using a say_money is smart for translation purposes. It might help
;; fix the gender and other variables that would affect reading off the numbers,
;; allows you to use the local currency name, etc.
ATBEGIN,GREATER   999999999999            -       - RANGE_ERROR

PATTERN           "^0[0-9]"            -       -  CUT(1)   ;; leading zero removal


PATTERN "^\.01$"                                                                             digits/1,digits/cent                               - DONE
PATTERN "^\.[0-9][0-9]$"                                                                     <<number:{num[1:2]}>>,digits/cents                 - DONE
PATTERN "^[0-9]+\.00                    <<number:{num[0:{len}-4]}>>,digits/dollars                                                              - DONE
PATTERN "^[0-9]+\.01                    <<number:{num[0:{len}-4]}>>,digits/dollars,vm-and,digits/1,digits/cent                                  - DONE
PATTERN "^[0-9]+\.[0-9][0-9]$"          <<number:{num[0:{len}-4]}>>,digits/dollars,vm-and,<<number:{num[{len}-2:{len}-1]}>>,digits/cents        - DONE


NOTES:

The part about the .XX after the dollars for the cents is not a requirement of anything but the script itself.
Thus, for those locales where there is no subdivision of the fundamental unit, no .XX is required. Also, the 
"." is not a requirement either. You could use "," just as well.

But, this sort of script will most likely be useful with the Euro, as it has cents also, and in England, with the 
"8 pounds 50", and so on.

In the above, {len} is the length of the number string, which is new to the spec.

==============================================================================

I don't do the reading of sequences in a recursive fashion:

[char_str]
PATTERN  "^[*]"     digits/star                              - CUT(1)
PATTERN  "^[#]"     digits/pound                             - CUT(1)
PATTERN  "^[!]"     letters/exclamation-point                - CUT(1)
PATTERN  "^[@]"     letters/at                               - CUT(1)
PATTERN  "^[$]"     letters/dollar                           - CUT(1)
PATTERN  "^[-]"     letters/dash                             - CUT(1)
PATTERN  "^[.]"     letters/dot                              - CUT(1)
PATTERN  "^[=]"     letters/equals                           - CUT(1)
PATTERN  "^[+]"     letters/plus                             - CUT(1)
PATTERN  "^[/]"     letters/slash                            - CUT(1)
PATTERN  "^[ ]"     letters/space                            - CUT(1)
PATTERN  "^[0-9]"    digits/{num[0:0]}                         - CUT(1)
PATTERN  "^[a-z]"    letters/{num[0:0]}                        - CUT(1)  ;; the code for char_str will downcase all alphabetic
PATTERN  "^."        letters/{num[0:0]}                        - CUT(1)  ;; catchall for anything else

In the above, when the length of the string drops to 0, the iteration
ends. Why didn't I use a recursive definition? I guess I didn't feel like it.
Besides, recursion uses more machine cycles than iteration. But machine cycle usage is probably
not a big factor these days.


==============================================================================

Here is the Danish (da) number script, cut off at the thousands; you can see the "n" option (for neuter?), that the
say_number for Danish routine in main/say.c accepts:

[number]

ATBEGIN,GREATER  999999999999        -                             -         RANGE_ERROR
ATBEGIN,LESS     0         digits/minus                            -          NEGATE  ;; turn the num positive and say "minus"

PATTERN  "^0[0-9]"                 -                               -          CUT(1)  ;; get rid of leading zeroes!

PATTERN,OPT "^1$",n           digits/1N
PATTERN,NOTOPT "^1$",n        digits/1
PATTERN "^[0-9]$"             digits/{num[0]}                                       - DONE
PATTERN "^1[0-9]$"            digits/{num[0:1]}                                     - DONE
PATTERN "^[2-9]0$"            digits/{num[0:1]}                                     - DONE
PATTERN "^[2-9][1-9]$"        digits/{num[1:1]}-and,digits/num[0:0]}0               - DONE
PATTERN "^100$"               digits/1N,digits/hundred                              - DONE
PATTERN "^1[0-9][0-9]$"       digits/1N,digits/hundred,<<number:{num[1]}>>          - DONE
PATTERN "^[2-9]00$"           digits/num[0:0]},digits/hundred                       - DONE
PATTERN "^[2-9][0-9][0-9]$"   digits/num[0:0]},digits/hundred,<<number:{num[1]}>>   - DONE
 
PATTERN "^1000$"                            digits/1N,digits/thousand                                   - DONE
PATTERN "^1[0-9][0-9][0-9]$"                digits/1N,digits/thousand,<<number:{num[1]}>>               - DONE
PATTERN "^10[0-9][0-9]$"                    digits/1N,digits/thousand,digits/and,<<number:{num[1]}>>     - DONE
PATTERN "^[2-9]000$"                        digits/num[0:0]},digits/thousand                            - DONE
PATTERN "^[2-9]0[0-9][0-9]$"                digits/num[0:0]},digits/thousand,digits/and,<<number:{num[1]}>>        - DONE
PATTERN "^[2-9][0-9][0-9][0-9]$"            digits/num[0:0]},digits/thousand,<<number:{num[1]}>>        - DONE
PATTERN "^[0-9][0-9]000$"                   <<number:{num[0:1]}>>,digits/thousand                       - DONE
PATTERN "^[0-9][0-9]0[0-9][0-9]$"           <<number:{num[0:1]}>>,digits/thousand,digits/and,<<number:{num[2]}>>   - DONE
PATTERN "^[0-9][0-9][0-9][0-9][0-9]$"       <<number:{num[0:1]}>>,digits/thousand,<<number:{num[2]}>>   - DONE
PATTERN "^[0-9][0-9][0-9]000$"              <<number:{num[0:2]}>>,digits/thousand                       - DONE
PATTERN "^[0-9][0-9][0-9]0[0-9][0-9]$"      <<number:{num[0:2]}>>,digits/thousand,digits/and,<<number:{num[3]}>>   - DONE
PATTERN "^[0-9][0-9][0-9][0-9][0-9][0-9]$"  <<number:{num[0:2]}>>,digits/thousand,<<number:{num[3]}>>   - DONE

NOTES:

Note the references to options. In your format strings, you might say:

ast_say_sentence(chan, "<there-are>%[n]n<ants-in-your-pants>", num);
-- which will pass the "n" option to the n (number) script. It looks like all it will affect is
that trailing "1" in the reading of the number.

Also, note the extra patterns to determine if an "and" is added where 0's occur in the number. I did some extrapolation,
and might have been a bit incorrect about where they go. Someone speaking Danish needs to review this.

==============================================================================

Here is another example of using expressions in parts of a file name:

PATTERN "^[0-9]+\.[0-9][0-9]$"          <<number:{num[0:{len}-4]}>>,digits/dollars,vm-and({len}+12)({len}==5?YES:NO),<<number:{num[{len}-2:{len}-1]}>>,digits/cents     -       DONE

This example uses the the numeric expression ({len}+12) which will evaluate to (usually) a two-digit number, and 
the expression (({len}==5?YES:NO) which will evaluate to YES or NO, depending on whether the length of the number to read is 5 or not (including the ".").
These are tacked onto the end of the vm-and filename; it's nonsense, but makes a good example.

==============================================================================

One more example. In the french entry for say.conf, there's a script for reading phone numbers, I think.
I translated it to:

[P,phonenumbers] ;; use this with %P to pronounce phone numbers
;; stuff for phone numbers
PATTERN    "^[0-9][0-9][0-9][0-9]$"                             <<number:{num[0:1]}>>,<<number:{num[2:3]}>>  - DONE
PATTERN    "^0[1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"   <<number:{num[0:0]}>>,<<number:{num[1:1]}>>,<<number:{num[2:3]}>>,<<number:{num[4:5]}>>,<<number:{num[6:7]}>>,<<number:{num[8:9]}>> - DONE
PATTERN    "^[0-9]+$"                                           <<digit_str:{num}>> - DONE

To use this new script in a formatted string:

ast_say_sentence(chan, "<call-me-at>%P<anytime>", ph_num);

==============================================================================

murf


